<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SubSonic</name>
    </assembly>
    <members>
        <member name="T:SubSonic.Sugar.Files">
            <summary>
            Summary for the Files class
            </summary>
        </member>
        <member name="M:SubSonic.Sugar.Files.GetFileText(System.String)">
            <summary>
            Read a text file and obtain it's contents.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <returns>String containing the content of the file.</returns>
        </member>
        <member name="M:SubSonic.Sugar.Files.CreateToFile(System.String,System.String)">
            <summary>
            Creates or opens a file for writing and writes text to it.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="fileText">A String containing text to be written to the file.</param>
        </member>
        <member name="M:SubSonic.Sugar.Files.UpdateFileText(System.String,System.String,System.String)">
            <summary>
            Update text within a file by replacing a substring within the file.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="lookFor">A String to be replaced.</param>
            <param name="replaceWith">A String to replace all occurrences of lookFor.</param>
        </member>
        <member name="M:SubSonic.Sugar.Files.WriteToFile(System.String,System.String)">
            <summary>
            Writes out a string to a file.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="fileText">A String containing text to be written to the file.</param>
        </member>
        <member name="M:SubSonic.Sugar.Files.FromByteCount(System.Int64)">
            <summary>
            Display bytes as a suitable unit of measurement.
            </summary>
            <remarks>
            Uses 1024^x for the units as used by memory and file sizing. Do not use in
            telecommunications where 1000^x is the norm.
            </remarks>
            <param name="bytes">Number of bytes to display.</param>
            <returns>A String formatted with the number of bytes and suitable unit of measurement.</returns>
        </member>
        <member name="T:SubSonic.VBCodeLanguage">
            <summary>
            Summary for the VBCodeLanguage class
            </summary>
        </member>
        <member name="T:SubSonic.ICodeLanguage">
            <summary>
            Summary for the ICodeLanguage interface
            </summary>
        </member>
        <member name="M:SubSonic.ICodeLanguage.CreateCodeProvider">
            <summary>
            Creates the code provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ICodeLanguage.GetDefaultValue(System.String,System.Data.DbType,System.Boolean)">
            <summary>
            Gets the default value.
            </summary>
            <param name="colName">Name of the col.</param>
            <param name="dbType">Type of the db.</param>
            <param name="isNullableColumn">if set to <c>true</c> [is nullable column].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ICodeLanguage.GetUsingStatements(System.String[])">
            <summary>
            Gets the using statements.
            </summary>
            <param name="namespaces">The namespaces.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ICodeLanguage.GetVariableType(System.Data.DbType,System.Boolean)">
            <summary>
            Gets the type of the variable.
            </summary>
            <param name="dbType">Type of the db.</param>
            <param name="isNullableColumn">if set to <c>true</c> [is nullable column].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ICodeLanguage.IsKeyword(System.String)">
            <summary>
            Determines whether the specified word is keyword.
            </summary>
            <param name="word">The word.</param>
            <returns>
            	<c>true</c> if the specified word is keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SubSonic.ICodeLanguage.CodeProvider">
            <summary>
            Gets the code provider.
            </summary>
            <value>The code provider.</value>
        </member>
        <member name="P:SubSonic.ICodeLanguage.FileExtension">
            <summary>
            Gets the file extension.
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:SubSonic.ICodeLanguage.TemplatePrefix">
            <summary>
            Gets the template prefix.
            </summary>
            <value>The template prefix.</value>
        </member>
        <member name="P:SubSonic.ICodeLanguage.Identifier">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SubSonic.ICodeLanguage.ShortName">
            <summary>
            Gets the short name.
            </summary>
            <value>The short name.</value>
        </member>
        <member name="P:SubSonic.ICodeLanguage.DefaultUsingStatements">
            <summary>
            Gets the default using statements.
            </summary>
            <value>The default using statements.</value>
        </member>
        <member name="M:SubSonic.VBCodeLanguage.CreateCodeProvider">
            <summary>
            Creates the code provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.VBCodeLanguage.GetDefaultValue(System.String,System.Data.DbType,System.Boolean)">
            <summary>
            Gets the default value.
            </summary>
            <param name="colName">Name of the col.</param>
            <param name="dbType">Type of the db.</param>
            <param name="isNullableColumn">if set to <c>true</c> [is nullable column].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.VBCodeLanguage.GetUsingStatements(System.String[])">
            <summary>
            Gets the using statements.
            </summary>
            <param name="namespaces">The namespaces.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.VBCodeLanguage.GetVariableType(System.Data.DbType,System.Boolean)">
            <summary>
            Gets the type of the variable.
            </summary>
            <param name="dbType">Type of the db.</param>
            <param name="isNullableColumn">if set to <c>true</c> [is nullable column].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.VBCodeLanguage.IsKeyword(System.String)">
            <summary>
            Determines whether the specified word is keyword.
            </summary>
            <param name="word">The word.</param>
            <returns>
            	<c>true</c> if the specified word is keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.VBCodeLanguage.GetDefaultValue(System.String,System.Data.DbType)">
            <summary>
            Gets the default value.
            </summary>
            <param name="colName">Name of the col.</param>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.VBCodeLanguage.GetVariableType(System.Data.DbType)">
            <summary>
            Gets the type of the variable.
            </summary>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.VBCodeLanguage.DefaultUsingStatements">
            <summary>
            Gets the default using statements.
            </summary>
            <value>The default using statements.</value>
        </member>
        <member name="P:SubSonic.VBCodeLanguage.CodeProvider">
            <summary>
            Gets the code provider.
            </summary>
            <value>The code provider.</value>
        </member>
        <member name="P:SubSonic.VBCodeLanguage.FileExtension">
            <summary>
            Gets the file extension.
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:SubSonic.VBCodeLanguage.Identifier">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SubSonic.VBCodeLanguage.ShortName">
            <summary>
            Gets the short name.
            </summary>
            <value>The short name.</value>
        </member>
        <member name="P:SubSonic.VBCodeLanguage.TemplatePrefix">
            <summary>
            Gets the template prefix.
            </summary>
            <value>The template prefix.</value>
        </member>
        <member name="T:SubSonic.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Insert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Insert"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.Insert.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Insert"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.Insert.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Insert"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:SubSonic.Insert.#ctor(SubSonic.TableSchema.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Insert"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:SubSonic.Insert.Into``1(System.String[])">
            <summary>
            Adds the specified columns into a new Insert object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Insert.Into(SubSonic.TableSchema.Table,System.String[])">
            <summary>
            Adds the specified columns into a new Insert object.
            </summary>
            <param name="table">The table.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Insert.Into(SubSonic.TableSchema.Table)">
            <summary>
            Returns a new Insert object using the specified table.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Insert.Values(System.Object[])">
            <summary>
            Valueses the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Insert.ValueExpression(System.Object[])">
            <summary>
            Values the expression.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Insert.Select(SubSonic.SqlQuery)">
            <summary>
            Selects the specified select results.
            </summary>
            <param name="selectResults">The select results.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Insert.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Insert.BuildSqlStatement">
            <summary>
            Builds the SQL statement.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SubSonic.RadioButtons">
            <summary>
            Summary for the RadioButtons class
            </summary>
        </member>
        <member name="M:SubSonic.RadioButtons.OnInit(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:SubSonic.RadioButtons.PromptText">
            <summary>
            Gets or sets the prompt text.
            </summary>
            <value>The prompt text.</value>
        </member>
        <member name="P:SubSonic.RadioButtons.PromptValue">
            <summary>
            Gets or sets the prompt value.
            </summary>
            <value>The prompt value.</value>
        </member>
        <member name="P:SubSonic.RadioButtons.ShowPrompt">
            <summary>
            Gets or sets a value indicating whether [show prompt].
            </summary>
            <value><c>true</c> if [show prompt]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.RadioButtons.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.RadioButtons.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.RadioButtons.TextField">
            <summary>
            Gets or sets the text field.
            </summary>
            <value>The text field.</value>
        </member>
        <member name="P:SubSonic.RadioButtons.ValueField">
            <summary>
            Gets or sets the value field.
            </summary>
            <value>The value field.</value>
        </member>
        <member name="P:SubSonic.RadioButtons.OrderField">
            <summary>
            Gets or sets the order field.
            </summary>
            <value>The order field.</value>
        </member>
        <member name="T:SubSonic.QuickTable">
            <summary>
            Summary for the QuickTable class
            </summary>
        </member>
        <member name="M:SubSonic.QuickTable.AddHeaderText(SubSonic.TableSchema.TableColumn,System.Web.UI.HtmlControls.HtmlTableCell,System.String)">
            <summary>
            Adds the header text.
            </summary>
            <param name="col">The col.</param>
            <param name="tdHeaderCell">The td header cell.</param>
            <param name="overrideText">The override text.</param>
        </member>
        <member name="M:SubSonic.QuickTable.EnsureTotals(SubSonic.Query)">
            <summary>
            Ensures the totals.
            </summary>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.QuickTable.LoadGrid">
            <summary>
            Loads the grid.
            </summary>
        </member>
        <member name="M:SubSonic.QuickTable.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:SubSonic.QuickTable.Sort_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the Sort control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.QuickTable.DecideSortDirection">
            <summary>
            Decides the sort direction.
            </summary>
        </member>
        <member name="M:SubSonic.QuickTable.BuildHeader">
            <summary>
            Builds the header.
            </summary>
        </member>
        <member name="M:SubSonic.QuickTable.BuildRows">
            <summary>
            Builds the rows.
            </summary>
        </member>
        <member name="M:SubSonic.QuickTable.BuildPager">
            <summary>
            Builds the pager.
            </summary>
        </member>
        <member name="M:SubSonic.QuickTable.ddlPages_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the ddlPages control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.QuickTable.Paging_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the Paging control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.QuickTable.SetPagingButtonState">
            <summary>
            Sets the state of the paging button.
            </summary>
        </member>
        <member name="P:SubSonic.QuickTable.ShowSort">
            <summary>
            Gets or sets a value indicating whether [show sort].
            </summary>
            <value><c>true</c> if [show sort]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.QuickTable.ColumnList">
            <summary>
            Gets or sets the column list.
            </summary>
            <value>The column list.</value>
        </member>
        <member name="P:SubSonic.QuickTable.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.QuickTable.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.QuickTable.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:SubSonic.QuickTable.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:SubSonic.QuickTable.LinkToPage">
            <summary>
            Gets or sets the link to page.
            </summary>
            <value>The link to page.</value>
        </member>
        <member name="P:SubSonic.QuickTable.LinkOnColumn">
            <summary>
            Gets or sets the link on column.
            </summary>
            <value>The link on column.</value>
        </member>
        <member name="P:SubSonic.QuickTable.WhereCollection">
            <summary>
            Gets or sets the where collection.
            </summary>
            <value>The where collection.</value>
        </member>
        <member name="P:SubSonic.QuickTable.WhereExpression">
            <summary>
            Gets or sets the where expression.
            </summary>
            <value>The where expression.</value>
        </member>
        <member name="P:SubSonic.QuickTable.HeaderLinkCSSClass">
            <summary>
            Gets or sets the header link CSS class.
            </summary>
            <value>The header link CSS class.</value>
        </member>
        <member name="P:SubSonic.QuickTable.TableCSSClass">
            <summary>
            Gets or sets the table CSS class.
            </summary>
            <value>The table CSS class.</value>
        </member>
        <member name="P:SubSonic.QuickTable.TableHeaderCSSClass">
            <summary>
            Gets or sets the table header CSS class.
            </summary>
            <value>The table header CSS class.</value>
        </member>
        <member name="P:SubSonic.QuickTable.TableCellCSSClass">
            <summary>
            Gets or sets the table cell CSS class.
            </summary>
            <value>The table cell CSS class.</value>
        </member>
        <member name="P:SubSonic.QuickTable.TableAlternatingCSSClass">
            <summary>
            Gets or sets the table alternating CSS class.
            </summary>
            <value>The table alternating CSS class.</value>
        </member>
        <member name="P:SubSonic.QuickTable.PagerCSS">
            <summary>
            Gets or sets the pager CSS.
            </summary>
            <value>The pager CSS.</value>
        </member>
        <member name="P:SubSonic.QuickTable.PageButtonCSSClass">
            <summary>
            Gets or sets the page button CSS class.
            </summary>
            <value>The page button CSS class.</value>
        </member>
        <member name="P:SubSonic.QuickTable.TotalRecords">
            <summary>
            Gets or sets the total records.
            </summary>
            <value>The total records.</value>
        </member>
        <member name="P:SubSonic.QuickTable.TotalPages">
            <summary>
            Gets or sets the total pages.
            </summary>
            <value>The total pages.</value>
        </member>
        <member name="P:SubSonic.QuickTable.ButtonFirstText">
            <summary>
            Gets or sets the button first text.
            </summary>
            <value>The button first text.</value>
        </member>
        <member name="P:SubSonic.QuickTable.ButtonPreviousText">
            <summary>
            Gets or sets the button previous text.
            </summary>
            <value>The button previous text.</value>
        </member>
        <member name="P:SubSonic.QuickTable.ButtonNextText">
            <summary>
            Gets or sets the button next text.
            </summary>
            <value>The button next text.</value>
        </member>
        <member name="P:SubSonic.QuickTable.ButtonLastText">
            <summary>
            Gets or sets the button last text.
            </summary>
            <value>The button last text.</value>
        </member>
        <member name="P:SubSonic.QuickTable.SortBy">
            <summary>
            Gets or sets the sort by.
            </summary>
            <value>The sort by.</value>
        </member>
        <member name="P:SubSonic.QuickTable.SortDirection">
            <summary>
            Gets or sets the sort direction.
            </summary>
            <value>The sort direction.</value>
        </member>
        <member name="T:SubSonic.CalendarControl">
            <summary>
            Summary description for CalendarControl.
            </summary>
        </member>
        <member name="M:SubSonic.CalendarControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.CalendarControl"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.CalendarControl.OnPreRender(System.EventArgs)">
            <summary>
            Registers client script for generating postback events prior to rendering on the client, if <see cref="P:System.Web.UI.WebControls.TextBox.AutoPostBack"/> is true.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SubSonic.CalendarControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="P:SubSonic.CalendarControl.CalendarImage">
            <summary>
            Gets the calendar image.
            </summary>
            <value>The calendar image.</value>
        </member>
        <member name="P:SubSonic.CalendarControl.DisplayFormat">
            <summary>
            Gets or sets the display format.
            </summary>
            <value>The display format.</value>
        </member>
        <member name="P:SubSonic.CalendarControl.JavaScriptFormat">
            <summary>
            Gets or sets the java script format.
            </summary>
            <value>The java script format.</value>
        </member>
        <member name="P:SubSonic.CalendarControl.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:SubSonic.CalendarControl.ShowTime">
            <summary>
            Gets or sets a value indicating whether [show time].
            </summary>
            <value><c>true</c> if [show time]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.CalendarControl.SelectedDate">
            <summary>
            Gets or sets the selected date.
            </summary>
            <value>The selected date.</value>
        </member>
        <member name="T:SubSonic.BuildProvider">
            <summary>
            Summary for the BuildProvider class
            </summary>
        </member>
        <member name="M:SubSonic.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
            <summary>
            Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.
            </summary>
            <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
        </member>
        <member name="T:SubSonic.Sugar.Numbers">
            <summary>
            Summary for the Numbers class
            </summary>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.IsNaturalNumber(System.String)">
            <summary>
            Determines whether [is natural number] [the specified s item].
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if [is natural number] [the specified s item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.IsWholeNumber(System.String)">
            <summary>
            Determines whether [is whole number] [the specified s item].
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if [is whole number] [the specified s item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.IsInteger(System.String)">
            <summary>
            Determines whether the specified s item is integer.
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if the specified s item is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.IsNumber(System.String)">
            <summary>
            Determines whether the specified s item is number.
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if the specified s item is number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.IsEven(System.Int32)">
            <summary>
            Determines whether the specified value is an even number.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is even; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.IsOdd(System.Int32)">
            <summary>
            Determines whether the specified value is an odd number.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is odd; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.Random(System.Boolean)">
            <summary>
            Generates a random number
            </summary>
            <param name="noZeros"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.Random(System.Int32)">
            <summary>
            Generates a random number with an upper bound
            </summary>
            <param name="high">The high.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number between the specified bounds
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Numbers.Random">
            <summary>
            Generates a random double
            </summary>
            <returns></returns>
        </member>
        <member name="T:SubSonic.SqlDataProvider">
            <summary>
            Summary for the SqlDataProvider class
            </summary>
        </member>
        <member name="T:SubSonic.DataProvider">
            <summary>
            Summary for the DataProvider class
            </summary>
        </member>
        <member name="M:SubSonic.DataProvider.SetDefaultConnectionString(System.String)">
            <summary>
            Sets the default connection string.
            </summary>
            <param name="defaultConnectionString">The default connection string.</param>
        </member>
        <member name="M:SubSonic.DataProvider.AddSchema(System.String,SubSonic.TableSchema.Table)">
            <summary>
            Adds the schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:SubSonic.DataProvider.GetDatabaseVersion(System.String)">
            <summary>
            Gets the database version.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.MakeParam(System.String)">
            <summary>
            Makes the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetReader(SubSonic.QueryCommand)">
            <summary>
            Gets the reader.
            </summary>
            <param name="cmd">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetSingleRecordReader(SubSonic.QueryCommand)">
            <summary>
            Gets the single record reader.
            </summary>
            <param name="cmd">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetDataSet(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <param name="cmd">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="cmd">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.ExecuteQuery(SubSonic.QueryCommand)">
            <summary>
            Executes the query.
            </summary>
            <param name="cmd">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetTableSchema(System.String,SubSonic.TableType)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetSPList">
            <summary>
            Gets the SP list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetTableNameList">
            <summary>
            Gets the table name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetViewNameList">
            <summary>
            Gets the view name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetSPParams(System.String)">
            <summary>
            Gets the SP params.
            </summary>
            <param name="spName">Name of the sp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetForeignKeyTables(System.String)">
            <summary>
            Gets the foreign key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetTableNameByPrimaryKey(System.String,System.String)">
            <summary>
            Gets the table name by primary key.
            </summary>
            <param name="pkName">Name of the pk.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetPrimaryKeyTableNames(System.String)">
            <summary>
            Gets the primary key table names.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetPrimaryKeyTables(System.String)">
            <summary>
            Gets the primary key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetForeignKeyTableName(System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetForeignKeyTableName(System.String,System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetForeignKeyTable(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.Table)">
            <summary>
            Gets the foreign key table.
            </summary>
            <param name="fkColumn">The fk column.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetDbType(System.String)">
            <summary>
            Gets the type of the db.
            </summary>
            <param name="dataType">Type of the data.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetDbCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the db command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.CreateConnection(System.String)">
            <summary>
            Creates the connection.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.__sharedConnection_Disposed(System.Object,System.EventArgs)">
            <summary>
            Handles the Disposed event of the __sharedConnection control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.DataProvider.InitializeSharedConnection">
            <summary>
            Initializes the shared connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.InitializeSharedConnection(System.String)">
            <summary>
            Initializes the shared connection.
            </summary>
            <param name="sharedConnectionString">The shared connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.ResetSharedConnection">
            <summary>
            Resets the shared connection.
            </summary>
        </member>
        <member name="M:SubSonic.DataProvider.GetRecordCount(SubSonic.Query)">
            <summary>
            Gets the record count.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.BuildSelectCommand(SubSonic.Query)">
            <summary>
            Builds the select command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.AddWhereParameters(SubSonic.QueryCommand,SubSonic.Query)">
            <summary>
            Adds the where parameters.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.DataProvider.BuildSelectCommand(System.String,SubSonic.Query)">
            <summary>
            Builds the select command.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetUpdateSql(SubSonic.Query,SubSonic.TableSchema.TableColumnCollection)">
            <summary>
            Gets the update SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.AdjustUpdateSql(SubSonic.Query,SubSonic.TableSchema.Table,System.String)">
            <summary>
            Adjusts the update SQL.
            </summary>
            <param name="qry">The qry.</param>
            <param name="table">The table.</param>
            <param name="updateSql">The update SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.BuildUpdateCommand(SubSonic.Query)">
            <summary>
            Builds the update command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.BuildDeleteCommand(SubSonic.Query)">
            <summary>
            Builds the delete command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetDeleteSql(SubSonic.Query)">
            <summary>
            Gets the delete SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.BuildWhere(SubSonic.Query)">
            <summary>
            Builds the where.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.SetParameter(System.Data.IDataReader,SubSonic.StoredProcedure.Parameter)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="rdr">The RDR.</param>
            <param name="par">The par.</param>
        </member>
        <member name="M:SubSonic.DataProvider.GetParameterPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.DelimitDbName(System.String)">
            <summary>
            Delimits the name of the db.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SubSonic.DataProvider.GetSql(SubSonic.Query)">
            <summary>
            Gets the SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetInsertSql(SubSonic.Query)">
            <summary>
            Gets the insert SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.GetSelectSql(SubSonic.Query)">
            <summary>
            Gets the select SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.BuildCommand(SubSonic.Query)">
            <summary>
            Builds the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.ScriptData(System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.ScriptData(System.String,System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.</exception>
        </member>
        <member name="M:SubSonic.DataProvider.ApplyConfig(System.Collections.Specialized.NameValueCollection,System.String@,System.String)">
            <summary>
            Applies the config.
            </summary>
            <param name="config">The config.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="configName">Name of the config.</param>
        </member>
        <member name="M:SubSonic.DataProvider.ApplyConfig(System.Collections.Specialized.NameValueCollection,System.Boolean@,System.String)">
            <summary>
            Applies the config.
            </summary>
            <param name="config">The config.</param>
            <param name="parameterValue">if set to <c>true</c> [parameter value].</param>
            <param name="configName">Name of the config.</param>
        </member>
        <member name="M:SubSonic.DataProvider.GetTableNames(System.Data.DataSet)">
            <summary>
            DataSet helper class used to get the names of the tables in the DataSet.
            </summary>
            <param name="ds">The DataSet to get the names for.</param>
            <returns>The names of the tables in the DataSet.</returns>
        </member>
        <member name="M:SubSonic.DataProvider.AddTableMappings(System.Data.Common.DataAdapter,System.Data.DataSet)">
            <summary>
            DataSet helper class used to add table mappings to a DataAdapter.
            </summary>
            <remarks>
            TableMappings keep the table names during a Fill operation.
            </remarks>
            <param name="da">The DataAdapter to add the mappings to.</param>
            <param name="ds">The DataSet containing the tables to map.</param>
        </member>
        <member name="M:SubSonic.DataProvider.AddColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.DataProvider.AlterColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.DataProvider.RemoveColumn(System.String,System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.DataProvider.CreateTable(System.String,SubSonic.TableSchema.TableColumnCollection)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.DataProvider.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="P:SubSonic.DataProvider.TableBaseClass">
            <summary>
            Gets or sets the table base class.
            </summary>
            <value>The table base class.</value>
        </member>
        <member name="P:SubSonic.DataProvider.ViewBaseClass">
            <summary>
            Gets or sets the view base class.
            </summary>
            <value>The view base class.</value>
        </member>
        <member name="P:SubSonic.DataProvider.StoredProcedureBaseClass">
            <summary>
            Gets or sets the stored procedure base class.
            </summary>
            <value>The stored procedure base class.</value>
        </member>
        <member name="P:SubSonic.DataProvider.ViewNames">
            <summary>
            Gets or sets the view names.
            </summary>
            <value>The view names.</value>
        </member>
        <member name="P:SubSonic.DataProvider.TableNames">
            <summary>
            Gets or sets the table names.
            </summary>
            <value>The table names.</value>
        </member>
        <member name="P:SubSonic.DataProvider.DefaultConnectionString">
            <summary>
            Gets or sets the default connection string.
            </summary>
            <value>The default connection string.</value>
        </member>
        <member name="P:SubSonic.DataProvider.DatabaseVersion">
            <summary>
            Gets the database version.
            </summary>
            <value>The database version.</value>
        </member>
        <member name="P:SubSonic.DataProvider.AdditionalNamespaces">
            <summary>
            A comma-separated list of additional namespaces that will be included in the "using" section of generated classes
            </summary>
            <value>The list of namespaces, i.e. My.Namespace1,My.Namespace2</value>
        </member>
        <member name="P:SubSonic.DataProvider.AppendWith">
            <summary>
            Gets or sets the default value to append to SubSonic generated objects when the default transformations
            would result in a keyword conflicts.
            </summary>
            <value>The string that will be appended</value>
        </member>
        <member name="P:SubSonic.DataProvider.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string.
            </summary>
            <value>The name of the connection string.</value>
        </member>
        <member name="P:SubSonic.DataProvider.ExcludeProcedures">
            <summary>
            Gets the exclude procedures.
            </summary>
            <value>The exclude procedures.</value>
        </member>
        <member name="P:SubSonic.DataProvider.ExcludeTables">
            <summary>
            Gets the exclude tables.
            </summary>
            <value>The exclude tables.</value>
        </member>
        <member name="P:SubSonic.DataProvider.ExtractClassNameFromSPName">
            <summary>
            Gets or sets a value indicating whether [extract class name from SP name].
            </summary>
            <value>
            	<c>true</c> if [extract class name from SP name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.FixPluralClassNames">
            <summary>
            Gets or sets a value indicating whether [fix plural class names].
            </summary>
            <value>
            	<c>true</c> if [fix plural class names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.FixDatabaseObjectCasing">
            <summary>
            Gets or sets a value indicating whether [fix database object casing].
            </summary>
            <value>
            	<c>true</c> if [fix database object casing]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.GeneratedNamespace">
            <summary>
            Gets or sets the generated namespace.
            </summary>
            <value>The generated namespace.</value>
        </member>
        <member name="P:SubSonic.DataProvider.GenerateLazyLoads">
            <summary>
            Gets or sets a value indicating whether [generate lazy loads].
            </summary>
            <value><c>true</c> if [generate lazy loads]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.DataProvider.GenerateNullableProperties">
            <summary>
            Gets or sets a value indicating whether [generate nullable properties].
            </summary>
            <value>
            	<c>true</c> if [generate nullable properties]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.GenerateODSControllers">
            <summary>
            Gets or sets a value indicating whether [generate ODS controllers].
            </summary>
            <value>
            	<c>true</c> if [generate ODS controllers]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.GenerateRelatedTablesAsProperties">
            <summary>
            Gets or sets a value indicating whether [generate related tables as properties].
            </summary>
            <value>
            	<c>true</c> if [generate related tables as properties]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.IncludeProcedures">
            <summary>
            Gets the include procedures.
            </summary>
            <value>The include procedures.</value>
        </member>
        <member name="P:SubSonic.DataProvider.IncludeTables">
            <summary>
            Gets the include tables.
            </summary>
            <value>The include tables.</value>
        </member>
        <member name="P:SubSonic.DataProvider.ManyToManySuffix">
            <summary>
            Gets or sets the many to many suffix.
            </summary>
            <value>The many to many suffix.</value>
        </member>
        <member name="P:SubSonic.DataProvider.RegexDictionaryReplace">
            <summary>
            Gets or sets the regex dictionary replace.
            </summary>
            <value>The regex dictionary replace.</value>
        </member>
        <member name="P:SubSonic.DataProvider.RegexIgnoreCase">
            <summary>
            Gets or sets a value indicating whether [regex ignore case].
            </summary>
            <value><c>true</c> if [regex ignore case]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.DataProvider.RegexMatchExpression">
            <summary>
            Gets or sets the regex match expression.
            </summary>
            <value>The regex match expression.</value>
        </member>
        <member name="P:SubSonic.DataProvider.RegexReplaceExpression">
            <summary>
            Gets or sets the regex replace expression.
            </summary>
            <value>The regex replace expression.</value>
        </member>
        <member name="P:SubSonic.DataProvider.RelatedTableLoadPrefix">
            <summary>
            Gets or sets the related table load prefix.
            </summary>
            <value>The related table load prefix.</value>
        </member>
        <member name="P:SubSonic.DataProvider.RemoveUnderscores">
            <summary>
            Gets or sets a value indicating whether [remove underscores].
            </summary>
            <value><c>true</c> if [remove underscores]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.DataProvider.SetPropertyDefaultsFromDatabase">
            <summary>
            Gets or sets a value indicating whether [set property defaults from database].
            </summary>
            <value>
            	<c>true</c> if [set property defaults from database]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.SPClassName">
            <summary>
            Gets or sets the name of the SP class.
            </summary>
            <value>The name of the SP class.</value>
        </member>
        <member name="P:SubSonic.DataProvider.SPStartsWith">
            <summary>
            Gets or sets the SP starts with.
            </summary>
            <value>The SP starts with.</value>
        </member>
        <member name="P:SubSonic.DataProvider.StripColumnText">
            <summary>
            Gets or sets the strip column text.
            </summary>
            <value>The strip column text.</value>
        </member>
        <member name="P:SubSonic.DataProvider.StripParamText">
            <summary>
            Gets or sets the strip param text.
            </summary>
            <value>The strip param text.</value>
        </member>
        <member name="P:SubSonic.DataProvider.StripSPText">
            <summary>
            Gets or sets the strip SP text.
            </summary>
            <value>The strip SP text.</value>
        </member>
        <member name="P:SubSonic.DataProvider.StripViewText">
            <summary>
            Gets or sets the strip view text.
            </summary>
            <value>The strip view text.</value>
        </member>
        <member name="P:SubSonic.DataProvider.StripTableText">
            <summary>
            Gets or sets the strip table text.
            </summary>
            <value>The strip table text.</value>
        </member>
        <member name="P:SubSonic.DataProvider.UseExtendedProperties">
            <summary>
            Gets or sets a value indicating whether [use extended properties].
            </summary>
            <value>
            	<c>true</c> if [use extended properties]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.UseSPs">
            <summary>
            Gets or sets a value indicating whether [use S ps].
            </summary>
            <value><c>true</c> if [use S ps]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.DataProvider.ViewStartsWith">
            <summary>
            Gets or sets the view starts with.
            </summary>
            <value>The view starts with.</value>
        </member>
        <member name="P:SubSonic.DataProvider.CurrentSharedConnection">
            <summary>
            Gets or sets the current shared connection.
            </summary>
            <value>The current shared connection.</value>
        </member>
        <member name="P:SubSonic.DataProvider.CurrentConnectionStringIsDefault">
            <summary>
            Gets a value indicating whether [current connection string is default].
            </summary>
            <value>
            	<c>true</c> if [current connection string is default]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.DataProvider.UseRegexReplace">
            <summary>
            Gets a value indicating whether [use regex replace].
            </summary>
            <value><c>true</c> if [use regex replace]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetNativeType(System.Data.DbType)">
            <summary>
            Gets the type of the native.
            </summary>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.SetColumnAttributes(SubSonic.TableSchema.TableColumn)">
            <summary>
            Sets the column attributes.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.AddColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.AlterColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.RemoveColumn(System.String,System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.CreateTable(System.String,SubSonic.TableSchema.TableColumnCollection)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.CreateConnection(System.String)">
            <summary>
            Creates the connection.
            </summary>
            <param name="newConnectionString">The new connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.AddParams(System.Data.SqlClient.SqlCommand,SubSonic.QueryCommand)">
            <summary>
            Adds the params.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.CheckoutOutputParams(System.Data.SqlClient.SqlCommand,SubSonic.QueryCommand)">
            <summary>
            Checkouts the output params.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.SetParameter(System.Data.IDataReader,SubSonic.StoredProcedure.Parameter)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="rdr">The RDR.</param>
            <param name="par">The par.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetParameterPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.DelimitDbName(System.String)">
            <summary>
            Delimits the name of the db.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetReader(SubSonic.QueryCommand)">
            <summary>
            Gets the reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetSingleRecordReader(SubSonic.QueryCommand)">
            <summary>
            Gets the single record reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.ExecuteQuery(SubSonic.QueryCommand)">
            <summary>
            Executes the query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.LoadExtendedPropertyDataSet">
            <summary>
            Loads the extended property data set.
            </summary>
        </member>
        <member name="M:SubSonic.SqlDataProvider.SetExtendedTableProperties(SubSonic.TableSchema.AbstractTableSchema)">
            <summary>
            Sets the extended table properties.
            </summary>
            <param name="tblSchema">The TBL schema.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.SetExtendedColumnProperties(SubSonic.TableSchema.AbstractTableSchema,SubSonic.TableSchema.TableColumn)">
            <summary>
            Sets the extended column properties.
            </summary>
            <param name="tblSchema">The TBL schema.</param>
            <param name="col">The col.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetTableSchema(System.String,SubSonic.TableType)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetSPParams(System.String)">
            <summary>
            Gets the SP params.
            </summary>
            <param name="spName">Name of the sp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetSPList">
            <summary>
            Gets the SP list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetViewNameList">
            <summary>
            Gets the view name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetTableNameList">
            <summary>
            Gets the table name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetPrimaryKeyTableNames(System.String)">
            <summary>
            Gets the primary key table names.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetPrimaryKeyTables(System.String)">
            <summary>
            Gets the primary key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetForeignKeyTableName(System.String,System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetForeignKeyTableName(System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetForeignKeyTables(System.String)">
            <summary>
            Gets the foreign key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetDbType(System.String)">
            <summary>
            Gets the type of the db.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Executes a transaction using the passed-commands
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetTableNameByPrimaryKey(System.String,System.String)">
            <summary>
            Gets the table name by primary key.
            </summary>
            <param name="pkName">Name of the pk.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetDatabaseVersion(System.String)">
            <summary>
            Gets the database version.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetSelectSql(SubSonic.Query)">
            <summary>
            Creates a SELECT statement based on the Query object settings
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetQualifiedSelect(SubSonic.TableSchema.Table)">
            <summary>
            Returns a qualified list of columns ([Table].[Column])
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.GetInsertSql(SubSonic.Query)">
            <summary>
            Loops the TableColums[] array for the object, creating a SQL string
            for use as an INSERT statement
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlDataProvider.ScriptData(System.String,System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.TurboTemplateCollection">
            <summary>
            Summary for the TurboTemplateCollection class
            </summary>
        </member>
        <member name="T:SubSonic.TurboTemplate">
            <summary>
            Summary for the TurboTemplate class
            </summary>
        </member>
        <member name="M:SubSonic.TurboTemplate.#ctor(System.String,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TurboTemplate"/> class.
            </summary>
            <param name="templateInputText">The template input text.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.TurboTemplate.Render">
            <summary>
            Renders this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TurboTemplate.CleanTemplate(System.String,SubSonic.ICodeLanguage@)">
            <summary>
            Cleans the template.
            </summary>
            <param name="templateInputText">The template input text.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TurboTemplate.CleanCalls(System.Text.RegularExpressions.Match)">
            <summary>
            Cleans the calls.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TurboTemplate.CleanCodeTags(System.Text.RegularExpressions.Match)">
            <summary>
            Cleans the code tags.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TurboTemplate.ParseTemplate(System.String)">
            <summary>
            Parses the template.
            </summary>
            <param name="templateInputText">The template input text.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TurboTemplate.LoadTextFromManifest(System.String)">
            <summary>
            Loads the text from manifest.
            </summary>
            <param name="templateFileName">Name of the template file.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.TurboTemplate.References">
            <summary>
            Gets the references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.RenderLanguage">
            <summary>
            Gets the render language.
            </summary>
            <value>The render language.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.CompileLanguage">
            <summary>
            Gets the compile language.
            </summary>
            <value>The compile language.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.AddUsingBlock">
            <summary>
            Gets or sets a value indicating whether [add using block].
            </summary>
            <value><c>true</c> if [add using block]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.CustomUsingBlock">
            <summary>
            Gets the custom using block.
            </summary>
            <value>The custom using block.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.EntryPoint">
            <summary>
            Gets or sets the entry point.
            </summary>
            <value>The entry point.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.GeneratedRenderType">
            <summary>
            Gets or sets the type of the generated render.
            </summary>
            <value>The type of the generated render.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.TemplateText">
            <summary>
            Gets or sets the template text.
            </summary>
            <value>The template text.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
            <value>The name of the template.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.FinalCode">
            <summary>
            Gets or sets the final code.
            </summary>
            <value>The final code.</value>
        </member>
        <member name="P:SubSonic.TurboTemplate.OutputPath">
            <summary>
            Gets or sets the output path.
            </summary>
            <value>The output path.</value>
        </member>
        <member name="T:SubSonic.RecordBase`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SubSonic.RecordBase`1.Initialize">
            <summary>
            Empty virtual method that may be overridden in user code to perform operations
            at the conclusion of SetDefaults() invocation
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.Loaded">
            <summary>
            Empty virtual method that may be overridden in user code to perform operations
            at the conclusion of Load() invocation
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.MarkNew">
            <summary>
            Automatically called upon object creation. Sets IsNew to <c>true</c>;
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.MarkClean">
            <summary>
            Called after any property is set. Sets IsDirty to <c>true</c>.
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.MarkOld">
            <summary>
            Called after Update() invokation. Sets IsNew to <c>false</c>.
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.Inspect">
            <summary>
            Creates a HTML formatted text represententation of the contents of the current record
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.Inspect(System.Boolean)">
            <summary>
            Creates a formatted text represententation of the contents of the current record
            </summary>
            <param name="useHtml">Whether or not the results should be formatted using HTML</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.ToString">
            <summary>
            Returns the simple string representation of the current record. By convention, this is the "descriptor" column (#2)
            </summary>
            <returns></returns>
        </member>
        <member name="F:SubSonic.RecordBase`1.columnSettings">
            <summary>
            The column settings hold the current values of the object in a collection
            so that reflection is not needed in the base class to fill out the commands
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.GetDefaultSetting(SubSonic.TableSchema.TableColumn)">
            <summary>
            Returns a default setting per data type
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.GetDBType(System.String)">
            <summary>
            Return the underlying DbType for a column
            </summary>
            <param name="columnName">The name of the column whose type is to be returned</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.SetPrimaryKey(System.Object)">
            <summary>
            Sets the Primary Key of the object
            </summary>
            <param name="oValue"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.GetPrimaryKeyValue">
            <summary>
            Returns the current value of the primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.SetColumnValue(System.String,System.Object)">
            <summary>
            Sets a value for a particular column in the record
            </summary>
            <param name="columnName">Name of the column, as defined in the database</param>
            <param name="oValue">The value to set the type to</param>
        </member>
        <member name="M:SubSonic.RecordBase`1.GetColumnValue``1(System.String)">
            <summary>
            Returns the current value of a column.
            </summary>
            <param name="columnName">Name of the column, as defined in the database</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.GetSchema">
            <summary>
            Returns the underly TableSchema.Table object for the given record
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.HasErrors">
            <summary>
            Determines whether this instance has errors.
            </summary>
            <returns>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.GetErrors">
            <summary>
            Returns the list of error messages for the record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.ValidateColumnSettings">
            <summary>
            Loops the underlying settings collection to validate type, nullability, and length
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.LoadFromPost">
            <summary>
            Loads your object from an ASP.NET form postback
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.LoadFromPost(System.Boolean)">
            <summary>
            Loads your object from an ASP.NET form postback
            </summary>
            <param name="validatePost">Set this to false to skip validation</param>
        </member>
        <member name="M:SubSonic.RecordBase`1.ToXML">
            <summary>
            Returns and XML representation of the given record
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.NewFromXML(System.String)">
            <summary>
            Returns an object based on the passed-in XML.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.GetColumnSettings">
            <summary>
            Returns the current collection of column settings for the given record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.Clone">
            <summary>
            Copies the current instance to a new instance
            </summary>
            <returns>New instance of current object</returns>
        </member>
        <member name="M:SubSonic.RecordBase`1.CopyTo(`0)">
            <summary>
            Copies current instance to the passed in instance
            </summary>
            <param name="copyInstance"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.CopyTo(System.Data.DataTable)">
            <summary>
            Adds a new row to a Datatable with this record.
            Column names must match for this to work properly.
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.CopyFrom(System.Data.DataRow)">
            <summary>
            Copies a record from a DataTable to this instance. Column names must match.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.CopyFrom(`0)">
            <summary>
            Copies the passed-in instance settings to this instance
            </summary>
            <param name="copyInstance"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.SetDefaults">
            <summary>
            Initializes the object using the default values for the underlying column data types.
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.ForceDefaults">
            <summary>
            Forces object properties to be initialized using the defaults specified in the database schema.
            This method is called only if the provider level setting "useDatabaseDefaults" is set to <c>true</c>
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.SetLoadState">
            <summary>
            Sets initial record states when a record is loaded.
            </summary>
        </member>
        <member name="M:SubSonic.RecordBase`1.Load(System.Data.IDataReader)">
            <summary>
            Loads the object with the current reader's values. Assumes the reader is already moved to
            first position in recordset (aka has been "Read()")
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.Load(System.Data.DataTable)">
            <summary>
            Loads the object with the current reader's values. Assumes the reader is already moved to 
            first position in recordset (aka has been "Read()")
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.Load(System.Data.DataRow)">
            <summary>
            Loads the object with the current DataRow's values. 
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:SubSonic.RecordBase`1.LoadAndCloseReader(System.Data.IDataReader)">
            <summary>
            Opens the IDataReader, loads the object and closes the IDataReader. Unlike AbstractList.LoadAndCloseReader,
            this method does not assume that reader is open and in the first position!
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="P:SubSonic.RecordBase`1.ValidateWhenSaving">
            <summary>
            Gets or sets a value indicating whether [validate when saving].
            </summary>
            <value><c>true</c> if [validate when saving]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.RecordBase`1.DirtyColumns">
            <summary>
            A collection of column's who's values have been changed during instance scope. Used
            for Update commands.
            </summary>
        </member>
        <member name="P:SubSonic.RecordBase`1.IsLoaded">
            <summary>
            Gets or sets a value indicating whether this instance is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.RecordBase`1.IsNew">
            <summary>
            Whether or not this is a new record. The value is <c>true</c> if this object
            has yet to be persisted to a database, otherwise it's <c>false</c>.
            </summary>
        </member>
        <member name="P:SubSonic.RecordBase`1.IsDirty">
            <summary>
            Whether or not the value of this object differs from that of the persisted
            database. This value is <c>true</c>if data has been changed and differs from DB,
            otherwise it is <c>false</c>.
            </summary>
        </member>
        <member name="P:SubSonic.RecordBase`1.TableName">
            <summary>
            Name of the table in the database that contains persisted data for this type
            </summary>
        </member>
        <member name="P:SubSonic.RecordBase`1.BaseSchema">
            <summary>
            The base static class that holds all schema info for the table.
            The class must be instanced at least once to populate this table.
            </summary>
        </member>
        <member name="P:SubSonic.RecordBase`1.IsSchemaInitialized">
            <summary>
            Gets a value indicating whether this instance is schema initialized.
            The schema is considered initialized if the underlying TableSchema.Table
            object is not null, and column collection has been loaded with one or more columns
            </summary>
            <value>
            	<c>true</c> if this instance is schema initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.RecordBase`1.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.RecordBase`1.NullExceptionMessage">
            <summary>
            Gets or sets the exception message thrown for non-null conversion errors performed during record validation.
            </summary>
            <value>The null exception message.</value>
        </member>
        <member name="P:SubSonic.RecordBase`1.InvalidTypeExceptionMessage">
            <summary>
            Gets or sets the exception message thrown for type conversion errors performed during record validation.
            </summary>
            <value>The invalid type exception message.</value>
        </member>
        <member name="P:SubSonic.RecordBase`1.LengthExceptionMessage">
            <summary>
            Gets or sets the exception message thrown for value length conversion errors performed during record validation.
            </summary>
            <value>The length exception message.</value>
        </member>
        <member name="P:SubSonic.RecordBase`1.Errors">
            <summary>
            Gets the collection of error messages for the record.
            </summary>
            <value></value>
        </member>
        <member name="T:SubSonic.HiddenForDataBindingAttribute">
            <summary>
            Attribute class used to suppress "internal" properties when databinding. YMMV.
            </summary>
        </member>
        <member name="T:SubSonic.WebUtility.RESTfullUrl">
            <summary>
            Summary for the RESTfullUrl class
            </summary>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.WebUtility.RESTfullUrl"/> class. Hide the private constructor
            </summary>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.WebUtility.RESTfullUrl"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.#ctor(System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.WebUtility.RESTfullUrl"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.IsNonKeyCommand(System.String)">
            <summary>
            Determines whether [is non key command] [the specified URL].
            </summary>
            <param name="url">The URL.</param>
            <returns>
            	<c>true</c> if [is non key command] [the specified URL]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.DecideCommand(System.String)">
            <summary>
            Decides the command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.DecideReturnType(System.String)">
            <summary>
            Decides the type of the return.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.ParseUrl">
            <summary>
            load, parse, and format
            the URL must be in the format
            http://domain/service_directory/table_or_view/[key].[format]
            or with a REST command
            http://domain/service_directory/table_or_view/[command].[format]?[params]
            for search, this is
            http://domain/service_directory/table_or_view/search.[format]?paramname=paramvalue
            SPs use
            http://domain/service_directory/spname/exec.[format]?[params]
            Parses the URL.
            </summary>
        </member>
        <member name="M:SubSonic.WebUtility.RESTfullUrl.ParseQueryString">
            <summary>
            Parses the query string.
            </summary>
        </member>
        <member name="P:SubSonic.WebUtility.RESTfullUrl.RestCommand">
            <summary>
            Gets or sets the rest command.
            </summary>
            <value>The rest command.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTfullUrl.ReturnType">
            <summary>
            Gets or sets the type of the return.
            </summary>
            <value>The type of the return.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTfullUrl.RawUrl">
            <summary>
            Gets or sets the raw URL.
            </summary>
            <value>The raw URL.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTfullUrl.PrimaryKey">
            <summary>
            Gets or sets the primary key.
            </summary>
            <value>The primary key.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTfullUrl.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTfullUrl.SpName">
            <summary>
            Gets or sets the name of the sp.
            </summary>
            <value>The name of the sp.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTfullUrl.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:SubSonic.SQLiteDataProvider">
            <summary>
            A Data Provider for SQLite. 
            
            Loosely based on the MySQL data provider (by Larry Beall) with
            lots of consultation of the SqlDataProvider (no name attributed).
            
            Started on 07/2007 - CodeForNothing
            
            Release of Version 0.1 - 18/07/2007 - CodeForNothing
            Code complete (v0.3) - 23/07/2007 - CodeForNothing
            </summary>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.CreateConnection(System.String)">
            <summary>
            Creates the connection.
            </summary>
            <param name="newConnectionString">The new connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.AddParams(SubSonic.QueryCommand,System.Data.SQLite.SQLiteCommand)">
            <summary>
            Add the Query parameters to a SQLiteCommand command
            </summary>
            <param name="qry">The qry.</param>
            <param name="cmd">The CMD.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.SetParameter(System.Data.IDataReader,SubSonic.StoredProcedure.Parameter)">
            <summary>
            SQLite does not support Stored Procedures.
            </summary>
            <param name="rdr">The RDR.</param>
            <param name="par">The par.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetParameterPrefix">
            <summary>
            This is a simple question mark for SQLite.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.DelimitDbName(System.String)">
            <summary>
            The delimiters are the single quote
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetCommand(SubSonic.QueryCommand)">
            <summary>
            Return a command from a Query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetReader(SubSonic.QueryCommand)">
            <summary>
            Return a IDataReader from a Query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetSingleRecordReader(SubSonic.QueryCommand)">
            <summary>
            Gets the single record reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetDataSet(SubSonic.QueryCommand)">
            <summary>
            Return a Dataset from a Query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Return a scalar from a Query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.ExecuteQuery(SubSonic.QueryCommand)">
            <summary>
            Runs a Query and returns the number of rows affected.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetTableSchema(System.String,SubSonic.TableType)">
            <summary>
            Returns the complete schemma of a table.
            In this version it assumes that a primary key of type integer is autoincrementable.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetDbType(System.String)">
            <summary>
            Simple type conversion.
            </summary>
            <param name="sqliteType">Type of the sqlite.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetType(System.String)">
            <summary>
            Type conversion to .NET types.
            </summary>
            <param name="sqliteType">Type of the sqlite.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetSPList">
            <summary>
            Returns an empty array as SQLite does not support stored procedures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetSPParams(System.String)">
            <summary>
            Returns null as SQLite does not support stored procedures.
            </summary>
            <param name="spName">Name of the sp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetTableNameList">
            <summary>
            Returns a sorted array with all the table names in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetPrimaryKeyTableNames(System.String)">
            <summary>
            Return a list with all the primary keys of the table and the tables that reference it.
            For example, and using the pubs database:
            GetPrimaryKeyTableNames("authors") returns:
            TableName   ColumnName
            -----------------------
            titleauthor	au_id
            GetPrimaryKeyTableNames("publishers") returns:
            TableName   ColumnName
            -----------------------
            pub_info	pub_id
            titles	    pub_id
            employee	pub_id
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetPrimaryKeyTables(System.String)">
            <summary>
            Return a list with all the primary keys of the table and the tables that reference it.
            See the other overload for a detailed explanation.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetForeignKeyTableName(System.String,System.String)">
            <summary>
            Return the name of the referenced table of fkColumnName in table tableName.
            Example using the pubs database:
            fkColumnName = au_id
            tableName = titleauthor
            returns: authors
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetForeignKeyTableName(System.String)">
            <summary>
            Returns the first table that contains a primary key called fkColumnName.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Execute all commands within a single transaction.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.ScriptData(System.String,System.String)">
            <summary>
            This is a copy and adaptation from the SQL Server provider and it
            needs more work as it does NOT support auto incrementing columns.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetDbCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the db command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetViewNameList">
            <summary>
            Returns the names of all the views in the database sorted by name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Return a dataset for a query
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.CreateParameterTable">
            <summary>
            Private helper to create a parameter table for returning
            from the GetSPParams method.
            There is no standard way to get parameters from MySQL
            stored procedures.  We have to do a string level parse to
            hack out the parameters.  Unfortunately this does not give
            us an IDataReader interface to return from teh GetSPParams
            method.  Inorder to provide this interface return we build
            a datatable with the SP Params and returna DataTableReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetForeignKeyTables(System.String)">
            <summary>
            Return the tables that have a key referencing this table.
            For example:
            tableName = employee
            returns: { "publishers", "jobs" }
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetTableNameByPrimaryKey(System.String,System.String)">
            <summary>
            Returns the first table with a primary key column named pkName
            </summary>
            <param name="pkName">Name of the pk.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetDatabaseVersion(System.String)">
            <summary>
            Gets the database version.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.AddColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.AlterColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.RemoveColumn(System.String,System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.CreateTable(System.String,SubSonic.TableSchema.TableColumnCollection)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetLimit(SubSonic.Query)">
            <summary>
            Helper method to build out the limit string of a given query.
            </summary>
            <param name="qry">Query to build the limit string from.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetSelectSql(SubSonic.Query)">
            <summary>
            Creates a SELECT statement based on the Query object settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.BuildWhereSQLite(SubSonic.Query)">
            <summary>
            This method is a copy of the static BuildWhere. I am not using BuildWhere because
            SQLite apparently does not support named parameters (as in ?AU_NAME), only positional
            parameters.
            </summary>
            <param name="qry"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetInsertSql(SubSonic.Query)">
            <summary>
            Loops the TableColums[] array for the object, creating a SQL string
            for use as an INSERT statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SQLiteDataProvider.GetDeleteSqlite(SubSonic.Query)">
            <summary>
            This method is a copy of the static GetDeleteSql that uses BuildWhereSQLite.
            </summary>
            <param name="qry"></param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.SQLiteDataProvider.Catalog">
            <summary>
            Catalog of the current database. main by default.
            </summary>
            <value>The catalog.</value>
        </member>
        <member name="P:SubSonic.SQLiteDataProvider.AllForeignKeys">
            <summary>
            Load and cache all foreign keys
            </summary>
            <value>All foreign keys.</value>
            <returns></returns>
        </member>
        <member name="P:SubSonic.SQLiteDataProvider.AllColumns">
            <summary>
            Gets all columns.
            </summary>
            <value>All columns.</value>
        </member>
        <member name="T:SubSonic.ActiveList`2">
            <summary>
            Summary for the ActiveList&lt;ItemType, ListType&gt; class
            </summary>
            <typeparam name="ItemType">The type of the tem type.</typeparam>
            <typeparam name="ListType">The type of the ist type.</typeparam>
        </member>
        <member name="T:SubSonic.AbstractList`2">
            <summary>
            Abstract class for handling collections of AbstractRecord objects
            </summary>
            <typeparam name="ItemType">The ActiveRecord or ReadOnlyRecord derived type</typeparam>
            <typeparam name="ListType">The ActiveList or ReadOnlyList derived type</typeparam>
        </member>
        <member name="T:SubSonic.IAbstractList">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.IAbstractList.Load(System.Data.IDataReader)">
            <summary>
            Loads the specified RDR.
            </summary>
            <param name="rdr">The RDR.</param>
        </member>
        <member name="M:SubSonic.IAbstractList.Load(System.Data.DataTable)">
            <summary>
            Loads the specified TBL.
            </summary>
            <param name="tbl">The TBL.</param>
        </member>
        <member name="M:SubSonic.IAbstractList.LoadAndCloseReader(System.Data.IDataReader)">
            <summary>
            Loads the and close reader.
            </summary>
            <param name="rdr">The RDR.</param>
        </member>
        <member name="M:SubSonic.IAbstractList.Sort(System.String,System.Boolean)">
            <summary>
            Sorts the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="ascending">if set to <c>true</c> [ascending].</param>
        </member>
        <member name="M:SubSonic.IAbstractList.ToDataTable">
            <summary>
            Convert the list to a data table.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SubSonic.IAbstractList.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="M:SubSonic.AbstractList`2.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, for which the list name is returned. This can be null.</param>
            <returns>The name of the list.</returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects to find in the collection as bindable. This can be null.</param>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties on each item used to bind data.
            </returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.Sort(System.String,System.Boolean)">
            <summary>
            Invokes the ListComparer class to sort the collection.
            </summary>
            <param name="columnName">Name of the column to sort by</param>
            <param name="ascending">If set to <c>true</c> and ascending sort is performed. If set to <c>false</c>, the sort is descending</param>
        </member>
        <member name="M:SubSonic.AbstractList`2.Load(System.Data.IDataReader)">
            <summary>
            Loads the collection and leaves the IDataReader open.
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="M:SubSonic.AbstractList`2.Load(System.Data.DataTable)">
            <summary>
            Loads the collection by iterating through the rows in the supplied DataTable.
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="M:SubSonic.AbstractList`2.LoadAndCloseReader(System.Data.IDataReader)">
            <summary>
            Loads the collection and closes the IDataReader.
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="M:SubSonic.AbstractList`2.GetPropertyDescriptors(System.Type)">
            <summary>
            Gets the property descriptors. Used to evaluate the suitability 
            of properties on the passed type for data binding
            </summary>
            <param name="typeOfObject">The type of object to return property descriptors for</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.CheckLogicalDelete(SubSonic.Query)">
            <summary>
            Checks the logical delete, suppressing results flagged as deleted as determined by
            the existence of columns named "deleted" or "isdeleted".
            </summary>
            <param name="q">The query to be to perform the logical delete on.</param>
        </member>
        <member name="M:SubSonic.AbstractList`2.ToDataTable">
            <summary>
            Returns the collection's items in a DataTable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.CopyFrom(SubSonic.AbstractList{`0,`1})">
            <summary>
            Populates the existing collection by cloning each item from the passed list.
            </summary>
            <param name="copyInstance"></param>
        </member>
        <member name="M:SubSonic.AbstractList`2.CopyTo(SubSonic.AbstractList{`0,`1})">
            <summary>
            Populates the passed collection by cloning each item from the existing list.
            </summary>
            <param name="copyInstance"></param>
        </member>
        <member name="M:SubSonic.AbstractList`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.OrderByAsc(System.String)">
            <summary>
            Marks the collection for an ascending sort by the passed column name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.OrderByDesc(System.String)">
            <summary>
            Marks the collection for an descending sort by the passed column name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.Where(SubSonic.Where)">
            <summary>
            Adds the passed Where clause as a collection load condition.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.Where(System.String,System.Object)">
            <summary>
            Adds the passed column and value as a Where clause for collection loading.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.Where(System.String,SubSonic.Comparison,System.Object)">
            <summary>
            Adds the passed column, comparision type, and value as a Where clause for collection loading.
            </summary>
            <param name="columnName"></param>
            <param name="comp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.BetweenAnd(System.String,System.DateTime,System.DateTime)">
            <summary>
            Adds a date specific Where condition, limiting results to date values between the passed dates
            on the specfied column
            </summary>
            <param name="columnName">Name of the date column to evaluate for date matches</param>
            <param name="dateStart">Lower date boundary for inclusion in the collection</param>
            <param name="dateEnd">Upper date boundary for inclusion in the collection</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.AbstractList`2.Load">
            <summary>
            Loads the collection using any specified conditional operators.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SubSonic.AbstractList`2.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="M:SubSonic.ActiveList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.ActiveList`2"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.ActiveList`2.#ctor(System.Data.IDataReader)">
            <summary>
            Creates and loads the collection, leaving the IDataReader open.
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="M:SubSonic.ActiveList`2.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Creates and loads the collection, with option to set IDataReader close behavior.
            </summary>
            <param name="rdr"></param>
            <param name="closeReader"></param>
        </member>
        <member name="M:SubSonic.ActiveList`2.Find(System.Object)">
            <summary>
            Finds the specified primary key value.
            </summary>
            <param name="primaryKeyValue">The primary key value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveList`2.SaveAll(System.String)">
            <summary>
            Saves all the records in a collection to the DB
            </summary>
        </member>
        <member name="M:SubSonic.ActiveList`2.SaveAll(System.Guid)">
            <summary>
            Saves all the records in a collection to the DB
            </summary>
        </member>
        <member name="M:SubSonic.ActiveList`2.SaveAll">
            <summary>
            Saves all the records in a collection to the DB
            </summary>
        </member>
        <member name="M:SubSonic.ActiveList`2.BatchSave(System.String)">
            <summary>
            Uses a transaction to quickly saves all the records in a collection to the DB
            The primary keys of any new records are not updated in the collection
            You must reload the collection to get the latest data
            </summary>
        </member>
        <member name="M:SubSonic.ActiveList`2.BatchSave">
            <summary>
            Batches the save.
            </summary>
        </member>
        <member name="M:SubSonic.ActiveList`2.BatchSave(System.Guid)">
            <summary>
            Batches the save.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:SubSonic.ActiveList`2.BatchSave(System.Int32)">
            <summary>
            Batches the save.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:SubSonic.ActiveList`2.SaveAll(System.Int32)">
            <summary>
            Saves all the records in a collection to the DB
            </summary>
        </member>
        <member name="T:SubSonic.IConstraint">
            <summary>
            Summary for the IConstraint interface
            </summary>
        </member>
        <member name="P:SubSonic.IConstraint.Comparison">
            <summary>
            The type of comparison represented by this
            constraint.
            </summary>
            <value>The comparison.</value>
        </member>
        <member name="P:SubSonic.IConstraint.Value">
            <summary>
            The value of the constraint. This is what
            is being compared.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:SubSonic.SqlQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.SqlQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.SqlQuery"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.SqlQuery.#ctor(SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.SqlQuery"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.SqlQuery.ValidateQuery">
            <summary>
            Validates the query.
            </summary>
        </member>
        <member name="M:SubSonic.SqlQuery.Where(System.String)">
            <summary>
            Wheres the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Where(SubSonic.TableSchema.TableColumn)">
            <summary>
            Wheres the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Where(SubSonic.Aggregate)">
            <summary>
            Wheres the specified agg.
            </summary>
            <param name="agg">The agg.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.WhereExpression(System.String)">
            <summary>
            Wheres the expression.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OrExpression(System.String)">
            <summary>
            Ors the expression.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Or(System.String)">
            <summary>
            Ors the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Or(SubSonic.TableSchema.TableColumn)">
            <summary>
            Ors the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Or(SubSonic.Aggregate)">
            <summary>
            Ors the specified agg.
            </summary>
            <param name="agg">The agg.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.AndExpression(System.String)">
            <summary>
            Ands the expression.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.And(System.String)">
            <summary>
            Ands the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.And(SubSonic.TableSchema.TableColumn)">
            <summary>
            Ands the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.And(SubSonic.Aggregate)">
            <summary>
            Ands the specified agg.
            </summary>
            <param name="agg">The agg.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.CloseExpression">
            <summary>
            Closes the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ToString">
            <summary>
            Returns the currently set SQL statement for this query object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.BuildSqlStatement">
            <summary>
            Builds the SQL statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.From(System.String)">
            <summary>
            Froms the specified TBL.
            </summary>
            <param name="tbl">The TBL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.From(SubSonic.TableSchema.Table)">
            <summary>
            Froms the specified TBL.
            </summary>
            <param name="tbl">The TBL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.From``1">
            <summary>
            Froms this instance.
            </summary>
            <typeparam name="TSchema">The type of the schema.</typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.InnerJoin``1">
            <summary>
            Inners the join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.InnerJoin(SubSonic.TableSchema.Table)">
            <summary>
            Inners the join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.InnerJoin(System.String)">
            <summary>
            Inners the join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.InnerJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Inners the join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.InnerJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Inners the join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OuterJoin``1">
            <summary>
            Outers the join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OuterJoin(SubSonic.TableSchema.Table)">
            <summary>
            Outers the join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OuterJoin(System.String)">
            <summary>
            Outers the join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OuterJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Outers the join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OuterJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Outers the join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.CrossJoin``1">
            <summary>
            Crosses the join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.CrossJoin(SubSonic.TableSchema.Table)">
            <summary>
            Crosses the join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.CrossJoin(System.String)">
            <summary>
            Crosses the join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.CrossJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Crosses the join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.CrossJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Crosses the join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftInnerJoin``1">
            <summary>
            Lefts the inner join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftInnerJoin(SubSonic.TableSchema.Table)">
            <summary>
            Lefts the inner join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftInnerJoin(System.String)">
            <summary>
            Lefts the inner join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftInnerJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Lefts the inner join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftInnerJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Lefts the inner join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightInnerJoin``1">
            <summary>
            Rights the inner join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightInnerJoin(SubSonic.TableSchema.Table)">
            <summary>
            Rights the inner join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightInnerJoin(System.String)">
            <summary>
            Rights the inner join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightInnerJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Rights the inner join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightInnerJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Rights the inner join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftOuterJoin``1">
            <summary>
            Lefts the outer join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftOuterJoin(SubSonic.TableSchema.Table)">
            <summary>
            Lefts the outer join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftOuterJoin(System.String)">
            <summary>
            Lefts the outer join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftOuterJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Lefts the outer join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.LeftOuterJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Lefts the outer join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightOuterJoin``1">
            <summary>
            Rights the outer join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightOuterJoin(SubSonic.TableSchema.Table)">
            <summary>
            Rights the outer join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightOuterJoin(System.String)">
            <summary>
            Rights the outer join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightOuterJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Rights the outer join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.RightOuterJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Rights the outer join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.NotEqualJoin``1">
            <summary>
            Nots the equal join.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.NotEqualJoin(SubSonic.TableSchema.Table)">
            <summary>
            Nots the equal join.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.NotEqualJoin(System.String)">
            <summary>
            Nots the equal join.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.NotEqualJoin(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn)">
            <summary>
            Nots the equal join.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.NotEqualJoin(System.String,System.String,System.String,System.String)">
            <summary>
            Nots the equal join.
            </summary>
            <param name="fromTable">From table.</param>
            <param name="fromColumn">From column.</param>
            <param name="toTable">To table.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OrderAsc(System.String[])">
            <summary>
            Orders the asc.
            </summary>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.OrderDesc(System.String[])">
            <summary>
            Orders the desc.
            </summary>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.DirectPaged(System.Int32,System.Int32)">
            <summary>
            Pageds with direct start and count.
            </summary>
            <param name="start">The current page.</param>
            <param name="count">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Paged(System.Int32,System.Int32)">
            <summary>
            Pageds the specified current page.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Paged(System.Int32,System.Int32,System.String)">
            <summary>
            Pageds the specified current page.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="idColumn">The id column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteScalar">
            <summary>
            Executes the scalar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteScalar``1">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.GetRecordCount">
            <summary>
            Gets the record count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteReader">
            <summary>
            Executes the reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteDataSet">
            <summary>
            Executes the data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTypedList``1">
            <summary>
            Executes the typed list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteAsCollection``1">
            <summary>
            Executes as collection.
            </summary>
            <typeparam name="ListType">The type of the ist type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTransaction(System.Collections.Generic.List{SubSonic.Insert})">
            <summary>
            Executes the transaction.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTransaction(System.Collections.Generic.List{SubSonic.Insert},SubSonic.DataProvider)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="queries">The queries.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTransaction(System.Collections.Generic.List{SubSonic.Insert},System.String)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="queries">The queries.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTransaction(System.Collections.Generic.List{SubSonic.SqlQuery})">
            <summary>
            Executes the transaction.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTransaction(System.Collections.Generic.List{SubSonic.SqlQuery},SubSonic.DataProvider)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="queries">The queries.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTransaction(System.Collections.Generic.List{SubSonic.SqlQuery},System.String)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="queries">The queries.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:SubSonic.SqlQuery.ExecuteTransaction(System.Collections.Generic.List{SubSonic.SqlQuery},SubSonic.DataProvider,System.String)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="queries">The queries.</param>
            <param name="provider">The provider.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="T:SubSonic.SqlQuery.QueryType">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.SqlQuery.QueryType.Select">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.SqlQuery.QueryType.Update">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.SqlQuery.QueryType.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.SqlQuery.QueryType.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.TableType">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.TableType.Table">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.TableType.View">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.CodeService">
            <summary>
            Summary for the CodeService class
            </summary>
        </member>
        <member name="M:SubSonic.CodeService.RunTemplate(System.String,System.Collections.Specialized.NameValueCollection,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Not currently used, but will be the basis for user defined templates. Please don't remove!
            </summary>
            <param name="templateFile"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.BuildTemplate(SubSonic.CodeService.TemplateType,System.Collections.Specialized.NameValueCollection,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Builds the template.
            </summary>
            <param name="templateType">Type of the template.</param>
            <param name="values">The values.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.RunTemplate(SubSonic.CodeService.TemplateType,System.Collections.Generic.IEnumerable{SubSonic.CodeService.Replacement},SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Runs the template.
            </summary>
            <param name="templateType">Type of the template.</param>
            <param name="settings">The settings.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.ShouldGenerate(System.String,System.String[],System.String[],SubSonic.DataProvider)">
            <summary>
            Evaluates the passed object name against current provider parameters to determine whether or not it should be generated.
            </summary>
            <param name="objectName">Name of the object.</param>
            <param name="includeList">The include list.</param>
            <param name="excludeList">The exclude list.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.ShouldGenerate(SubSonic.TableSchema.Table)">
            <summary>
            Evaluates the passed object name against current provider parameters to determine whether or not it should be generated.
            </summary>
            <param name="tbl">The TBL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.ShouldGenerate(System.String,System.String)">
            <summary>
            Evaluates the passed object name against current provider parameters to determine whether or not it should be generated.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.BuildODSTemplate(System.String,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Builds the ODS template.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.BuildClassTemplate(System.String,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Builds the class template.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.BuildViewTemplate(System.String,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Builds the view template.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.BuildSPTemplate(SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Builds the SP template.
            </summary>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.BuildStructsTemplate(SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Builds the structs template.
            </summary>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.PrepareTemplate(System.String,SubSonic.CodeService.TemplateType,System.Collections.Generic.IEnumerable{SubSonic.CodeService.Replacement},SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Prepares the template.
            </summary>
            <param name="templateName">Name of the template.</param>
            <param name="templateType">Type of the template.</param>
            <param name="settings">The settings.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.RunODS(System.String,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Runs the ODS.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.RunReadOnly(System.String,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Runs the read only.
            </summary>
            <param name="viewName">Name of the view.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.RunClass(System.String,SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Runs the class.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.RunSPs(SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Runs the S ps.
            </summary>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.RunStructs(SubSonic.ICodeLanguage,SubSonic.DataProvider)">
            <summary>
            Runs the structs.
            </summary>
            <param name="language">The language.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.BuildCompilUnit(System.String)">
            <summary>
            Builds the compil unit.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeService.GetTemplateText(SubSonic.CodeService.TemplateType,SubSonic.ICodeLanguage)">
            <summary>
            Gets the template text.
            </summary>
            <param name="t">The t.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.CodeService.TemplateDirectory">
            <summary>
            Gets or sets the template directory.
            </summary>
            <value>The template directory.</value>
        </member>
        <member name="T:SubSonic.CodeService.ReplacementVariable">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.ReplacementVariable.Table">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.ReplacementVariable.Provider">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.ReplacementVariable.View">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.ReplacementVariable.StoredProcedure">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.CodeService.TemplateSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateSet.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateSet.MVC">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.CodeService.TemplateType">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.Class">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.ODSController">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.ReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.SP">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.Structs">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.DynamicScaffold">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.GeneratedScaffoldCodeBehind">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.CodeService.TemplateType.GeneratedScaffoldMarkup">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.CodeService.Replacement">
            <summary>
            Summary for the Replacement class
            </summary>
        </member>
        <member name="M:SubSonic.CodeService.Replacement.#ctor(SubSonic.CodeService.ReplacementVariable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.CodeService.Replacement"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="replace">The replace.</param>
        </member>
        <member name="P:SubSonic.CodeService.Replacement.Variable">
            <summary>
            Gets or sets the variable.
            </summary>
            <value>The variable.</value>
        </member>
        <member name="P:SubSonic.CodeService.Replacement.ReplaceWith">
            <summary>
            Gets or sets the replace with.
            </summary>
            <value>The replace with.</value>
        </member>
        <member name="T:SubSonic.SharedDbConnectionScope">
            <summary>
            Indicates that a per-thread shared DbConnection object should be used the default DataProvider
            (or alternativley a specific DataProvider if one is given) when communicating with the database.
            This class is designed to be used within a using () {} block and in conjunction with a TransactionScope object.
            It's purpose is to force a common DbConnection object to be used which has the effect of avoiding promotion
            of a System.Transaction ambient Transaction to the DTC where possible.
            When this class is created, it indicates to the underlying DataProvider that is should use a shared DbConnection
            for subsequent operations. When the class is disposed (ie the using() {} block ends) it will indicate to the
            underlying provider that it should no longer it's current shared connection and should Dispose() it.
            </summary>
        </member>
        <member name="F:SubSonic.SharedDbConnectionScope.__instances">
            <summary>
            Used to support nesting. By keeping a stack of all instances of the class that are created on this thread
            thread we know when it is safe to Reset the underlying shared connection.
            </summary>
        </member>
        <member name="M:SubSonic.SharedDbConnectionScope.#ctor">
            <summary>
            Indicates to the default DataProvider that it should use a per-thread shared connection.
            </summary>
        </member>
        <member name="M:SubSonic.SharedDbConnectionScope.#ctor(System.String)">
            <summary>
            Indicates to the default DataProvider that it should use a per-thread shared connection using the given connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:SubSonic.SharedDbConnectionScope.#ctor(SubSonic.DataProvider)">
            <summary>
            Indicates to the specified DataProvider that it should use a per-thread shared connection.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="M:SubSonic.SharedDbConnectionScope.#ctor(SubSonic.DataProvider,System.String)">
            <summary>
            Indicates to the specified DataProvider that it should use a per-thread shared connection using the given connection string.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:SubSonic.SharedDbConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SubSonic.SharedDbConnectionScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SubSonic.SharedDbConnectionScope.CurrentConnection">
            <summary>
            Provides access to underlying connection that is shared per thread
            </summary>
            <value>The current connection.</value>
        </member>
        <member name="T:SubSonic.AutomaticConnectionScope">
            <summary>
            Used within SubSonic to automatically manage a SqlConnection. If a shared connection is available
            for the specified provider on the current thread, that shared connection will be used.
            Otherwise, a new connection will be created.
            Note that if a shared connection is used, it will NOT be automatically disposed - that is up to the caller.
            Lifetime management of the shared connection is taken care of by using a <see cref="T:SubSonic.SharedDbConnectionScope"/>
            If a new connection is created, it will be automatically dsiposed when this AutomaticConnectionScope object
            is disposed.
            </summary>
        </member>
        <member name="M:SubSonic.AutomaticConnectionScope.#ctor(SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.AutomaticConnectionScope"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.AutomaticConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SubSonic.AutomaticConnectionScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SubSonic.AutomaticConnectionScope.GetConnection``1">
            <summary>
            Gets the connection.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:SubSonic.AutomaticConnectionScope.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:SubSonic.AutomaticConnectionScope.IsUsingSharedConnection">
            <summary>
            Gets a value indicating whether this instance is using shared connection.
            </summary>
            <value>
            	<c>true</c> if this instance is using shared connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SubSonic.SqlQueryException">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.SqlQueryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.SqlQueryException"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.SqlQueryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.SqlQueryException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SubSonic.SqlQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.SqlQueryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:SubSonic.Join">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Join.GetJoinTypeValue(SubSonic.Join.JoinType)">
            <summary>
            Gets the join type value.
            </summary>
            <param name="j">The j.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Join.#ctor(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.TableColumn,SubSonic.Join.JoinType)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Join"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="joinType">Type of the join.</param>
        </member>
        <member name="M:SubSonic.Join.#ctor(SubSonic.TableSchema.Table,SubSonic.TableSchema.Table,SubSonic.Join.JoinType)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Join"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="joinType">Type of the join.</param>
        </member>
        <member name="P:SubSonic.Join.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:SubSonic.Join.FromColumn">
            <summary>
            Gets or sets from column.
            </summary>
            <value>From column.</value>
        </member>
        <member name="P:SubSonic.Join.ToColumn">
            <summary>
            Gets or sets to column.
            </summary>
            <value>To column.</value>
        </member>
        <member name="T:SubSonic.Join.JoinType">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.Inner">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.Outer">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.LeftInner">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.LeftOuter">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.RightInner">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.RightOuter">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.Cross">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Join.JoinType.NotEqual">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.MySqlInnoDBDataProvider">
            <summary>
            Summary for the MySqlInnoDBDataProvider class
            </summary>
        </member>
        <member name="T:SubSonic.MySqlDataProvider">
            <summary>
            A Data Provider for MySQL. You can thank Larry Beall for his work here.
            </summary>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.CreateConnection(System.String)">
            <summary>
            Creates the connection.
            </summary>
            <param name="newConnectionString">The new connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.AddParams(MySql.Data.MySqlClient.MySqlCommand,SubSonic.QueryCommand)">
            <summary>
            Adds the params.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.CheckoutOutputParams(MySql.Data.MySqlClient.MySqlCommand,SubSonic.QueryCommand)">
            <summary>
            Checkouts the output params.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.SetParameter(System.Data.IDataReader,SubSonic.StoredProcedure.Parameter)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="rdr">The RDR.</param>
            <param name="par">The par.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetParameterPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.DelimitDbName(System.String)">
            <summary>
            Delimits the name of the db.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetReader(SubSonic.QueryCommand)">
            <summary>
            Gets the reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetSingleRecordReader(SubSonic.QueryCommand)">
            <summary>
            Gets the single record reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetDataSet(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.ExecuteQuery(SubSonic.QueryCommand)">
            <summary>
            Executes the query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetTableSchema(System.String,SubSonic.TableType)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetDbType(System.String)">
            <summary>
            Gets the type of the db.
            </summary>
            <param name="mySqlType">Type of my SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetSPList">
            <summary>
            Gets the SP list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetSPParams(System.String)">
            <summary>
            Gets the SP params.
            </summary>
            <param name="spName">Name of the sp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetTableNameList">
            <summary>
            Gets the table name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetPrimaryKeyTableNames(System.String)">
            <summary>
            Gets the primary key table names.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetPrimaryKeyTables(System.String)">
            <summary>
            Gets the primary key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetForeignKeyTableName(System.String,System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetForeignKeyTableName(System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.ScriptData(System.String,System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetViewNameList">
            <summary>
            Gets the view name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.SupportsInformationSchema(System.String)">
            <summary>
            Private helper method to check the version of MySQL.
            
            This is important because MySQL versions prior to 5.x
            did not support the standard INFORMATION_SCHEMA views.
            </summary>
            <param name="VersionLine">Version line returned from the server.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.CreateParameterTable">
            <summary>
            Private helper to create a parameter table for returning
            from the GetSPParams method.
            
            There is no standard way to get parameters from MySQL 
            stored procedures.  We have to do a string level parse to
            hack out the parameters.  Unfortunately this does not give
            us an IDataReader interface to return from teh GetSPParams
            method.  Inorder to provide this interface return we build 
            a datatable with the SP Params and returna DataTableReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetForeignKeyTables(System.String)">
            <summary>
            Gets the foreign key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetTableNameByPrimaryKey(System.String,System.String)">
            <summary>
            Gets the table name by primary key.
            </summary>
            <param name="pkName">Name of the pk.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetDatabaseVersion(System.String)">
            <summary>
            Gets the database version.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.AddColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.AlterColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.RemoveColumn(System.String,System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.CreateTable(System.String,SubSonic.TableSchema.TableColumnCollection)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetLimit(SubSonic.Query)">
            <summary>
            Helper method to build out the limit string of a given query.
            </summary>
            <param name="qry">Query to build the limit string from.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetSelectSql(SubSonic.Query)">
            <summary>
            Gets the select SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlDataProvider.GetInsertSql(SubSonic.Query)">
            <summary>
            Gets the insert SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlInnoDBDataProvider.GetForeignKeyTableName(System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlInnoDBDataProvider.GetForeignKeyTableName(System.String,System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlInnoDBDataProvider.GetTableSchema(System.String,SubSonic.TableType)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlInnoDBDataProvider.CorrectTableCasing(System.String,System.String)">
            <summary>
            Hack for windows on mysql and the fact that it does
            not keep casing in some fields of the information_schema
            </summary>
            <param name="TableName">Name of the table.</param>
            <param name="DatabaseName">Name of the database.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.LavaBlastManyManyList">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.LavaBlastManyManyList.LoadColumnNames">
            <summary>
            If the user does not specify any column names, they are inferred from the schema. 
            
            </summary>
        </member>
        <member name="M:SubSonic.LavaBlastManyManyList.BuildMappedElementCommand(SubSonic.DataProvider,SubSonic.QueryCommand)">
            <summary>
            Selects the elements from the mapped table which are also in the filtered foreign query
            
            </summary>
            <param name="provider">the provider</param>
            <param name="cmd">The command to which the select from the mapped table will be appended</param>
        </member>
        <member name="M:SubSonic.LavaBlastManyManyList.BuildForeignQueryCommand">
            <summary>
            Builds a filtered and sorted list of elements to be put in the checkboxlist
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.LavaBlastManyManyList.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.MapTableName">
            <summary>
            Gets or sets the name of the map table.
            </summary>
            <value>The name of the map table.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.PrimaryTableName">
            <summary>
            Gets or sets the name of the primary table.
            </summary>
            <value>The name of the primary table.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.PrimaryKeyValue">
            <summary>
            Gets or sets the primary key value.
            </summary>
            <value>The primary key value.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.ForeignTableName">
            <summary>
            Gets or sets the name of the foreign table.
            </summary>
            <value>The name of the foreign table.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.PrimaryKeyName">
            <summary>
            Gets or sets the name of the primary key.
            </summary>
            <value>The name of the primary key.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.ForeignValueColumnName">
            <summary>
            Gets or sets the name of the foreign value column.
            </summary>
            <value>The name of the foreign value column.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.ForeignTextColumnName">
            <summary>
            Gets or sets the name of the foreign text column.
            </summary>
            <value>The name of the foreign text column.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.ForeignOrderBy">
            <summary>
            Gets or sets the foreign order by.
            </summary>
            <value>The foreign order by.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.ForeignWhere">
            <summary>
            Gets or sets the foreign where.
            </summary>
            <value>The foreign where.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.MapTableFkToPrimaryTable">
            <summary>
            Gets or sets the map table fk to primary table.
            </summary>
            <value>The map table fk to primary table.</value>
        </member>
        <member name="P:SubSonic.LavaBlastManyManyList.MapTableFkToForeignTable">
            <summary>
            Gets or sets the map table fk to foreign table.
            </summary>
            <value>The map table fk to foreign table.</value>
        </member>
        <member name="T:SubSonic.TableSchema">
            <summary>
            Summary for the TableSchema class
            </summary>
        </member>
        <member name="T:SubSonic.TableSchema.AbstractTableSchema">
            <summary>
            Summary for the AbstractTableSchema class
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.AbstractTableSchema.ToString">
            <summary>
            Override of ToString() returns the table name
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.AbstractTableSchema.TransformClassName(System.String,System.Boolean,SubSonic.TableType,SubSonic.DataProvider)">
            <summary>
            Transforms the name of the class.
            </summary>
            <param name="name">The name.</param>
            <param name="isPlural">if set to <c>true</c> [is plural].</param>
            <param name="tableType">Type of the table.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.AbstractTableSchema.ApplyExtendedProperties">
            <summary>
            Applies the extended properties.
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.QualifiedName">
            <summary>
            SQL-qualified name of this table - e.g. "[dbo].[Products]"
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.TableType">
            <summary>
            Gets or sets the type of the table.
            </summary>
            <value>The type of the table.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.ClassName">
            <summary>
            Gets or sets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.ClassNamePlural">
            <summary>
            Gets or sets the class name plural.
            </summary>
            <value>The class name plural.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
            <value>The name of the schema.</value>
        </member>
        <member name="P:SubSonic.TableSchema.AbstractTableSchema.ExtendedProperties">
            <summary>
            Gets or sets the extended properties.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="T:SubSonic.TableSchema.ExtendedProperty">
            <summary>
            Summary for the ExtendedProperty class
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.ExtendedProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.ExtendedProperty"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SubSonic.TableSchema.ExtendedProperty.GetExtendedProperty(SubSonic.TableSchema.ExtendedPropertyCollection,System.String)">
            <summary>
            Gets the extended property.
            </summary>
            <param name="exPropCol">The ex prop col.</param>
            <param name="extendedPropertyName">Name of the extended property.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.TableSchema.ExtendedProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:SubSonic.TableSchema.ExtendedProperty.PropertyValue">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="T:SubSonic.TableSchema.ExtendedPropertyCollection">
            <summary>
            Summary for the ExtendedPropertyCollection class
            </summary>
        </member>
        <member name="T:SubSonic.TableSchema.ForeignKeyTable">
            <summary>
            Summary for the ForeignKeyTable class
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.ForeignKeyTable.#ctor(SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.ForeignKeyTable"/> class.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="P:SubSonic.TableSchema.ForeignKeyTable.PrimaryColumnName">
            <summary>
            The PK on the Primary table - CategoryID in Categories.
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.ForeignKeyTable.ForeignColumnName">
            <summary>
            The foreign key column on the foreign table - CategoryID in Products for instance
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.ForeignKeyTable.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="T:SubSonic.TableSchema.ForeignKeyTableCollection">
            <summary>
            Summary for the ForeignKeyTableCollection class
            </summary>
        </member>
        <member name="T:SubSonic.TableSchema.ManyToManyDetails">
            <summary>
            Summary for the ManyToManyDetails class
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyDetails.LinksToTable">
            <summary>
            Gets or sets the links to table.
            </summary>
            <value>The links to table.</value>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyDetails.LinksToColumn">
            <summary>
            Gets or sets the links to column.
            </summary>
            <value>The links to column.</value>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyDetails.MapTableName">
            <summary>
            Gets or sets the name of the map table.
            </summary>
            <value>The name of the map table.</value>
        </member>
        <member name="T:SubSonic.TableSchema.ManyToManyDetailsCollection">
            <summary>
            Summary for the ManyToManyDetailsCollection class
            </summary>
        </member>
        <member name="T:SubSonic.TableSchema.ManyToManyRelationship">
            <summary>
            Summary for the ManyToManyRelationship class
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.ManyToManyRelationship.#ctor(System.String,SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.ManyToManyRelationship"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyRelationship.MapTableName">
            <summary>
            Gets the name of the map table.
            </summary>
            <value>The name of the map table.</value>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyRelationship.MapTableLocalTableKeyColumn">
            <summary>
            Gets or sets the map table local table key column.
            </summary>
            <value>The map table local table key column.</value>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyRelationship.MapTableForeignTableKeyColumn">
            <summary>
            Gets or sets the map table foreign table key column.
            </summary>
            <value>The map table foreign table key column.</value>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyRelationship.ForeignPrimaryKey">
            <summary>
            Gets or sets the foreign primary key.
            </summary>
            <value>The foreign primary key.</value>
        </member>
        <member name="P:SubSonic.TableSchema.ManyToManyRelationship.ForeignTableName">
            <summary>
            Gets or sets the name of the foreign table.
            </summary>
            <value>The name of the foreign table.</value>
        </member>
        <member name="T:SubSonic.TableSchema.ManyToManyRelationshipCollection">
            <summary>
            Summary for the ManyToManyRelationshipCollection class
            </summary>
        </member>
        <member name="T:SubSonic.TableSchema.PrimaryKeyTable">
            <summary>
            Summary for the PrimaryKeyTable class
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.PrimaryKeyTable.#ctor(SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.PrimaryKeyTable"/> class.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="P:SubSonic.TableSchema.PrimaryKeyTable.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="T:SubSonic.TableSchema.PrimaryKeyTableCollection">
            <summary>
            Summary for the PrimaryKeyTableCollection class
            </summary>
        </member>
        <member name="T:SubSonic.TableSchema.Table">
            <summary>
            Holds information about the base table - this class should be
            static for each object
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.Table.GetDelimitedColumnList(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a delimited string list of each column
            </summary>
            <param name="delim">The delim.</param>
            <param name="useQualified">if set to <c>true</c> [use qualified].</param>
            <param name="omitPrimaryKey">if set to <c>true</c> [omit primary key].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.Table.Equals(System.Object)">
            <summary>
            Override Equals() to test and see if the table name is the same, and the column
            names are the same
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.Table.#ctor(SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.Table"/> class.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.Table"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.Table"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.#ctor(System.String,SubSonic.TableType,SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.Table"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tblType">Type of the TBL.</param>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddLongText(System.String,System.Boolean,System.String)">
            <summary>
            Adds the long text.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddColumn(System.String,System.Data.DbType)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dbType">Type of the db.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddColumn(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dbType">Type of the db.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddColumn(System.String,System.Data.DbType,System.Int32,System.Boolean)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dbType">Type of the db.</param>
            <param name="length">The length.</param>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddColumn(System.String,System.Data.DbType,System.Int32,System.Boolean,System.String)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="dbType">Type of the db.</param>
            <param name="length">The length.</param>
            <param name="nullable">if set to <c>true</c> [nullable].</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.RemoveColumn(System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddPrimaryKeyColumn">
            <summary>
            Adds the primary key column.
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.Table.AddPrimaryKeyColumn(System.String)">
            <summary>
            Adds the primary key column.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.TableSchema.Table.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.TableSchema.Table.ManyToManys">
            <summary>
            Gets or sets the many to manys.
            </summary>
            <value>The many to manys.</value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.PrimaryKeyTables">
            <summary>
            Gets or sets the primary key tables.
            </summary>
            <value>The primary key tables.</value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.ForeignKeys">
            <summary>
            Gets or sets the foreign keys.
            </summary>
            <value>The foreign keys.</value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.HasManyToMany">
            <summary>
            Gets or sets a value indicating whether this instance has many to many.
            </summary>
            <value>
            	<c>true</c> if this instance has many to many; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.Columns">
            <summary>
            Gets or sets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.PrimaryKey">
            <summary>
            Gets the primary key.
            </summary>
            <value>The primary key.</value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.Descriptor">
            <summary>
            A descriptive column for this schema. An example would be "ProductName" for Northwind products
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.Table.PrimaryKeys">
            <summary>
            Gets the primary keys.
            </summary>
            <value>The primary keys.</value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.HasPrimaryKey">
            <summary>
            Gets a value indicating whether this instance has a primary key.
            </summary>
            <value>
            	<c>true</c> if this instance has primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.Table.HasForeignKeys">
            <summary>
            Determines whether [has foreign keys].
            </summary>
            <returns>
            	<c>true</c> if [has foreign keys]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SubSonic.TableSchema.TableCollection">
            <summary>
            Summary for the TableCollection class
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.TableCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:SubSonic.TableSchema.Table"/> with the specified table name.
            </summary>
            <value></value>
        </member>
        <member name="T:SubSonic.TableSchema.TableColumn">
            <summary>
            A helper class to help define the columns in an underlying table
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumn.#ctor(SubSonic.TableSchema.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.TableColumn"/> class.
            </summary>
            <param name="tableSchema">The table schema.</param>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumn.GetPropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumn.TransformPropertyName(System.String,System.String,SubSonic.DataProvider)">
            <summary>
            Transforms the name of the property.
            </summary>
            <param name="name">The name.</param>
            <param name="table">The table.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumn.ApplyExtendedProperties">
            <summary>
            Applies the extended properties.
            </summary>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.AuditMessage">
            <summary>
            Gets or sets the audit message.
            </summary>
            <value>The audit message.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.QualifiedName">
            <summary>
            Gets the name of the qualified.
            </summary>
            <value>The name of the qualified.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.Deleted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SubSonic.TableSchema.TableColumn"/> is deleted.
            </summary>
            <value><c>true</c> if deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.Altered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SubSonic.TableSchema.TableColumn"/> is altered.
            </summary>
            <value><c>true</c> if altered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.DefaultSetting">
            <summary>
            Gets or sets the default setting.
            </summary>
            <value>The default setting.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.Table">
            <summary>
            Gets or sets the table.
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsForeignKey">
            <summary>
            Gets or sets a value indicating whether this instance is foreign key.
            </summary>
            <value>
            	<c>true</c> if this instance is foreign key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.ForeignKeyTableName">
            <summary>
            Gets or sets the name of the foreign key table.
            </summary>
            <value>The name of the foreign key table.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
            <value>The name of the schema.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary key.
            </summary>
            <value>
            	<c>true</c> if this instance is primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsNullable">
            <summary>
            Gets or sets a value indicating whether this instance is nullable.
            </summary>
            <value>
            	<c>true</c> if this instance is nullable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.MaxLength">
            <summary>
            Gets or sets the length of the max.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.ArgumentName">
            <summary>
            Gets the name of the argument.
            </summary>
            <value>The name of the argument.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.AutoIncrement">
            <summary>
            Gets or sets a value indicating whether [auto increment].
            </summary>
            <value><c>true</c> if [auto increment]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.NumberScale">
            <summary>
            Gets or sets the number scale.
            </summary>
            <value>The number scale.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.NumberPrecision">
            <summary>
            Gets or sets the number precision.
            </summary>
            <value>The number precision.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsReservedColumn">
            <summary>
            Gets a value indicating whether this instance is a reserved column (CreatedOn, ModifiedOn, etc).
            </summary>
            <value>
            	<c>true</c> if this instance is reserved; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsNumeric">
            <summary>
            Gets a value indicating whether this instance is numeric.
            </summary>
            <value>
            	<c>true</c> if this instance is numeric; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsDateTime">
            <summary>
            Gets a value indicating whether this instance is date time.
            </summary>
            <value>
            	<c>true</c> if this instance is date time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.IsString">
            <summary>
            Gets a value indicating whether this instance is string.
            </summary>
            <value><c>true</c> if this instance is string; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumn.ExtendedProperties">
            <summary>
            Gets or sets the extended properties.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="T:SubSonic.TableSchema.TableColumnCollection">
            <summary>
            Summary for the TableColumnCollection class
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnCollection.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified column name].
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>
            	<c>true</c> if [contains] [the specified column name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnCollection.Add(SubSonic.TableSchema.Table,System.String,System.Data.DbType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds the specified TBL.
            </summary>
            <param name="tbl">The TBL.</param>
            <param name="name">The name.</param>
            <param name="dbType">Type of the db.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="isPrimaryKey">if set to <c>true</c> [is primary key].</param>
            <param name="isForeignKey">if set to <c>true</c> [is foreign key].</param>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnCollection.Add(SubSonic.TableSchema.Table,System.String,System.Data.DbType,System.Boolean)">
            <summary>
            Adds the specified TBL.
            </summary>
            <param name="tbl">The TBL.</param>
            <param name="name">The name.</param>
            <param name="dbType">Type of the db.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnCollection.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnCollection.GetPrimaryKey">
            <summary>
            Gets the primary key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnCollection.GetPrimaryKeys">
            <summary>
            Gets the primary keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SubSonic.TableSchema.TableColumnSetting">
            <summary>
            This is an intermediary class that holds the current value of a table column
            for each object instance.
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnSetting.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.TableSchema.TableColumnSetting"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="currentValue">The current value.</param>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumnSetting.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumnSetting.CurrentValue">
            <summary>
            Gets or sets the current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumnSetting.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SubSonic.TableSchema.TableColumnSettingCollection">
            <summary>
            Summary for the TableColumnSettingCollection class
            </summary>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnSettingCollection.GetKeyForItem(SubSonic.TableSchema.TableColumnSetting)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnSettingCollection.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnSettingCollection.GetValue``1(System.String)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnSettingCollection.IsNullable(System.Type)">
            <summary>
            Determines whether the specified obj type is nullable.
            </summary>
            <param name="objType">Type of the obj.</param>
            <returns>
            	<c>true</c> if the specified obj type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.TableSchema.TableColumnSettingCollection.SetValue(System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="oVal">The o val.</param>
        </member>
        <member name="P:SubSonic.TableSchema.TableColumnSettingCollection.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SubSonic.GenericConstraint">
            <summary>
            Summary for the GenericConstraint class
            </summary>
        </member>
        <member name="M:SubSonic.GenericConstraint.#ctor(SubSonic.Comparison,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.GenericConstraint"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:SubSonic.GenericConstraint.Comparison">
            <summary>
            The type of comparison represented by this
            constraint.
            </summary>
            <value></value>
        </member>
        <member name="P:SubSonic.GenericConstraint.Value">
            <summary>
            The value of the constraint. This is what
            is being compared.
            </summary>
            <value></value>
        </member>
        <member name="T:SubSonic.Parser.XmlToJSONParser">
            <summary>
            Some of this code was initially published on http://www.phdcc.com/xml2json.htm - thanks for your hard work!
            </summary>
        </member>
        <member name="M:SubSonic.Parser.XmlToJSONParser.XmlToJSONnode(System.Text.StringBuilder,System.Xml.XmlNode,System.Boolean)">
            <summary>
            XmlToJSONnode:  Output an XmlElement, possibly as part of a higher array
            </summary>
            <param name="sbJSON">The sb JSON.</param>
            <param name="node">The node.</param>
            <param name="showNodeName">if set to <c>true</c> [show node name].</param>
        </member>
        <member name="M:SubSonic.Parser.XmlToJSONParser.StoreChildNode(System.Collections.IDictionary,System.String,System.Object)">
            <summary>
            StoreChildNode: Store data associated with each nodeName
            so that we know whether the nodeName is an array or not.
            </summary>
            <param name="childNodeNames">The child node names.</param>
            <param name="nodeName">Name of the node.</param>
            <param name="nodeValue">The node value.</param>
        </member>
        <member name="M:SubSonic.Parser.XmlToJSONParser.OutputNode(System.String,System.Object,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Outputs the node.
            </summary>
            <param name="childname">The childname.</param>
            <param name="alChild">The al child.</param>
            <param name="sbJSON">The sb JSON.</param>
            <param name="showNodeName">if set to <c>true</c> [show node name].</param>
        </member>
        <member name="M:SubSonic.Parser.XmlToJSONParser.SafeJSON(System.String)">
            <summary>
            make the json string safe for delivery across the wire
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.SqlCEProvider">
            <summary>
            Summary for the SqlCEProvider class
            </summary>
        </member>
        <member name="M:SubSonic.SqlCEProvider.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.CreateConnection(System.String)">
            <summary>
            Creates the connection.
            </summary>
            <param name="newConnectionString">The new connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.AddParams(System.Data.SqlServerCe.SqlCeCommand,SubSonic.QueryCommand)">
            <summary>
            Adds the params.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.CheckoutOutputParams(System.Data.SqlServerCe.SqlCeCommand,SubSonic.QueryCommand)">
            <summary>
            Checkouts the output params.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetReader(SubSonic.QueryCommand)">
            <summary>
            Gets the reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.ExecuteQuery(SubSonic.QueryCommand)">
            <summary>
            Executes the query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.LoadExtendedPropertyDataSet">
            <summary>
            Loads the extended property data set.
            </summary>
        </member>
        <member name="M:SubSonic.SqlCEProvider.SetExtendedTableProperties(SubSonic.TableSchema.AbstractTableSchema)">
            <summary>
            Sets the extended table properties.
            </summary>
            <param name="tblSchema">The TBL schema.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.SetExtendedColumnProperties(SubSonic.TableSchema.AbstractTableSchema,SubSonic.TableSchema.TableColumn)">
            <summary>
            Sets the extended column properties.
            </summary>
            <param name="tblSchema">The TBL schema.</param>
            <param name="col">The col.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetTableSchema(System.String,SubSonic.TableType)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetSPParams(System.String)">
            <summary>
            Gets the SP params.
            </summary>
            <param name="spName">Name of the sp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetSPList">
            <summary>
            Gets the SP list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetViewNameList">
            <summary>
            Gets the view name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetTableNameList">
            <summary>
            Gets the table name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetPrimaryKeyTableNames(System.String)">
            <summary>
            Gets the primary key table names.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetPrimaryKeyTables(System.String)">
            <summary>
            Gets the primary key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetForeignKeyTableName(System.String,System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetForeignKeyTableName(System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetForeignKeyTables(System.String)">
            <summary>
            Gets the foreign key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetDbType(System.String)">
            <summary>
            Gets the type of the db.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Executes a transaction using the passed-commands
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetTableNameByPrimaryKey(System.String,System.String)">
            <summary>
            Gets the table name by primary key.
            </summary>
            <param name="pkName">Name of the pk.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetDatabaseVersion(System.String)">
            <summary>
            Gets the database version.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.SetParameter(System.Data.IDataReader,SubSonic.StoredProcedure.Parameter)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="rdr">The RDR.</param>
            <param name="par">The par.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetParameterPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.SetColumnAttributes(SubSonic.TableSchema.TableColumn)">
            <summary>
            Sets the column attributes.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetNativeType(System.Data.DbType)">
            <summary>
            Gets the type of the native.
            </summary>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.AddColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.AlterColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.RemoveColumn(System.String,System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.DelimitDbName(System.String)">
            <summary>
            Delimits the name of the db.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.CreateTable(System.String,SubSonic.TableSchema.TableColumnCollection)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetSingleRecordReader(SubSonic.QueryCommand)">
            <summary>
            Gets the single record reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetSelectSql(SubSonic.Query)">
            <summary>
            Creates a SELECT statement based on the Query object settings
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetQualifiedSelect(SubSonic.TableSchema.Table)">
            <summary>
            Gets the qualified select.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.GetInsertSql(SubSonic.Query)">
            <summary>
            Loops the TableColums[] array for the object, creating a SQL string
            for use as an INSERT statement
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SqlCEProvider.ScriptData(System.String,System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.ActiveController`2">
            <summary>
            Summary for the ActiveController&lt;ItemType, ListType&gt; class
            </summary>
            <typeparam name="ItemType">The type of the tem type.</typeparam>
            <typeparam name="ListType">The type of the ist type.</typeparam>
        </member>
        <member name="M:SubSonic.ActiveController`2.List">
            <summary>
            Lists this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.List(SubSonic.Query)">
            <summary>
            Lists the specified q.
            </summary>
            <param name="q">The q.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.List(System.Data.IDataReader)">
            <summary>
            Lists the specified RDR.
            </summary>
            <param name="rdr">The RDR.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.Query">
            <summary>
            Queries this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.Get(System.Object)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.Get(System.String,System.Object)">
            <summary>
            Gets the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.Save(`0,System.String)">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
            <param name="item">The item.</param>
            <param name="userName">Name of the user.</param>
        </member>
        <member name="M:SubSonic.ActiveController`2.GetInsertCommand(`0,System.String)">
            <summary>
            Made Public for use with transactions
            </summary>
            <param name="item">The item.</param>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.GetUpdateCommand(`0,System.String)">
            <summary>
            Gets the update command.
            </summary>
            <param name="item">The item.</param>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.Delete(System.Object)">
            <summary>
            Deletes the specified key ID.
            </summary>
            <param name="keyID">The key ID.</param>
        </member>
        <member name="M:SubSonic.ActiveController`2.Delete(System.String,System.Object)">
            <summary>
            Deletes the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:SubSonic.ActiveController`2.Destroy(System.Object)">
            <summary>
            Destroys the specified key ID.
            </summary>
            <param name="keyID">The key ID.</param>
        </member>
        <member name="M:SubSonic.ActiveController`2.Destroy(System.String,System.Object)">
            <summary>
            Destroys the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:SubSonic.ActiveController`2.Delete(System.String,System.Object,System.String)">
            <summary>
            Deletes the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="oValue">The o value.</param>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.GetDeleteCommand(System.Object)">
            <summary>
            Gets the delete command.
            </summary>
            <param name="keyID">The key ID.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveController`2.GetDeleteCommand(System.String,System.Object)">
            <summary>
            Gets the delete command.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="oValue">The o value.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.ReadOnlyRecord`1">
            <summary>
            Base class for read-only, data-aware objects (Views). 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SubSonic.IReadOnlyRecord">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.IReadOnlyRecord.LoadByKey(System.Object)">
            <summary>
            Loads the by key.
            </summary>
            <param name="keyID">The key ID.</param>
        </member>
        <member name="M:SubSonic.IReadOnlyRecord.LoadByParam(System.String,System.Object)">
            <summary>
            Loads the by param.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Int32)">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Nullable{System.Int32})">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Int64)">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Nullable{System.Int64})">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Decimal)">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Nullable{System.Decimal})">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Guid)">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.Nullable{System.Guid})">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByID(System.String)">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.fetchByID(System.Object)">
            <summary>
            Returns a record for this keyValue
            </summary>
            <param name="keyValue">Key Value</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchAll">
            <summary>
            Returns all records for this table
            </summary>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchAll(SubSonic.OrderBy)">
            <summary>
            Returns all records for this table, ordered
            </summary>
            <returns>Generic Typed List</returns>
            <param name="orderBy">OrderBy object used to specify sort behavior</param>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByParameter(System.String,System.Object,SubSonic.OrderBy)">
            <summary>
            Returns all records for the given column/parameter, ordered by the passed in orderBy
            The expression for this is always "column=parameter"
            </summary>
            <param name="columnName">Name of the column to use in parmeter statement</param>
            <param name="oValue">Value of the column</param>
            <param name="oValue">Column to order by</param>
            <param name="orderBy">Ordering of results</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByParameter(System.String,System.Object)">
            <summary>
            Returns all records for the given column/parameter
            The expression for this is always "column=parameter"
            </summary>
            <param name="columnName">The name of the column, as defined in the database</param>
            <param name="oValue">The value to match when fetching</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByParameter(System.String,SubSonic.Comparison,System.Object)">
            <summary>
            Returns all records for the given column, comparison operator, and parameter
            This overload is used for queries that don't use and '=' operator, i.e. IS, IS NOT, etc.
            </summary>
            <param name="columnName">The name of the column, as defined in the database</param>
            <param name="comparison">The comparison operator used for the query</param>
            <param name="oValue">The value to match when fetching</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByParameter(System.String,SubSonic.Comparison,System.Object,SubSonic.OrderBy)">
            <summary>
            Returns all records for the given column, comparison operator, and parameter
            in the order specified with the OrderBy parameter.
            This overload is used for queries that don't use and '=' operator, i.e. IS, IS NOT, etc,
            </summary>
            <param name="columnName">The name of the column, as defined in the database</param>
            <param name="comparison">The comparison operator used for the query</param>
            <param name="oValue">The value to match when fetching</param>
            <param name="orderBy">An OrderBy object used determine the order of results</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.FetchByQuery(SubSonic.Query)">
            <summary>
            Returns all records for the given Query object
            </summary>
            <param name="query">Query for complex records</param>
            <returns>Generic Typed List</returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.Find(`0)">
            <summary>
            Uses the passed-in object as a parameter set. Does not use the created/modified fields
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.Find(`0,SubSonic.OrderBy)">
            <summary>
            Finds the specified item by building a SELECT query with conditions matching
            the values of the properties on the AbstractRecord object to the columns
            on the corresponding database table 
            </summary>
            <param name="item">The AbstractRecord derived type</param>
            <param name="orderBy">The OrberBy object used to return results</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.LoadByParam(System.String,System.Object)">
            <summary>
            Loads a the AbstractRecord by specifying an arbitrary column name and value
            as the retrieval criteria
            </summary>
            <param name="columnName">Name of the column to use as the retrieval key</param>
            <param name="paramValue">Value of the column to use as the retrieval criteria</param>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.LoadByKey(System.Object)">
            <summary>
            Loads the record by fetching the underlying record with the passed value as the primary key
            </summary>
            <param name="keyID">The primary key value to retrieve the record for</param>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.Query">
            <summary>
            Return a new Query object based on the underlying TableSchema.Table type of the record
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.GetSelectCommand">
            <summary>
            Gets the select command used to retrieve the AbstractRecord object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.CheckLogicalDelete(SubSonic.Query)">
            <summary>
            If this object has a logical delete column, this method will append in the required parameter to avoid returning 
            deleted records
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.GetListItems">
            <summary>
            Returns an ordered ListItemCollection for use with DropDowns, RadioButtonLists, and CheckBoxLists
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ReadOnlyRecord`1.GetListItems(System.String)">
            <summary>
            Returns an ordered ListItemCollection for use with DropDowns, RadioButtonLists, and CheckBoxLists
            </summary>
            <param name="textColumn">The name of the column which should be used as the text value column</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.IActiveRecord">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetInsertCommand(System.String)">
            <summary>
            Made Public for use with transactions
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetUpdateCommand(System.String)">
            <summary>
            Gets the update command.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.Save">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.Save(System.Int32)">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.Save(System.Guid)">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.Save(System.String)">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetSaveCommand">
            <summary>
            Gets the save command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetSaveCommand(System.String)">
            <summary>
            Gets the save command.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.MarkNew">
            <summary>
            Automatically called upon object creation. Sets IsNew to true;
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.MarkClean">
            <summary>
            Called after any property is set. Sets IsDirty to True.
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.MarkOld">
            <summary>
            Marks the old.
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.Inspect">
            <summary>
            Inspects this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.Inspect(System.Boolean)">
            <summary>
            Inspects the specified use HTML.
            </summary>
            <param name="useHtml">if set to <c>true</c> [use HTML].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.ToString">
            <summary>
            Converts the record to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetDBType(System.String)">
            <summary>
            Gets the type of the DB.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetPrimaryKeyValue">
            <summary>
            Returns the current value of the primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.SetColumnValue(System.String,System.Object)">
            <summary>
            Sets the column value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetColumnValue``1(System.String)">
            <summary>
            Returns the current value of a column.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetColumnValue(System.String)">
            <summary>
            Gets the column value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetSchema">
            <summary>
            Gets the schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.LoadByParam(System.String,System.Object)">
            <summary>
            Loads the by param.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
        </member>
        <member name="M:SubSonic.IActiveRecord.LoadByKey(System.Object)">
            <summary>
            Loads the by key.
            </summary>
            <param name="keyID">The key ID.</param>
        </member>
        <member name="M:SubSonic.IActiveRecord.ToXML">
            <summary>
            Converts the record to XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.NewFromXML(System.String)">
            <summary>
            Returns an object based on the passed-in XML.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetSelectCommand">
            <summary>
            Gets the select command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.Load(System.Data.IDataReader)">
            <summary>
            Loads the object with the current reader's values. Assumes the reader is already moved to
            first position in recordset (aka has been "Read()")
            </summary>
            <param name="rdr">The RDR.</param>
        </member>
        <member name="M:SubSonic.IActiveRecord.Load(System.Data.DataTable)">
            <summary>
            Loads the object with the current reader's values. Assumes the reader is already moved to 
            first position in recordset (aka has been "Read()")
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.Load(System.Data.DataRow)">
            <summary>
            Loads the object with the current DataRow's values. 
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.LoadAndCloseReader(System.Data.IDataReader)">
            <summary>
            Opens the IDataReader, loads the object and closes the IDataReader. Unlike AbstractList.LoadAndCloseReader,
            this method does not assume that reader is open and in the first position!
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.GetColumnSettings">
            <summary>
            Gets the column settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.CopyTo(System.Data.DataTable)">
            <summary>
            Adds a new row to a Datatable with this record
            You must be sure the column names are the same
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.CopyFrom(System.Data.DataRow)">
            <summary>
            Copies a record from a DataTable to this instance. Column names must match.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SubSonic.IActiveRecord.HasErrors">
            <summary>
            Determines whether this instance has errors.
            </summary>
            <returns>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.IActiveRecord.ValidateColumnSettings">
            <summary>
            Loops the underlying settings collection to validate type, nullability, and length
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.LoadFromPost">
            <summary>
            Loads your object from a form postback
            </summary>
        </member>
        <member name="M:SubSonic.IActiveRecord.LoadFromPost(System.Boolean)">
            <summary>
            Loads your object from a form postback
            </summary>
            <param name="validatePost">Set this to false to skip validation</param>
        </member>
        <member name="P:SubSonic.IActiveRecord.IsLoaded">
            <summary>
            Gets or sets a value indicating whether this instance is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.IActiveRecord.IsNew">
            <summary>
            True if data in the object needs to be saved
            </summary>
        </member>
        <member name="P:SubSonic.IActiveRecord.IsDirty">
            <summary>
            True if data in the object has been changed and differs from DB.
            </summary>
        </member>
        <member name="P:SubSonic.IActiveRecord.TableName">
            <summary>
            Name of the table
            </summary>
        </member>
        <member name="P:SubSonic.IActiveRecord.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.IActiveRecord.NullExceptionMessage">
            <summary>
            Gets the null exception message.
            </summary>
            <value>The null exception message.</value>
        </member>
        <member name="P:SubSonic.IActiveRecord.InvalidTypeExceptionMessage">
            <summary>
            Gets the invalid type exception message.
            </summary>
            <value>The invalid type exception message.</value>
        </member>
        <member name="P:SubSonic.IActiveRecord.LengthExceptionMessage">
            <summary>
            Gets the length exception message.
            </summary>
            <value>The length exception message.</value>
        </member>
        <member name="T:SubSonic.ActiveHelper`1">
            <summary>
            Summary for the ActiveHelper&lt;T&gt; class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SubSonic.ActiveHelper`1.GetInsertCommand(SubSonic.RecordBase{`0},System.String)">
            <summary>
            Given an AbstractRecord object, returns a INSERT QueryCommand object used to generate SQL.
            </summary>
            <param name="item">The AbstractRecord object</param>
            <param name="userName">An optional username to be used if audit fields are present</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveHelper`1.GetUpdateCommand(SubSonic.RecordBase{`0},System.String)">
            <summary>
            Given an AbstractRecord object, returns a UPDATE QueryCommand object used to generate SQL.
            </summary>
            <param name="item">The AbstractRecord object</param>
            <param name="userName">An optional username to be used if audit fields are present</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveHelper`1.GetSelectCommand(SubSonic.RecordBase{`0})">
            <summary>
            Given an AbstractRecord object, returns a SELECT QueryCommand object used to generate SQL.
            </summary>
            <param name="item">The AbstractRecord object</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveHelper`1.Delete(System.String,System.Object,System.String)">
            <summary>
            Deletes underlying persisted records with the specified column name/value combination.
            </summary>
            <param name="columnName">Name of the database column</param>
            <param name="oValue">The value to match for record deletes</param>
            <param name="userName">An optional username to be used if audit fields are present</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveHelper`1.DestroyByParameter(System.String,System.Object)">
            <summary>
            Deletes the record in the table, even if it contains Deleted or IsDeleted flag columns
            </summary>
            <param name="columnName">The name of the column that whose value will be evaluated for deletion</param>
            <param name="oValue">The value that will be compared against columnName to determine deletion</param>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveHelper`1.GetDeleteCommand(System.Object)">
            <summary>
            Returns a DELETE QueryCommand object to delete the record with
            the primary key value matching the passed value
            </summary>
            <param name="keyID">The primary key record value to match for the delete</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveHelper`1.GetDeleteCommand(System.String,System.Object)">
            <summary>
            Returns a DELETE QueryCommand object to delete the records with
            matching passed column/value criteria
            </summary>
            <param name="columnName">Name of the column to match</param>
            <param name="oValue">Value of column to match</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.Is">
            <summary>
            This is a syntax helper for constraint based querying.
            </summary>
        </member>
        <member name="M:SubSonic.Is.EqualTo(System.Object)">
            <summary>
            Equals to.
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Is.NotEqualTo(System.Object)">
            <summary>
            Not Equals to.
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Is.Like(System.Object)">
            <summary>
            Like
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Is.NotLike(System.Object)">
            <summary>
            Not Like
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Is.LessThan(System.Object)">
            <summary>
            Less than
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Is.LessThanOrEqualTo(System.Object)">
            <summary>
            Less than or equal to.
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Is.GreaterThan(System.Object)">
            <summary>
            Greater than
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Is.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Less than or equal to.
            </summary>
            <param name="comparand">The comparand.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.Aggregate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Aggregate.Count(SubSonic.TableSchema.TableColumn)">
            <summary>
            Counts the specified col.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Count(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Counts the specified col.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Count(System.String)">
            <summary>
            Counts the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Count(System.String,System.String)">
            <summary>
            Counts the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Sum(SubSonic.TableSchema.TableColumn)">
            <summary>
            Sums the specified col.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Sum(System.String)">
            <summary>
            Sums the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Sum(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Sums the specified col.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Sum(System.String,System.String)">
            <summary>
            Sums the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.GroupBy(SubSonic.TableSchema.TableColumn)">
            <summary>
            Groups the by.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.GroupBy(System.String)">
            <summary>
            Groups the by.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.GroupBy(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Groups the by.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.GroupBy(System.String,System.String)">
            <summary>
            Groups the by.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Avg(SubSonic.TableSchema.TableColumn)">
            <summary>
            Avgs the specified col.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Avg(System.String)">
            <summary>
            Avgs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Avg(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Avgs the specified col.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Avg(System.String,System.String)">
            <summary>
            Avgs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Max(SubSonic.TableSchema.TableColumn)">
            <summary>
            Maxes the specified col.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Max(System.String)">
            <summary>
            Maxes the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Max(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Maxes the specified col.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Max(System.String,System.String)">
            <summary>
            Maxes the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Min(SubSonic.TableSchema.TableColumn)">
            <summary>
            Mins the specified col.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Min(System.String)">
            <summary>
            Mins the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Min(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Mins the specified col.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Min(System.String,System.String)">
            <summary>
            Mins the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Variance(SubSonic.TableSchema.TableColumn)">
            <summary>
            Variances the specified col.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Variance(System.String)">
            <summary>
            Variances the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Variance(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Variances the specified col.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.Variance(System.String,System.String)">
            <summary>
            Variances the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.StandardDeviation(SubSonic.TableSchema.TableColumn)">
            <summary>
            Standards the deviation.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.StandardDeviation(System.String)">
            <summary>
            Standards the deviation.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.StandardDeviation(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Standards the deviation.
            </summary>
            <param name="col">The col.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.StandardDeviation(System.String,System.String)">
            <summary>
            Standards the deviation.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.GetFunctionType(SubSonic.Aggregate)">
            <summary>
            Gets the type of the function.
            </summary>
            <param name="agg">The agg.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Aggregate.#ctor(System.String,SubSonic.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Aggregate"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="aggregateType">Type of the aggregate.</param>
        </member>
        <member name="M:SubSonic.Aggregate.#ctor(System.String,System.String,SubSonic.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Aggregate"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="alias">The alias.</param>
            <param name="aggregateType">Type of the aggregate.</param>
        </member>
        <member name="M:SubSonic.Aggregate.#ctor(SubSonic.TableSchema.TableColumn,SubSonic.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Aggregate"/> class.
            </summary>
            <param name="column">The column.</param>
            <param name="aggregateType">Type of the aggregate.</param>
        </member>
        <member name="M:SubSonic.Aggregate.#ctor(SubSonic.TableSchema.TableColumn,System.String,SubSonic.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Aggregate"/> class.
            </summary>
            <param name="column">The column.</param>
            <param name="alias">The alias.</param>
            <param name="aggregateType">Type of the aggregate.</param>
        </member>
        <member name="M:SubSonic.Aggregate.ToString">
            <summary>
            Overrides ToString() to return the SQL Function call
            </summary>
            <returns></returns>
        </member>
        <member name="P:SubSonic.Aggregate.AggregateType">
            <summary>
            Gets or sets the type of the aggregate.
            </summary>
            <value>The type of the aggregate.</value>
        </member>
        <member name="P:SubSonic.Aggregate.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:SubSonic.Aggregate.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="T:SubSonic.SubSonicSection">
            <summary>
            Summary for the SubSonicSection class
            </summary>
        </member>
        <member name="P:SubSonic.SubSonicSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:SubSonic.SubSonicSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="P:SubSonic.SubSonicSection.EnableTrace">
            <summary>
            Gets or sets the enable trace.
            </summary>
            <value>The enable trace.</value>
        </member>
        <member name="P:SubSonic.SubSonicSection.TemplateDirectory">
            <summary>
            Gets or sets the template directory.
            </summary>
            <value>The template directory.</value>
        </member>
        <member name="T:SubSonic.ManyManyList">
            <summary>
            Summary for the ManyManyList class
            </summary>
        </member>
        <member name="M:SubSonic.ManyManyList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:SubSonic.ManyManyList.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="P:SubSonic.ManyManyList.MapTableName">
            <summary>
            Gets or sets the name of the map table.
            </summary>
            <value>The name of the map table.</value>
        </member>
        <member name="P:SubSonic.ManyManyList.PrimaryTableName">
            <summary>
            Gets or sets the name of the primary table.
            </summary>
            <value>The name of the primary table.</value>
        </member>
        <member name="P:SubSonic.ManyManyList.PrimaryKeyValue">
            <summary>
            Gets or sets the primary key value.
            </summary>
            <value>The primary key value.</value>
        </member>
        <member name="P:SubSonic.ManyManyList.ForeignTableName">
            <summary>
            Gets or sets the name of the foreign table.
            </summary>
            <value>The name of the foreign table.</value>
        </member>
        <member name="P:SubSonic.ManyManyList.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.ManyManyList.ForeignTextField">
            <summary>
            Gets or sets the foreign text field.
            </summary>
            <value>The foreign text field.</value>
        </member>
        <member name="T:SubSonic.StoredProcedure">
            <summary>
            Summary for the StoredProcedure class
            </summary>
        </member>
        <member name="F:SubSonic.StoredProcedure.OutputValues">
            <summary>
            Output values returned by the StoredProcedure
            </summary>
        </member>
        <member name="M:SubSonic.StoredProcedure.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.StoredProcedure"/> class.
            </summary>
            <param name="spName">Name of the sp.</param>
        </member>
        <member name="M:SubSonic.StoredProcedure.#ctor(System.String,SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.StoredProcedure"/> class.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.StoredProcedure.#ctor(System.String,SubSonic.DataProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.StoredProcedure"/> class.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="provider">The provider.</param>
            <param name="schemaName">Name of the schema.</param>
        </member>
        <member name="M:SubSonic.StoredProcedure.GetReader">
            <summary>
            Gets the reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.GetReader(System.String)">
            <summary>
            Executes an SP using the default provider and returns a reader
            </summary>
            <param name="spAndParams">The SP name and each argument required - these must be in order</param>
            <returns>System.Data.IDataReader</returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.GetReader(System.String,System.String)">
            <summary>
            Gets the reader.
            </summary>
            <param name="spAndParams">The sp and params.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.GetDataSet(System.String)">
            <summary>
            Executes an SP using the default provider
            </summary>
            <param name="spAndParams">The SP name and each argument required - these must be in order</param>
            <returns>System.Data.DataSet</returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.GetDataSet(System.String,System.String)">
            <summary>
            Executes an SP using the specified provider
            </summary>
            <param name="spAndParams">The SP name and each argument required - these must be in order</param>
            <param name="providerName">Specifies the specific provider to use.</param>
            <returns>System.Data.DataSet</returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.GetDataSet">
            <summary>
            Gets the data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.GetDataSet``1">
            <summary>
            Gets the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.Execute">
            <summary>
            Executes the stored procedure and returns the number of rows affected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.ExecuteScalar">
            <summary>
            Executes the scalar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.ExecuteScalar``1">
            <summary>
            Executes the scalar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.ExecuteTypedList``1">
            <summary>
            Executes the typed list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.StoredProcedure.TransformSPName(System.String,SubSonic.DataProvider)">
            <summary>
            Transforms the name of the SP.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.StoredProcedure.Parameters">
            <summary>
            Gets or sets the parameter collection for the current instance
            </summary>
            <value></value>
        </member>
        <member name="P:SubSonic.StoredProcedure.Provider">
            <summary>
            Get the underlying DataProvider for the instance
            </summary>
            <value></value>
        </member>
        <member name="P:SubSonic.StoredProcedure.Command">
            <summary>
            Gets or sets the underlying QueryCommand for the instance
            </summary>
            <value></value>
        </member>
        <member name="P:SubSonic.StoredProcedure.CommandTimeout">
            <summary>
            Gets or sets the command execution timeout (in seconds).
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:SubSonic.StoredProcedure.Name">
            <summary>
            Gets the name of the instance, as reflected in the underlying database
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SubSonic.StoredProcedure.SchemaName">
            <summary>
            The DB Schema associated with this Stored Procedure
            </summary>
        </member>
        <member name="P:SubSonic.StoredProcedure.DisplayName">
            <summary>
            Gets the display name (the name of the stored procedure after any transformations are applied)
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:SubSonic.StoredProcedure.TableName">
            <summary>
            Gets the name of the table. 
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="T:SubSonic.StoredProcedure.Parameter">
            <summary>
            Summary for the Parameter class
            </summary>
        </member>
        <member name="P:SubSonic.StoredProcedure.Parameter.DBType">
            <summary>
            Gets or sets the type of the DB.
            </summary>
            <value>The type of the DB.</value>
        </member>
        <member name="P:SubSonic.StoredProcedure.Parameter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SubSonic.StoredProcedure.Parameter.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:SubSonic.StoredProcedure.Parameter.QueryParameter">
            <summary>
            Gets or sets the query parameter.
            </summary>
            <value>The query parameter.</value>
        </member>
        <member name="P:SubSonic.StoredProcedure.Parameter.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:SubSonic.StoredProcedure.ParameterCollection">
            <summary>
            Summary for the ParameterCollection class
            </summary>
        </member>
        <member name="T:SubSonic.ReadOnlyList`2">
            <summary>
            Summary for the ReadOnlyList&lt;ItemType, ListType&gt; class
            </summary>
            <typeparam name="ItemType">The type of the tem type.</typeparam>
            <typeparam name="ListType">The type of the ist type.</typeparam>
        </member>
        <member name="M:SubSonic.ReadOnlyList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.ReadOnlyList`2"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.ReadOnlyList`2.#ctor(System.Data.IDataReader)">
            <summary>
            Creates and loads the collection, leaving the IDataReader open.
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="M:SubSonic.ReadOnlyList`2.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
            Creates and loads the collection, with option to set IDataReader close behavior.
            </summary>
            <param name="rdr"></param>
            <param name="closeReader"></param>
        </member>
        <member name="T:SubSonic.Utilities.Utility">
            <summary>
            A class containing support methods used internally to SubSonic
            </summary>
        </member>
        <member name="M:SubSonic.Utilities.Utility.WriteTrace(System.String)">
            <summary>
            Writes out the passed string to the current context trace or debug console, if applicable and enabled.
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:SubSonic.Utilities.Utility.DataTableToHTML(System.Data.DataTable,System.String)">
            <summary>
            Builds a simple HTML table from the passed-in datatable
            </summary>
            <param name="tbl">System.Data.DataTable</param>
            <param name="tableWidth">The width of the table</param>
            <returns>System.String</returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsSql2000(SubSonic.DataProvider)">
            <summary>
            Determines whether the specified provider is SQL2000.
            </summary>
            <param name="provider">The provider.</param>
            <returns>
            	<c>true</c> if the specified provider is SQL2000; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsSql2005(SubSonic.DataProvider)">
            <summary>
            Determines whether the specified provider is SQL2005.
            </summary>
            <param name="provider">The provider.</param>
            <returns>
            	<c>true</c> if the specified provider is SQL2005; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsLogicalDeleteColumn(System.String)">
            <summary>
            Determines whether the passed column name is a logical delete column, per the SubSonic naming conventions.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>
            	<c>true</c> if it's a logical delete column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsAuditField(System.String)">
            <summary>
            Determines whether the passed column name is a audit column, per the SubSonic naming conventions.
            </summary>
            <param name="colName">Name of the column.</param>
            <returns>
            	<c>true</c> if it's an audit column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsWritableColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Checks to see if a column has any of the attributes that indicate it should not be written to.
            Special thanks to Damien, aka bouncingcastle, who identified an serious missing condition check,
            prompting us to create this method.
            </summary>
            <param name="col">The TableColumn to evaluate</param>
            <returns>
            	<c>true</c> if column is writable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsMatch(System.String,System.String)">
            <summary>
            Performs a case-insensitive comparison of two passed strings.
            </summary>
            <param name="stringA">The string to compare with the second parameter</param>
            <param name="stringB">The string to compare with the first parameter</param>
            <returns>
            	<c>true</c> if the strings match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsMatch(System.String,System.String,System.Boolean)">
            <summary>
            Performs a case-insensitive comparison of two passed strings, 
            with an option to trim the strings before comparison.
            </summary>
            <param name="stringA">The string to compare with the second parameter</param>
            <param name="stringB">The string to compare with the first parameter</param>
            <param name="trimStrings">if set to <c>true</c> strings will be trimmed before comparison.</param>
            <returns>
            	<c>true</c> if the strings match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsRegexMatch(System.String,System.String)">
            <summary>
            Determines whether the passed string matches the passed RegEx pattern.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="matchPattern">The RegEx match pattern.</param>
            <returns>
            	<c>true</c> if the string matches the pattern; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.StripWhitespace(System.String)">
            <summary>
            Strips any whitespace from the passed string using RegEx
            </summary>
            <param name="inputString">The string to strip of whitespace</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsStringNumeric(System.String)">
            <summary>
            Determine whether the passed string is numeric, by attempting to parse it to a double
            </summary>
            <param name="str">The string to evaluated for numeric conversion</param>
            <returns>
            	<c>true</c> if the string can be converted to a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsNumeric(SubSonic.TableSchema.TableColumn)">
            <summary>
            Determines whether the specified column is a numeric data type.
            </summary>
            <param name="column">The TableColumn whose DbType will be evaluated</param>
            <returns>
            	<c>true</c> if the specified column has a numeric DbType; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsString(SubSonic.TableSchema.TableColumn)">
            <summary>
            Determines whether the specified column is a string data type.
            </summary>
            <param name="column">The TableColumn whose DbType will be evaluated</param>
            <returns>
            	<c>true</c> if the specified column has a string DbType; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsNullableDbType(System.Data.DbType)">
            <summary>
            Determines whether the passed DbType supports null values.
            </summary>
            <param name="dbType">The DbType to evaluate</param>
            <returns>
            	<c>true</c> if the DbType supports null values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.UserIsAuthenticated">
            <summary>
            Determines whether the current web user is authenticated by evaluating the HTTP context.
            </summary>
            	<c>true</c> if the user is authenticaed; otherwise, <c>false</c>.
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsSubSonicType``1">
            <summary>
            Determines if the passed-in type is AbstractRecord or ActiveRecord
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsParsable(System.Data.DbType)">
            <summary>
            I can't remember why I created this method. :P
            </summary>
            <param name="dbType">The DbType to evaluate</param>
            <returns>
            	<c>true</c> if the specified DbType is parsable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetDefaultValue(SubSonic.TableSchema.TableColumn,SubSonic.ICodeLanguage)">
            <summary>
            Gets the default value for the DbType of a given TableColumn.
            </summary>
            <param name="col">The TableColumn to evaluate</param>
            <param name="language">The code generation language</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetVariableType(System.Data.DbType,System.Boolean,SubSonic.ICodeLanguage)">
            <summary>
            Gets the string representation of a .NET type for a given DbType.
            </summary>
            <param name="dbType">The DbType to be evaluated</param>
            <param name="isNullableColumn">if set to <c>true</c> the database column is designated nullable</param>
            <param name="language">The code generation language</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetSqlDBType(System.Data.DbType)">
            <summary>
            Returns the SqlDbType for a give DbType
            </summary>
            <param name="dbType">The DbType to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetSystemType(System.Data.DbType)">
            <summary>
            Gets the string representation of the .NET type for a given DbType 
            </summary>
            <param name="dbType">The DbType to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.ByteArrayToString(System.Byte[])">
            <summary>
            Converts the passed byte array to a string
            </summary>
            <param name="arrInput">The byte array to convert to a string</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.StringToByteArray(System.String)">
            <summary>
            Converts the passed string to a byte array.
            </summary>
            <param name="str">The string to convert to a byte array</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.PrefixParameter(System.String,SubSonic.DataProvider)">
            <summary>
            Prefixes the passed parameter value with the provider specific parameter prefix.
            </summary>
            <param name="parameter">The parameter to evaluate</param>
            <param name="provider">The provider where the parameter will be used</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.MakeFunction(System.String,System.String,System.Boolean,SubSonic.DataProvider)">
            <summary>
            Helper method to format a specific passed string as a SQL function
            </summary>
            <param name="functionName">Name of the function</param>
            <param name="columnName">Name of the column that the function will evaluate</param>
            <param name="isDistinct">If set to <c>true</c> a DISTINCT query is performed</param>
            <param name="provider">The provider that the function is being created for</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.MakeFunction(System.String,System.String,SubSonic.DataProvider)">
            <summary>
            Helper method to format a specific passed string as a SQL function
            </summary>
            <param name="functionName">Name of the function</param>
            <param name="columnName">Name of the column that the function will evaluate</param>
            <param name="provider">The provider that the function is being created for</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.QualifyColumnName(System.String,System.String,SubSonic.DataProvider)">
            <summary>
            Fully qualifies qualifies a column name using the [table].[column] format (SQL Server),
            or other format appropriate to a given provider.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnName">Name of the column</param>
            <param name="provider">The provider that the format is being qualified for</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.QualifyTableName(System.String,System.String,SubSonic.DataProvider)">
            <summary>
            Fully qualifies a table reference using the [schema].[table] format (SQL Server),
            or other format appropriate to a given provider.
            </summary>
            <param name="schemaName">Name of the schema</param>
            <param name="tableName">Name of the table</param>
            <param name="provider">The provider that the format is being qualified for</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.QualifyTableName(SubSonic.TableSchema.Table)">
            <summary>
            Fully qualifies a table reference using the [schema].[table] format (SQL Server),
            or other format appropriate to a given provider.
            </summary>
            <param name="table">The TableSchema.Table whose name will be qualified</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.MakeParameterAssignment(System.String,System.String,SubSonic.DataProvider)">
            <summary>
            Creates provider specfic string representation of a parameter assignment.
            For example, '@param = value'
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="parameterName">Name of the parameter</param>
            <param name="provider">The provider that the parameter assignment is being created for</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsMappingTable(SubSonic.TableSchema.Table,System.String)">
            <summary>
            Using a set of criteria including primary/foreign key references and positions,
            determines whether or not a given TableSchema.Table should be considered a mapping table.
            </summary>
            <param name="schema">The TableSchema.Table to evaluate.</param>
            <param name="relatedTableColumn">The name of a the related table column for evaluation</param>
            <returns>
            	<c>true</c> if the it's a mapping table ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.IsMappingTable(SubSonic.TableSchema.Table)">
            <summary>
            Using a set of criteria including primary/foreign key references and positions,
            determines whether or not a given TableSchema.Table should be considered a mapping table.
            </summary>
            <param name="schema">The TableSchema.Table to evaluate.</param>
            <returns>
            	<c>true</c> if the it's a mapping table ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetDefaultSetting(SubSonic.TableSchema.TableColumn)">
            <summary>
            Returns a default setting per data type
            </summary>
            <param name="column">The TableSchema.TableColumn to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetDefaultControlValue(SubSonic.TableSchema.TableColumn,System.Web.UI.Control,System.Boolean,System.Boolean)">
            <summary>
            Gets the default value for System.Web.UI.Control based on Control type and underly DbType of the
            mapped TableSchema.TableColumn
            </summary>
            <param name="col">The TableColumn mapped to the control</param>
            <param name="ctrl">The control that is being evaluated</param>
            <param name="isAdd">if set to <c>true</c> returns the value for a new object; otherwise the value for an updated one.</param>
            <param name="returnDBNull">If set to <c>true</c> will return DbNull values; otherwise return null</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an Object with the specified Type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An Object that implements the IConvertible interface.</param>
            <param name="conversionType">The Type to which value is to be converted.</param>
            <returns>
            An object whose Type is conversionType (or conversionType's underlying type if conversionType
            is Nullable&lt;&gt;) and whose value is equivalent to value. -or- a null reference, if value is a null
            reference and conversionType is not a value type.
            </returns>
            <remarks>
            This method exists as a workaround to System.Convert.ChangeType(Object, Type) which does not handle
            nullables as of version 2.0 (2.0.50727.42) of the .NET Framework. The idea is that this method will
            be deleted once Convert.ChangeType is updated in a future version of the .NET Framework to handle
            nullable types, so we want this to behave as closely to Convert.ChangeType as possible.
            This method was written by Peter Johnson at:
            http://aspalliance.com/author.aspx?uId=1026.
            </remarks>
        </member>
        <member name="M:SubSonic.Utilities.Utility.ParseCamelToProper(System.String)">
            <summary>
            Reformats the passed string from camelCase to ProperCase
            </summary>
            <param name="sIn">The string to reformat to proper case</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetProperName(System.String)">
            <summary>
            Reformats the passed string to ProperCase
            </summary>
            <param name="sIn">The string to reformat to proper case</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetProperName(System.String,SubSonic.DataProvider)">
            <summary>
            Gets the name of the proper.
            </summary>
            <param name="sIn">The s in.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.PluralToSingular(System.String)">
            <summary>
            Plurals to singular.
            </summary>
            <param name="sIn">The s in.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.SingularToPlural(System.String)">
            <summary>
            Singulars to plural.
            </summary>
            <param name="sIn">The s in.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.KeyWordCheck(System.String,System.String,System.String)">
            <summary>
            Keys the word check.
            </summary>
            <param name="word">The word.</param>
            <param name="table">The table.</param>
            <param name="appendWith">The append with.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.KeyWordCheck(System.String,System.String,SubSonic.DataProvider)">
            <summary>
            Keys the word check.
            </summary>
            <param name="word">The word.</param>
            <param name="table">The table.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.KeyWordVBCheck(System.String,System.String,SubSonic.DataProvider)">
            <summary>
            Keys the word VB check.
            </summary>
            <param name="word">The word.</param>
            <param name="table">The table.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.FastReplace(System.String,System.String,System.String)">
            <summary>
            Fasts the replace.
            </summary>
            <param name="original">The original.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.FastReplace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Fasts the replace.
            </summary>
            <param name="original">The original.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.StripText(System.String,System.String)">
            <summary>
            Strips the text.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="stripString">The strip string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetParameterName(System.String,SubSonic.DataProvider)">
            <summary>
            Gets the name of the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.StripNonAlphaNumeric(System.String)">
            <summary>
            Replaces most non-alpha-numeric chars
            </summary>
            <param name="sIn">The s in.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces any matches found in word from list.
            </summary>
            <param name="word">The string to check against.</param>
            <param name="find">A comma separated list of values to replace.</param>
            <param name="replaceWith">The value to replace with.</param>
            <param name="removeUnderscores">Whether or not underscores will be kept.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.StartsWith(System.String,System.String)">
            <summary>
            Finds a match in word using comma separted list.
            </summary>
            <param name="word">The string to check against.</param>
            <param name="list">A comma separted list of values to find.</param>
            <returns>
            true if a match is found or list is empty, otherwise false.
            </returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.Split(System.String)">
            <summary>
            A custom split method
            </summary>
            <param name="list">A list of values separated by either ", " or ","</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.ShortenText(System.Object,System.Int32)">
            <summary>
            Shortens the text.
            </summary>
            <param name="sIn">The s in.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetEffectiveMaxLength(SubSonic.TableSchema.TableColumn)">
            <summary>
            Gets the length of the effective max.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.CheckStringLength(System.String,System.Int32)">
            <summary>
            Checks the length of the string.
            </summary>
            <param name="stringToCheck">The string to check.</param>
            <param name="maxLength">Length of the max.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.StringToEnum(System.Type,System.String)">
            <summary>
            Strings to enum.
            </summary>
            <param name="t">The t.</param>
            <param name="Value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetSiteRoot">
            <summary>
            Gets the site root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetParameter(System.String)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="sParam">The s param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetIntParameter(System.String)">
            <summary>
            Gets the int parameter.
            </summary>
            <param name="sParam">The s param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetGuidParameter(System.String)">
            <summary>
            Gets the GUID parameter.
            </summary>
            <param name="sParam">The s param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.GetRandomString">
            <summary>
            Gets the random string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.RandomString(System.Int32,System.Boolean)">
            <summary>
            Randoms the string.
            </summary>
            <param name="size">The size.</param>
            <param name="lowerCase">if set to <c>true</c> [lower case].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.RandomInt(System.Int32,System.Int32)">
            <summary>
            Randoms the int.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Utilities.Utility.LoadDropDown(System.Web.UI.WebControls.ListControl,System.Collections.ICollection,System.String,System.String,System.String)">
            <summary>
            Loads the drop down.
            </summary>
            <param name="ddl">The DDL.</param>
            <param name="collection">The collection.</param>
            <param name="textField">The text field.</param>
            <param name="valueField">The value field.</param>
            <param name="initialSelection">The initial selection.</param>
        </member>
        <member name="M:SubSonic.Utilities.Utility.LoadDropDown(System.Web.UI.WebControls.ListControl,System.Data.IDataReader,System.Boolean)">
            <summary>
            Loads the drop down.
            </summary>
            <param name="ddl">The DDL.</param>
            <param name="rdr">The RDR.</param>
            <param name="closeReader">if set to <c>true</c> [close reader].</param>
        </member>
        <member name="M:SubSonic.Utilities.Utility.LoadListItems(System.Web.UI.WebControls.ListItemCollection,System.Data.DataTable,System.Data.DataTable,System.String,System.String)">
            <summary>
            Loads the list items.
            </summary>
            <param name="list">The list.</param>
            <param name="tblBind">The TBL bind.</param>
            <param name="tblVals">The TBL vals.</param>
            <param name="textField">The text field.</param>
            <param name="valField">The val field.</param>
        </member>
        <member name="M:SubSonic.Utilities.Utility.LoadListItems(System.Web.UI.WebControls.ListItemCollection,System.Data.IDataReader,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Loads the list items.
            </summary>
            <param name="list">The list.</param>
            <param name="rdr">The RDR.</param>
            <param name="textField">The text field.</param>
            <param name="valField">The val field.</param>
            <param name="selectedValue">The selected value.</param>
            <param name="closeReader">if set to <c>true</c> [close reader].</param>
        </member>
        <member name="M:SubSonic.Utilities.Utility.SetListSelection(System.Web.UI.WebControls.ListItemCollection,System.String)">
            <summary>
            Sets the list selection.
            </summary>
            <param name="lc">The lc.</param>
            <param name="Selection">The selection.</param>
        </member>
        <member name="M:SubSonic.Utilities.Utility.RegexTransform(System.String,SubSonic.DataProvider)">
            <summary>
            Regexes the transform.
            </summary>
            <param name="inputText">The input text.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.Sugar.Web">
            <summary>
            Summary for the Web class
            </summary>
        </member>
        <member name="M:SubSonic.Sugar.Web.QueryString``1(System.String)">
            <summary>
            Queries the string.
            </summary>
            <typeparam name="t"></typeparam>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.Cookie``1(System.String)">
            <summary>
            Cookies the specified param.
            </summary>
            <typeparam name="t"></typeparam>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.SessionValue``1(System.String)">
            <summary>
            Sessions the value.
            </summary>
            <typeparam name="t"></typeparam>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.ReadWebPage(System.String)">
            <summary>
            Fetches a web page
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.DNSLookup(System.String)">
            <summary>
            Gets DNS information about a url and puts it in an array of strings
            </summary>
            <param name="url">either an ip address or a host name</param>
            <returns>
            a list with the host name, all the aliases, and all the addresses.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.ScrapeImages(System.String,System.Boolean)">
            <summary>
            Return the images links in a given URL as an array of strings.
            </summary>
            <param name="url">The URL.</param>
            <param name="returnWithTag">if set to <c>true</c> the string are returned as an XHTML compliant img tag; otherwise returns a list of img URLs only</param>
            <returns>string array of all images on a page</returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.ScrapeImages(System.String)">
            <summary>
            Return the images links in a given URL as an array of XHTML-compliant img tags.
            </summary>
            <param name="url">The URL to extract the images from.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.ScrapeLinks(System.String,System.Boolean)">
            <summary>
            Scrapes a web page and parses out all the links.
            </summary>
            <param name="url">The URL.</param>
            <param name="makeLinkable">if set to <c>true</c> [make linkable].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.GetGravatar(System.String,System.Int32)">
            <summary>
            Calls the Gravatar service to and returns an HTML <img></img> tag for use on your pages.
            </summary>
            <param name="email">The email of the user</param>
            <param name="size">The size of the Gravatar image - 60 is standard</param>
            <returns>HTML image tag</returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.CreateSpamFreeEmailLink(System.String)">
            <summary>
            Given a valid email address, returns a short javascript block that will emit a valid
            mailto: link that can't be picked up by address harvesters. Call this method where you
            would normally place the link in your html code.
            </summary>
            <param name="emailText">The email address to convert to spam-free format</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.GenerateLoremIpsum(System.Int32,System.String)">
            <summary>
            A simple utility to output Lorem Ipsum text to your page.
            </summary>
            <param name="count">int count, the number of either paragraphs, words, or characters you would like to display.</param>
            <param name="method">string method, 'p' for paragraphs or 'w' for words or 'c'c for characters</param>
            <returns>
            string with the resulting lorem ipsum text
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Web.LoadTextFromManifest(System.String)">
            <summary>
            Loads the text from manifest.
            </summary>
            <param name="templateFileName">Name of the template file.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.Sugar.Web.IsLocalNetworkRequest">
            <summary>
            Whether or not the request originated from the local network, or more specifically from localhost or a NAT address.
            This property is only accurate if NAT addresses are a valid indicators of a request being from within the internal network.
            </summary>
            <value>
            	<c>true</c> if this instance is local network request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SubSonic.Sugar.Validation">
            <summary>
            Summary for the Validation class
            </summary>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsAlpha(System.String)">
            <summary>
            Determines whether the specified eval string contains only alpha characters.
            </summary>
            <param name="evalString">The eval string.</param>
            <returns>
            	<c>true</c> if the specified eval string is alpha; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsAlphaNumeric(System.String)">
            <summary>
            Determines whether the specified eval string contains only alphanumeric characters
            </summary>
            <param name="evalString">The eval string.</param>
            <returns>
            	<c>true</c> if the string is alphanumeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsEmail(System.String)">
            <summary>
            Determines whether the specified email address string is valid based on regular expression evaluation.
            </summary>
            <param name="emailAddressString">The email address string.</param>
            <returns>
            	<c>true</c> if the specified email address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsLowerCase(System.String)">
            <summary>
            Determines whether the specified string is lower case.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
            	<c>true</c> if the specified string is lower case; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsUpperCase(System.String)">
            <summary>
            Determines whether the specified string is upper case.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
            	<c>true</c> if the specified string is upper case; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsGuid(System.String)">
            <summary>
            Determines whether the specified string is a valid GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns>
            	<c>true</c> if the specified string is a valid GUID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsZIPCodeAny(System.String)">
            <summary>
            Determines whether the specified string is a valid US Zip Code, using either 5 or 5+4 format.
            </summary>
            <param name="zipCode">The zip code.</param>
            <returns>
            	<c>true</c> if it is a valid zip code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsZIPCodeFive(System.String)">
            <summary>
            Determines whether the specified string is a valid US Zip Code, using the 5 digit format.
            </summary>
            <param name="zipCode">The zip code.</param>
            <returns>
            	<c>true</c> if it is a valid zip code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsZIPCodeFivePlusFour(System.String)">
            <summary>
            Determines whether the specified string is a valid US Zip Code, using the 5+4 format.
            </summary>
            <param name="zipCode">The zip code.</param>
            <returns>
            	<c>true</c> if it is a valid zip code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsSocialSecurityNumber(System.String)">
            <summary>
            Determines whether the specified string is a valid Social Security number. Dashes are optional.
            </summary>
            <param name="socialSecurityNumber">The Social Security Number</param>
            <returns>
            	<c>true</c> if it is a valid Social Security number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsIPAddress(System.String)">
            <summary>
            Determines whether the specified string is a valid IP address.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsUSState(System.String)">
            <summary>
            Determines whether the specified string is a valid US state either by full name or two letter abbreviation.
            </summary>
            <param name="stateName">The state name.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsUSTelephoneNumber(System.String)">
            <summary>
            Determines whether the specified string is a valid US phone number using the referenced regex string.
            </summary>
            <param name="telephoneNumber">The telephone number.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsUSCurrency(System.String)">
            <summary>
            Determines whether the specified string is a valid currency string using the referenced regex string.
            </summary>
            <param name="currency">The currency string.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsURL(System.String)">
            <summary>
            Determines whether the specified string is a valid URL string using the referenced regex string.
            </summary>
            <param name="url">The URL string.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsStrongPassword(System.String)">
            <summary>
            Determines whether the specified string is consider a strong password based on the supplied string.
            </summary>
            <param name="password">The password.</param>
            <returns>
            	<c>true</c> if strong; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardAny(System.String)">
            <summary>
            Determines whether the specified string is a valid credit, based on matching any one of the eight credit card strings
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardBigFour(System.String)">
            <summary>
            Determines whether the specified string is an American Express, Discover, MasterCard, or Visa
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardAmericanExpress(System.String)">
            <summary>
            Determines whether the specified string is an American Express card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardCarteBlanche(System.String)">
            <summary>
            Determines whether the specified string is an Carte Blanche card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardDinersClub(System.String)">
            <summary>
            Determines whether the specified string is an Diner's Club card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardDiscover(System.String)">
            <summary>
            Determines whether the specified string is a Discover card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardEnRoute(System.String)">
            <summary>
            Determines whether the specified string is an En Route card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardJCB(System.String)">
            <summary>
            Determines whether the specified string is an JCB card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardMasterCard(System.String)">
            <summary>
            Determines whether the specified string is a Master Card credit card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsCreditCardVisa(System.String)">
            <summary>
            Determines whether the specified string is Visa card.
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.CleanCreditCardNumber(System.String)">
            <summary>
            Cleans the credit card number, returning just the numeric values.
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.CreditPassesFormatCheck(System.String)">
            <summary>
            Determines whether the credit card number, once cleaned, passes the Luhn algorith.
            See: http://en.wikipedia.org/wiki/Luhn_algorithm
            </summary>
            <param name="creditCardNumber">The credit card number.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Validation.IsValidLuhn(System.Int32[])">
            <summary>
            Determines whether the specified int array passes the Luhn algorith
            </summary>
            <param name="digits">The int array to evaluate</param>
            <returns>
            	<c>true</c> if it validates; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SubSonic.Sugar.Dates">
            <summary>
            Summary for the Dates class
            </summary>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DaysAgo(System.Int32)">
            <summary>
            Dayses the ago.
            </summary>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DaysFromNow(System.Int32)">
            <summary>
            Dayses from now.
            </summary>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.HoursAgo(System.Int32)">
            <summary>
            Hourses the ago.
            </summary>
            <param name="hours">The hours.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.HoursFromNow(System.Int32)">
            <summary>
            Hourses from now.
            </summary>
            <param name="hours">The hours.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.MinutesAgo(System.Int32)">
            <summary>
            Minuteses the ago.
            </summary>
            <param name="minutes">The minutes.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.MinutesFromNow(System.Int32)">
            <summary>
            Minuteses from now.
            </summary>
            <param name="minutes">The minutes.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.SecondsAgo(System.Int32)">
            <summary>
            Secondses the ago.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.SecondsFromNow(System.Int32)">
            <summary>
            Seconds from now.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.Diff(System.DateTime,System.DateTime)">
            <summary>
            Diffs the specified date one.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DiffDays(System.String,System.String)">
            <summary>
            Diffs the days.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DiffDays(System.DateTime,System.DateTime)">
            <summary>
            Diffs the days.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DiffHours(System.String,System.String)">
            <summary>
            Diffs the hours.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DiffHours(System.DateTime,System.DateTime)">
            <summary>
            Diffs the hours.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DiffMinutes(System.String,System.String)">
            <summary>
            Diffs the minutes.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.DiffMinutes(System.DateTime,System.DateTime)">
            <summary>
            Diffs the minutes.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.ReadableDiff(System.DateTime,System.DateTime)">
            <summary>
            Displays the difference in time between the two dates. Return example is "12 years 4 months 24 days 8 hours 33 minutes 5 seconds"
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.CountWeekdays(System.DateTime,System.DateTime)">
            <summary>
            Counts the number of weekdays between two dates.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.CountWeekends(System.DateTime,System.DateTime)">
            <summary>
            Counts the number of weekends between two dates.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.IsDate(System.Object)">
            <summary>
            Verifies if the object is a date
            </summary>
            <param name="dt">The dt.</param>
            <returns>
            	<c>true</c> if the specified dt is date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.IsWeekDay(System.DateTime)">
            <summary>
            Checks to see if the date is a week day (Mon - Fri)
            </summary>
            <param name="dt">The dt.</param>
            <returns>
            	<c>true</c> if [is week day] [the specified dt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.IsWeekEnd(System.DateTime)">
            <summary>
            Checks to see if the date is Sat or Sunday
            </summary>
            <param name="dt">The dt.</param>
            <returns>
            	<c>true</c> if [is week end] [the specified dt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.TimeDiff(System.DateTime,System.DateTime)">
            <summary>
            Displays the difference in time between the two dates. Return example is "12 years 4 months 24 days 8 hours 33 minutes 5 seconds"
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.GetFormattedMonthAndDay(System.DateTime)">
            <summary>
            Given a datetime object, returns the formatted month and day, i.e. "April 15th"
            </summary>
            <param name="date">The date to extract the string from</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.GetDateDayWithSuffix(System.DateTime)">
            <summary>
            Given a datetime object, returns the formatted day, "15th"
            </summary>
            <param name="date">The date to extract the string from</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Dates.FormatString(System.String,System.String,System.Int32)">
            <summary>
            Remove leading strings with zeros and adjust for singular/plural
            </summary>
            <param name="str">The STR.</param>
            <param name="previousStr">The previous STR.</param>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.WebUIHelper">
            <summary>
            Summary for the WebUIHelper class
            </summary>
        </member>
        <member name="M:SubSonic.WebUIHelper.EmitClientScripts(System.Web.UI.Page)">
            <summary>
            Emits the client scripts.
            </summary>
            <param name="renderedPage">The rendered page.</param>
        </member>
        <member name="T:SubSonic.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Delete.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Delete"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.Delete.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Delete"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="T:SubSonic.IRecordBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.IRecordBase.MarkNew">
            <summary>
            Automatically called upon object creation. Sets IsNew to true;
            </summary>
        </member>
        <member name="M:SubSonic.IRecordBase.MarkClean">
            <summary>
            Called after any property is set. Sets IsDirty to True.
            </summary>
        </member>
        <member name="M:SubSonic.IRecordBase.MarkOld">
            <summary>
            Marks the old.
            </summary>
        </member>
        <member name="M:SubSonic.IRecordBase.Inspect">
            <summary>
            Inspects this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.Inspect(System.Boolean)">
            <summary>
            Inspects the specified use HTML.
            </summary>
            <param name="useHtml">if set to <c>true</c> [use HTML].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.ToString">
            <summary>
            Convert the record to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.GetDBType(System.String)">
            <summary>
            Gets the type of the DB.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.GetPrimaryKeyValue">
            <summary>
            Returns the current value of the primary key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.SetColumnValue(System.String,System.Object)">
            <summary>
            Sets the column value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="oValue">The o value.</param>
        </member>
        <member name="M:SubSonic.IRecordBase.GetColumnValue``1(System.String)">
            <summary>
            Returns the current value of a column.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.GetColumnValue(System.String)">
            <summary>
            Gets the column value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.GetSchema">
            <summary>
            Gets the schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.ToXML">
            <summary>
            Converts the record to XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.NewFromXML(System.String)">
            <summary>
            Returns an object based on the passed-in XML.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.Load(System.Data.IDataReader)">
            <summary>
            Loads the object with the current reader's values. Assumes the reader is already moved to
            first position in recordset (aka has been "Read()")
            </summary>
            <param name="rdr">The RDR.</param>
        </member>
        <member name="M:SubSonic.IRecordBase.Load(System.Data.DataTable)">
            <summary>
            Loads the object with the current reader's values. Assumes the reader is already moved to 
            first position in recordset (aka has been "Read()")
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="M:SubSonic.IRecordBase.Load(System.Data.DataRow)">
            <summary>
            Loads the object with the current DataRow's values. 
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:SubSonic.IRecordBase.LoadAndCloseReader(System.Data.IDataReader)">
            <summary>
            Opens the IDataReader, loads the object and closes the IDataReader. Unlike AbstractList.LoadAndCloseReader,
            this method does not assume that reader is open and in the first position!
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="M:SubSonic.IRecordBase.GetColumnSettings">
            <summary>
            Gets the column settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.IRecordBase.CopyTo(System.Data.DataTable)">
            <summary>
            Adds a new row to a Datatable with this record
            You must be sure the column names are the same
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="M:SubSonic.IRecordBase.CopyFrom(System.Data.DataRow)">
            <summary>
            Copies a record from a DataTable to this instance. Column names must match.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SubSonic.IRecordBase.HasErrors">
            <summary>
            Determines whether this instance has errors.
            </summary>
            <returns>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.IRecordBase.ValidateColumnSettings">
            <summary>
            Loops the underlying settings collection to validate type, nullability, and length
            </summary>
        </member>
        <member name="M:SubSonic.IRecordBase.LoadFromPost">
            <summary>
            Loads your object from a form postback
            </summary>
        </member>
        <member name="M:SubSonic.IRecordBase.LoadFromPost(System.Boolean)">
            <summary>
            Loads your object from a form postback
            </summary>
            <param name="validatePost">Set this to false to skip validation</param>
        </member>
        <member name="P:SubSonic.IRecordBase.IsLoaded">
            <summary>
            Gets or sets a value indicating whether this instance is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.IRecordBase.IsNew">
            <summary>
            True if data in the object needs to be saved
            </summary>
        </member>
        <member name="P:SubSonic.IRecordBase.IsDirty">
            <summary>
            True if data in the object has been changed and differs from DB.
            </summary>
        </member>
        <member name="P:SubSonic.IRecordBase.TableName">
            <summary>
            Name of the table
            </summary>
        </member>
        <member name="P:SubSonic.IRecordBase.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="T:SubSonic.Select">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Select.#ctor(SubSonic.DataProvider,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Select"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.Select.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Select"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.Select.#ctor(SubSonic.Aggregate[])">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Select"/> class.
            </summary>
            <param name="aggregates">The aggregates.</param>
        </member>
        <member name="M:SubSonic.Select.#ctor(SubSonic.DataProvider,SubSonic.Aggregate[])">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Select"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="aggregates">The aggregates.</param>
        </member>
        <member name="M:SubSonic.Select.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Select"/> class.
            </summary>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.Select.AllColumnsFrom``1">
            <summary>
            Alls the columns from.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Select.#ctor(SubSonic.DataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Select"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.Select.Expression(System.String)">
            <summary>
            Expressions the specified SQL expression.
            </summary>
            <param name="sqlExpression">The SQL expression.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Select.Top(System.String)">
            <summary>
            Tops the specified top.
            </summary>
            <param name="top">The top.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.WebUtility.RESTHandler">
            <summary>
            Summary for the RESTHandler class
            </summary>
        </member>
        <member name="M:SubSonic.WebUtility.RESTHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Main entry point
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:SubSonic.WebUtility.RESTHandler.PreProcessRequest">
            <summary>
            A pre-execution call - you can override for your own processing calls
            if you return false, execution of the request stops
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.WebUtility.RESTHandler.RenderOutput">
            <summary>
            Outputs the data to the response stream
            </summary>
        </member>
        <member name="M:SubSonic.WebUtility.RESTHandler.FormatOutput(System.Data.DataSet)">
            <summary>
            Renders the output based on the request (XML, JSON, RSS,etc)
            </summary>
            <param name="ds">The ds.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.WebUtility.RESTHandler.EvalComparison(System.String,System.String@,SubSonic.Comparison@)">
            <summary>
            Helper method to evaluate the operator to use for the query
            </summary>
            <param name="originalParam">The original param.</param>
            <param name="paramName">Name of the param.</param>
            <param name="comp">The comp.</param>
        </member>
        <member name="M:SubSonic.WebUtility.RESTHandler.GenerateReturnSet">
            <summary>
            Data retrieval
            </summary>
            <returns></returns>
        </member>
        <member name="P:SubSonic.WebUtility.RESTHandler.AllowedTableList">
            <summary>
            Gets or sets the allowed table list.
            </summary>
            <value>The allowed table list.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTHandler.AllowedViewList">
            <summary>
            Gets or sets the allowed view list.
            </summary>
            <value>The allowed view list.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTHandler.AllowedSpList">
            <summary>
            Gets or sets the allowed sp list.
            </summary>
            <value>The allowed sp list.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTHandler.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTHandler.Output">
            <summary>
            Gets or sets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTHandler.OutputWriter">
            <summary>
            Gets or sets the output writer.
            </summary>
            <value>The output writer.</value>
        </member>
        <member name="P:SubSonic.WebUtility.RESTHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:SubSonic.DataService">
            <summary>
            Summary for the DataService class
            </summary>
        </member>
        <member name="F:SubSonic.DataService.ConfigSectionSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.DataService.GetNamespace(System.String)">
            <summary>
            Gets the namespace.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetProviderNames">
            <summary>
            Gets the provider names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetInstance(System.String)">
            <summary>
            Gets the instance.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetInstance">
            <summary>
            Gets the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.LoadProviders">
            <summary>
            Loads the providers.
            </summary>
        </member>
        <member name="M:SubSonic.DataService.ResetDatabases">
            <summary>
            Resets the databases.
            </summary>
        </member>
        <member name="M:SubSonic.DataService.AddProvider(SubSonic.DataProvider)">
            <summary>
            Adds the provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:SubSonic.DataService.CreateTable(System.String,SubSonic.TableSchema.Table)">
            <summary>
            Creates the table.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="table">The table.</param>
        </member>
        <member name="M:SubSonic.DataService.CreateTable(SubSonic.TableSchema.Table)">
            <summary>
            Creates the table.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:SubSonic.DataService.AlterColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.DataService.RemoveColumn(System.String,System.String,System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.DataService.DropTable(System.String,System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.DataService.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.DataService.AddColumn(System.String,System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.DataService.AddColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.DataService.ScriptTableData(System.String)">
            <summary>
            Scripts the table data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.ScriptTableData(System.String,System.String)">
            <summary>
            Scripts the table data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.ScriptData">
            <summary>
            Scripts the data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.ScriptData(System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.ScriptData(System.String,System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetSPSchemaCollection(System.String)">
            <summary>
            Gets the SP schema collection.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetSql(SubSonic.Query)">
            <summary>
            Gets the SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.BuildCommand(SubSonic.Query)">
            <summary>
            Builds the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Executes a transaction of the passed-in commands. 
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SubSonic.DataService.ExecuteTransaction(SubSonic.QueryCommandCollection,System.String)">
            <summary>
            Executes a transaction of the passed-in commands. 
            </summary>
            <param name="commands">The commands.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:SubSonic.DataService.GetRecordCount(SubSonic.Query)">
            <summary>
            Gets the record count.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetReader(SubSonic.QueryCommand)">
            <summary>
            Returns an IDataReader using the passed-in command
            </summary>
            <param name="cmd"></param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.DataService.GetSingleRecordReader(SubSonic.QueryCommand)">
            <summary>
            Returns a single row optimized IDataReader using the passed-in command
            </summary>
            <param name="cmd"></param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.DataService.GetDataSet(SubSonic.QueryCommand)">
            <summary>
            Returns a DataSet based on the passed-in command
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Returns a DataSet based on the passed-in command
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Returns a scalar object based on the passed-in command
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.ExecuteQuery(SubSonic.QueryCommand)">
            <summary>
            Executes a pass-through query on the DB
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:SubSonic.DataService.GetSchema(System.String,System.String)">
            <summary>
            Reverse-compat overload; this defaults to Tables. if you need to specify a view, use the 
            other method call.
            </summary>
            <param name="tableName"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.TableExists(System.String,System.String)">
            <summary>
            Tables the exists.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetSchema(System.String,System.String,SubSonic.TableType)">
            <summary>
            Gets the schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetTableSchema(System.String,System.String)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetTableSchema(System.String,System.String,SubSonic.TableType)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetTableNames(System.String)">
            <summary>
            Gets the table names.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetOrderedTableNames(System.String)">
            <summary>
            Gets the ordered table names.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetTables(System.String)">
            <summary>
            Gets the tables.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetForeignKeyTables(System.String,System.String)">
            <summary>
            Gets the foreign key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetViewNames(System.String)">
            <summary>
            Gets the view names.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetViews(System.String)">
            <summary>
            Gets the views.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetSPList(System.String)">
            <summary>
            Gets the SP list.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetPrimaryKeyTableNames(System.String,System.String)">
            <summary>
            Gets the primary key table names.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetPrimaryKeyTables(System.String,System.String)">
            <summary>
            Gets the primary key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetForeignKeyTableName(System.String,System.String,System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumn">The fk column.</param>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetForeignKeyTable(SubSonic.TableSchema.TableColumn,SubSonic.TableSchema.Table)">
            <summary>
            Gets the foreign key table.
            </summary>
            <param name="fkColumn">The fk column.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetSPParams(System.String,System.String)">
            <summary>
            Gets the SP params.
            </summary>
            <param name="spName">Name of the sp.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetDbType(System.String,System.String)">
            <summary>
            Gets the type of the db.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetClientType(System.String)">
            <summary>
            Gets the type of the client.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetIDbCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the I db command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.DataService.GetDbCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the db command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.DataService.EnableTrace">
            <summary>
            Gets or sets a value indicating whether [enable trace].
            </summary>
            <value><c>true</c> if [enable trace]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.DataService.ProviderCount">
            <summary>
            Gets the provider count.
            </summary>
            <value>The provider count.</value>
        </member>
        <member name="P:SubSonic.DataService.ConfigSection">
            <summary>
            Gets or sets the config section.
            </summary>
            <value>The config section.</value>
        </member>
        <member name="P:SubSonic.DataService.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:SubSonic.DataService.Providers">
            <summary>
            Gets or sets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="T:SubSonic.SpecialString">
            <summary>
            Summary for the SpecialString class
            </summary>
        </member>
        <member name="T:SubSonic.TemplateName">
            <summary>
            Summary for the TemplateName class
            </summary>
        </member>
        <member name="T:SubSonic.TemplateVariable">
            <summary>
            Summary for the TemplateVariable class
            </summary>
        </member>
        <member name="T:SubSonic.ReservedColumnName">
            <summary>
            Summary for the ReservedColumnName class
            </summary>
        </member>
        <member name="T:SubSonic.ConfigurationSectionName">
            <summary>
            Summary for the ConfigurationSectionName class
            </summary>
        </member>
        <member name="T:SubSonic.ConfigurationPropertyName">
            <summary>
            Summary for the ConfigurationPropertyName class
            </summary>
        </member>
        <member name="T:SubSonic.DataProviderTypeName">
            <summary>
            Summary for the DataProviderTypeName class
            </summary>
        </member>
        <member name="T:SubSonic.ClassName">
            <summary>
            Summary for the ClassName class
            </summary>
        </member>
        <member name="T:SubSonic.CodeBlock">
            <summary>
            Summary for the CodeBlock class
            </summary>
        </member>
        <member name="T:SubSonic.FileExtension">
            <summary>
            Summary for the FileExtension class
            </summary>
        </member>
        <member name="T:SubSonic.ControlValueProperty">
            <summary>
            Summary for the ControlValueProperty class
            </summary>
        </member>
        <member name="T:SubSonic.AggregateFunctionName">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.SqlFragment">
            <summary>
            Summary for the SqlFragment class
            </summary>
        </member>
        <member name="T:SubSonic.SqlComparison">
            <summary>
            Summary for the SqlComparison class
            </summary>
        </member>
        <member name="T:SubSonic.SqlSchemaVariable">
            <summary>
            Summary for the SqlSchemaVariable class
            </summary>
        </member>
        <member name="T:SubSonic.OracleSchemaVariable">
            <summary>
            Summary for the OracleSchemaVariable class
            </summary>
        </member>
        <member name="T:SubSonic.MySqlSchemaVariable">
            <summary>
            Summary for the MySqlSchemaVariable class
            </summary>
        </member>
        <member name="T:SubSonic.ServerVariable">
            <summary>
            Summary for the ServerVariable class
            </summary>
        </member>
        <member name="T:SubSonic.Ports">
            <summary>
            Summary for the Ports class
            </summary>
        </member>
        <member name="T:SubSonic.ProtocolPrefix">
            <summary>
            Summary for the ProtocolPrefix class
            </summary>
        </member>
        <member name="T:SubSonic.CodeFragment">
            <summary>
            Summary for the CodeFragment class
            </summary>
        </member>
        <member name="T:SubSonic.ScaffoldCss">
            <summary>
            Summary for the ScaffoldCss class
            </summary>
        </member>
        <member name="T:SubSonic.RegexPattern">
            <summary>
            Summary for the RegexPattern class
            </summary>
        </member>
        <member name="T:SubSonic.ExtendedPropertyName">
            <summary>
            Summary for the ExtendedPropertyName class
            </summary>
        </member>
        <member name="T:SubSonic.CodeLanguageFactory">
            <summary>
            Summary for the CodeLanguageFactory class
            </summary>
        </member>
        <member name="M:SubSonic.CodeLanguageFactory.#cctor">
            <summary>
            Initializes the <see cref="T:SubSonic.CodeLanguageFactory"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.CodeLanguageFactory.GetByCodeProviderName(System.String)">
            <summary>
            Gets the name of the by code provider.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeLanguageFactory.GetByShortName(System.String)">
            <summary>
            Gets the short name of the by.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CodeLanguageFactory.AvoidKeyWord(System.String,System.String,System.String)">
            <summary>
            Ideally this would not be static and called against the correct language
            but callers do not have this information available at this time.
            </summary>
            <param name="word">The word.</param>
            <param name="table">The table.</param>
            <param name="appendWith">The append with.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.CodeLanguageFactory.AllCodeLanguages">
            <summary>
            Gets all code languages.
            </summary>
            <value>All code languages.</value>
        </member>
        <member name="P:SubSonic.CodeLanguageFactory.DefaultCodeLanguage">
            <summary>
            Gets the default code language.
            </summary>
            <value>The default code language.</value>
        </member>
        <member name="T:SubSonic.ActiveRecord`1">
            <summary>
            Summary for the ActiveRecord&lt;T&gt; class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.ActiveRecord`1"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetInsertCommand(System.String)">
            <summary>
            Returns a INSERT QueryCommand object used to generate SQL.
            </summary>
            <param name="userName">An optional username to be used if audit fields are present</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetUpdateCommand(System.String)">
            <summary>
            Returns a UPDATE QueryCommand object used to generate SQL.
            </summary>
            <param name="userName">An optional username to be used if audit fields are present</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetDeleteCommand(System.Object)">
            <summary>
            Returns a DELETE QueryCommand object to delete the record with
            the primary key value matching the passed value
            </summary>
            <param name="keyID">The primary key record value to match for the delete</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetDeleteCommand(System.String,System.Object)">
            <summary>
            Returns a DELETE QueryCommand object to delete the records with
            matching passed column/value criteria
            </summary>
            <param name="columnName">Name of the column to match</param>
            <param name="oValue">Value of column to match</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.BeforeValidate">
            <summary>
            Executes before any operations occur within ActiveRecord Save() 
            </summary>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.BeforeUpdate">
            <summary>
            Executes on existing records after validation and before the update command has been generated.
            </summary>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.BeforeInsert">
            <summary>
            Executes on existing records after validation and before the insert command has been generated.
            </summary>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.AfterCommit">
            <summary>
            Executes after all steps have been performed for a successful ActiveRecord Save()
            </summary>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Save">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Save(System.Int32)">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Save(System.Guid)">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Save(System.String)">
            <summary>
            Saves this object's state to the selected Database.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetSaveCommand">
            <summary>
            Returns a QueryCommand object used to persist the instance to the underlying database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetSaveCommand(System.String)">
            <summary>
            Returns a QueryCommand object used to persist the instance to the underlying database.
            </summary>
            <param name="userName">An optional username to be used if audit fields are present</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Delete(System.Object)">
            <summary>
            If the record contains Deleted or IsDeleted flag columns, sets them to true. If not, invokes Destroy()
            </summary>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Delete(System.String,System.Object)">
            <summary>
            If the record contains Deleted or IsDeleted flag columns, sets them to true. If not, invokes Destroy()
            </summary>
            <param name="columnName">The name of the column that whose value will be evaluated for deletion</param>
            <param name="oValue">The value that will be compared against columnName to determine deletion</param>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Delete(System.String,System.Object,System.String)">
            <summary>
            If the record contains Deleted or IsDeleted flag columns, sets them to true. If not, invokes Destroy()
            </summary>
            <param name="columnName">The name of the column that whose value will be evaluated for deletion</param>
            <param name="oValue">The value that will be compared against columnName to determine deletion</param>
            <param name="userName">The userName that the record will be updated with. Only relevant if the record contains Deleted or IsDeleted properties</param>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.DeleteByParameter(System.String,System.Object,System.String)">
            <summary>
            If the record contains Deleted or IsDeleted flag columns, sets them to true. If not, invokes Destroy()
            </summary>
            <param name="columnName">The name of the column that whose value will be evaluated for deletion</param>
            <param name="oValue">The value that will be compared against columnName to determine deletion</param>
            <param name="userName">The userName that the record will be updated with. Only relevant if the record contains Deleted or IsDeleted properties</param>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Destroy(System.Object)">
            <summary>
            Deletes the record in the table, even if it contains Deleted or IsDeleted flag columns
            </summary>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.Destroy(System.String,System.Object)">
            <summary>
            Deletes the record in the table, even if it contains Deleted or IsDeleted flag columns
            </summary>
            <param name="columnName">The name of the column that whose value will be evaluated for deletion</param>
            <param name="oValue">The value that will be compared against columnName to determine deletion</param>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.DestroyByParameter(System.String,System.Object)">
            <summary>
            Deletes the record in the table, even if it contains Deleted or IsDeleted flag columns
            </summary>
            <param name="columnName">The name of the column that whose value will be evaluated for deletion</param>
            <param name="oValue">The value that will be compared against columnName to determine deletion</param>
            <returns>Number of rows affected by the operation</returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetColumnValue``1(System.String)">
            <summary>
            Gets the column value.
            </summary>
            <typeparam name="CT">The type of the T.</typeparam>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ActiveRecord`1.GetColumnValue(System.String)">
            <summary>
            Gets the column value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.ActiveRecord`1.ParameterPrefix">
            <summary>
            Gets the provider specific (SQL Server, Oracle, etc.) SQL parameter prefix.
            </summary>
            <value>The parameter prefix.</value>
        </member>
        <member name="T:SubSonic.AbstractRecord`1">
            <summary>
            Base class for persisting objects. Follows the "Active Record Design Pattern".
            You can read more on this pattern at http://en.wikipedia.org/wiki/Active_Record
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SubSonic.Sugar.Strings">
            <summary>
            Summary for the Strings class
            </summary>
        </member>
        <member name="M:SubSonic.Sugar.Strings.#cctor">
            <summary>
            Initializes the <see cref="T:SubSonic.Sugar.Strings"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Chop(System.String,System.Int32)">
            <summary>
            Strips the last specified chars from a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="removeFromEnd">The remove from end.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Chop(System.String,System.String)">
            <summary>
            Strips the last specified chars from a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="backDownTo">The back down to.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Clip(System.String,System.Int32)">
            <summary>
            Removes the specified chars from the beginning of a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="removeFromBeginning">The remove from beginning.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Clip(System.String,System.String)">
            <summary>
            Removes chars from the beginning of a string, up to the specified string
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="removeUpTo">The remove up to.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Chop(System.String)">
            <summary>
            Strips the last char from a a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Clip(System.String)">
            <summary>
            Strips the last char from a a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Crop(System.String,System.String,System.String)">
            <summary>
            Returns text that is located between the startText and endText tags.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="startText">The text from which to start the crop</param>
            <param name="endText">The endpoint of the crop</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Squeeze(System.String)">
            <summary>
            Removes excess white space in a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.ToWords(System.String)">
            <summary>
            Creates a string array based on the words in a sentence
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.StripHTML(System.String)">
            <summary>
            Strips all HTML tags from a string
            </summary>
            <param name="htmlString">The HTML string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.StripHTML(System.String,System.String)">
            <summary>
            Strips all HTML tags from a string and replaces the tags with the specified replacement
            </summary>
            <param name="htmlString">The HTML string.</param>
            <param name="htmlPlaceHolder">The HTML place holder.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.ToProper(System.String)">
            <summary>
            Convert string to proper case
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.ToDelimitedList(System.Collections.Generic.List{System.String})">
            <summary>
            Converts a generic List collection to a single comma-delimitted string.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.ToDelimitedList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Converts a generic List collection to a single string using the specified delimitter.
            </summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.ToDelimitedList(System.String[],System.String)">
            <summary>
            Converts an array of strings to a single string using the specified delimitter.
            </summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.CamelToProper(System.String)">
            <summary>
            Camels to proper.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.PluralToSingular(System.String)">
            <summary>
            Plurals to singular.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.SingularToPlural(System.String)">
            <summary>
            Singulars to plural.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Pluralize(System.Int32,System.String)">
            <summary>
            Make plural when count is not one
            </summary>
            <param name="number">The number of things</param>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.Strip(System.String,System.String)">
            <summary>
            Strips the specified input.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="stripValue">The strip value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.StripNonAlphaNumeric(System.String)">
            <summary>
            Replaces most non-alpha-numeric chars
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.AsciiToUnicode(System.Int32)">
            <summary>
            Converts ASCII encoding to Unicode
            </summary>
            <param name="asciiCode">The ASCII code.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.TextToEntity(System.String)">
            <summary>
            Converts Text to HTML-encoded string
            </summary>
            <param name="textString">The text string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.EntityToText(System.String)">
            <summary>
            Converts HTML-encoded bits to Text
            </summary>
            <param name="entityText">The entity text.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Sugar.Strings.FillEntities">
            <summary>
            Fills the entities.
            </summary>
        </member>
        <member name="T:SubSonic.InlineQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.InlineQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.InlineQuery"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.InlineQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.InlineQuery"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:SubSonic.InlineQuery.Execute(System.String)">
            <summary>
            Executes the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:SubSonic.InlineQuery.Execute(System.String,System.Object[])">
            <summary>
            Executes the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteScalar``1(System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="sql">The SQL.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteTypedList``1(System.String)">
            <summary>
            Executes the typed list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteTypedList``1(System.String,System.Object[])">
            <summary>
            Executes the typed list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteAsCollection``1(System.String)">
            <summary>
            Executes as collection.
            </summary>
            <typeparam name="ListType">The type of the ist type.</typeparam>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteAsCollection``1(System.String,System.Object[])">
            <summary>
            Executes as collection.
            </summary>
            <typeparam name="ListType">The type of the ist type.</typeparam>
            <param name="sql">The SQL.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteReader(System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.GetCommand(System.String)">
            <summary>
            Gets the command.
            </summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.InlineQuery.GetCommand(System.String,System.Object[])">
            <summary>
            Gets the command.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.SubSonicConfig">
            <summary>
            Summary for the SubSonicConfig class
            </summary>
        </member>
        <member name="P:SubSonic.SubSonicConfig.DefaultDataProvider">
            <summary>
            Gets the default data provider.
            </summary>
            <value>The default data provider.</value>
        </member>
        <member name="P:SubSonic.SubSonicConfig.TemplateDirectory">
            <summary>
            Gets or sets the template directory.
            </summary>
            <value>The template directory.</value>
        </member>
        <member name="T:SubSonic.ConstraintType">
            <summary>
            Where, And, Or
            </summary>
        </member>
        <member name="F:SubSonic.ConstraintType.Where">
            <summary>
            WHERE operator
            </summary>
        </member>
        <member name="F:SubSonic.ConstraintType.And">
            <summary>
            AND operator
            </summary>
        </member>
        <member name="F:SubSonic.ConstraintType.Or">
            <summary>
            OR Operator
            </summary>
        </member>
        <member name="T:SubSonic.Constraint">
            <summary>
            A Class for handling SQL Constraint generation
            </summary>
        </member>
        <member name="F:SubSonic.Constraint.query">
            <summary>
            The query that this constraint is operating on
            </summary>
        </member>
        <member name="M:SubSonic.Constraint.Where(System.String)">
            <summary>
            Wheres the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.And(System.String)">
            <summary>
            Ands the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.Or(System.String)">
            <summary>
            Ors the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.GetComparisonOperator(SubSonic.Comparison)">
            <summary>
            Gets the comparison operator.
            </summary>
            <param name="comp">The comp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.Like(System.String)">
            <summary>
            Creates a LIKE statement.
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.NotLike(System.String)">
            <summary>
            Creates a NOT LIKE statement
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsGreaterThan(System.Object)">
            <summary>
            Determines whether [is greater than] [the specified val].
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsGreaterThanOrEqualTo(System.Object)">
            <summary>
            Determines whether [is greater than] [the specified val].
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.In(SubSonic.Select)">
            <summary>
            Specifies a SQL IN statement using a nested Select statement
            </summary>
            <param name="selectQuery">The select query.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.In(System.Collections.IEnumerable)">
            <summary>
            Specifies a SQL IN statement
            </summary>
            <param name="vals">Value array</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.In(System.Object[])">
            <summary>
            Specifies a SQL IN statement
            </summary>
            <param name="vals">Value array</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.NotIn(SubSonic.Select)">
            <summary>
            Specifies a SQL IN statement using a nested Select statement
            </summary>
            <param name="selectQuery">The select query.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.NotIn(System.Collections.IEnumerable)">
            <summary>
            Specifies a SQL Not IN statement
            </summary>
            <param name="vals">Value array</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.NotIn(System.Object[])">
            <summary>
            Specifies a SQL NOT IN statement
            </summary>
            <param name="vals">Value array</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsLessThan(System.Object)">
            <summary>
            Determines whether [is less than] [the specified val].
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsLessThanOrEqualTo(System.Object)">
            <summary>
            Determines whether [is less than] [the specified val].
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsNotNull">
            <summary>
            Determines whether [is not null] [the specified val].
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsNull">
            <summary>
            Determines whether the specified val is null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsBetweenAnd(System.Object,System.Object)">
            <summary>
            Determines whether [is between and] [the specified val1].
            </summary>
            <param name="val1">The val1.</param>
            <param name="val2">The val2.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsEqualTo(System.Object)">
            <summary>
            Determines whether [is equal to] [the specified val].
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Constraint.IsNotEqualTo(System.Object)">
            <summary>
            Determines whether [is not equal to] [the specified val].
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.Constraint.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:SubSonic.Constraint.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.Constraint.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:SubSonic.Constraint.Comparison">
            <summary>
            Gets or sets the comparison.
            </summary>
            <value>The comparison.</value>
        </member>
        <member name="P:SubSonic.Constraint.ParameterValue">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <value>The parameter value.</value>
        </member>
        <member name="P:SubSonic.Constraint.StartValue">
            <summary>
            Gets or sets the start value.
            </summary>
            <value>The start value.</value>
        </member>
        <member name="P:SubSonic.Constraint.EndValue">
            <summary>
            Gets or sets the end value.
            </summary>
            <value>The end value.</value>
        </member>
        <member name="P:SubSonic.Constraint.InValues">
            <summary>
            Gets or sets the in values.
            </summary>
            <value>The in values.</value>
        </member>
        <member name="P:SubSonic.Constraint.InSelect">
            <summary>
            Gets or sets the in select.
            </summary>
            <value>The in select.</value>
        </member>
        <member name="P:SubSonic.Constraint.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:SubSonic.Constraint.DbType">
            <summary>
            Gets or sets the type of the db.
            </summary>
            <value>The type of the db.</value>
        </member>
        <member name="M:SubSonic.Scaffold.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:SubSonic.Scaffold.UpdateRecord(System.String)">
            <summary>
            Builds the update SQL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Scaffold.InsertRecord">
            <summary>
            Builds the insert SQL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Scaffold.DeleteRecord">
            <summary>
            Deletes the record.
            </summary>
        </member>
        <member name="M:SubSonic.Scaffold.AddRow(System.Web.UI.HtmlControls.HtmlTable,System.String,System.Web.UI.Control)">
            <summary>
            Adds the row.
            </summary>
            <param name="tbl">The TBL.</param>
            <param name="cellValue1">The cell value1.</param>
            <param name="control">The control.</param>
        </member>
        <member name="M:SubSonic.Scaffold.ApplyCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Used to apply CSS class values to WebControls. Ensures that no empty classes are applied;
            </summary>
            <param name="control"></param>
            <param name="cssClass"></param>
        </member>
        <member name="M:SubSonic.Scaffold.ApplyCssClass(System.Web.UI.HtmlControls.HtmlControl,System.String)">
            <summary>
            Used to apply class attribute to HtmlControls. Ensures that no empty classes are applied;
            </summary>
            <param name="control"></param>
            <param name="cssClass"></param>
        </member>
        <member name="M:SubSonic.Scaffold.AddRow(System.Web.UI.HtmlControls.HtmlTable,System.String,System.Int32)">
            <summary>
            Adds the row.
            </summary>
            <param name="table">The table.</param>
            <param name="text">The text.</param>
            <param name="colspan">The colspan.</param>
        </member>
        <member name="M:SubSonic.Scaffold.ShowMessage(System.String)">
            <summary>
            Shows the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SubSonic.Scaffold.GetEditControl(SubSonic.TableSchema.TableColumn)">
            <summary>
            Gets the edit control.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Scaffold.BindEditor(SubSonic.TableSchema.Table,System.String)">
            <summary>
            Binds the editor.
            </summary>
            <param name="tbl">The TBL.</param>
            <param name="keyID">The key ID.</param>
        </member>
        <member name="M:SubSonic.Scaffold.BindGrid(System.String)">
            <summary>
            Binds the grid.
            </summary>
            <param name="orderBy">The order by.</param>
        </member>
        <member name="M:SubSonic.Scaffold.SaveEditor">
            <summary>
            Saves the editor.
            </summary>
        </member>
        <member name="M:SubSonic.Scaffold.SaveManyToMany">
            <summary>
            Saves the many to many.
            </summary>
        </member>
        <member name="M:SubSonic.Scaffold.CreateEditor(System.Web.UI.Control,System.Boolean)">
            <summary>
            Creates the editor.
            </summary>
            <param name="destination">The destination.</param>
            <param name="isEdit">if set to <c>true</c> [is edit].</param>
        </member>
        <member name="M:SubSonic.Scaffold.CreateManyMapper">
            <summary>
            Special builder for many to many relational tables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Scaffold.AddManyToMany(System.Web.UI.HtmlControls.HtmlTable)">
            <summary>
            Adds the many to many.
            </summary>
            <param name="tbl">The TBL.</param>
        </member>
        <member name="M:SubSonic.Scaffold.grid_Sorting(System.Object,System.Web.UI.WebControls.GridViewSortEventArgs)">
            <summary>
            Handles the Sorting event of the grid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.Scaffold.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnCancel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.Scaffold.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSave control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.Scaffold.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.Scaffold.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnAdd control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SubSonic.Scaffold.grid_RowEditing(System.Object,System.Web.UI.WebControls.GridViewEditEventArgs)">
            <summary>
            Handles the RowEditing event of the grid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.GridViewEditEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:SubSonic.Scaffold.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.Scaffold.PrimaryKeyValue">
            <summary>
            Gets or sets the primary key value.
            </summary>
            <value>The primary key value.</value>
        </member>
        <member name="P:SubSonic.Scaffold.PrimaryKeyControlValue">
            <summary>
            Gets primary key value.
            </summary>
        </member>
        <member name="P:SubSonic.Scaffold.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.Scaffold.GridView">
            <summary>
            Gets the grid view.
            </summary>
            <value>The grid view.</value>
        </member>
        <member name="P:SubSonic.Scaffold.DeleteConfirm">
            <summary>
            Gets or sets the delete confirm.
            </summary>
            <value>The delete confirm.</value>
        </member>
        <member name="P:SubSonic.Scaffold.ReturnOnSave">
            <summary>
            Whether to show the list view on save.
            </summary>
        </member>
        <member name="P:SubSonic.Scaffold.HiddenEditorColumns">
            <summary>
            Sets the hidden editor columns.
            </summary>
            <value>The hidden editor columns.</value>
        </member>
        <member name="P:SubSonic.Scaffold.HiddenGridColumns">
            <summary>
            Sets the hidden grid columns.
            </summary>
            <value>The hidden grid columns.</value>
        </member>
        <member name="P:SubSonic.Scaffold.ReadOnlyColumns">
            <summary>
            Sets the read only columns.
            </summary>
            <value>The read only columns.</value>
        </member>
        <member name="P:SubSonic.Scaffold.WhereExpression">
            <summary>
            Gets or sets the where expression.
            </summary>
            <value>The where expression.</value>
        </member>
        <member name="P:SubSonic.Scaffold.WhereCollection">
            <summary>
            Gets or sets the where collection.
            </summary>
            <value>The where collection.</value>
        </member>
        <member name="P:SubSonic.Scaffold.ManyToManyMap">
            <summary>
            Gets or sets the many to many map.
            </summary>
            <value>The many to many map.</value>
        </member>
        <member name="P:SubSonic.Scaffold.AutoGenerateManyToMany">
            <summary>
            Whether or not the scaffold should detect and automatically generate Many to Many maps for tables automatically.
            </summary>
            <value>
            	<c>true</c> if it should automatically generate Many to Many maps; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.Scaffold.CanCreate">
            <summary>
            Gets a value indicating whether this instance can create.
            </summary>
            <value>
            	<c>true</c> if this instance can create; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.Scaffold.CanDelete">
            <summary>
            Gets a value indicating whether this instance can delete.
            </summary>
            <value>
            	<c>true</c> if this instance can delete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.Scaffold.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>The CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.GridViewSkinID">
            <summary>
            Gets or sets the grid view skin ID.
            </summary>
            <value>The grid view skin ID.</value>
        </member>
        <member name="P:SubSonic.Scaffold.EditTableCssClass">
            <summary>
            Gets or sets the edit table CSS class.
            </summary>
            <value>The edit table CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.EditTableItemCssClass">
            <summary>
            Gets or sets the edit table item CSS class.
            </summary>
            <value>The edit table item CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.EditTableLabelCssClass">
            <summary>
            Gets or sets the edit table label CSS class.
            </summary>
            <value>The edit table label CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.ButtonCssClass">
            <summary>
            Gets or sets the button CSS class.
            </summary>
            <value>The button CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.TextBoxCssClass">
            <summary>
            Gets or Sets the CSS class used by all TextBox elements in the edit form.
            </summary>
            <value>The text box CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.CheckBoxCssClass">
            <summary>
            Gets or Sets the CSS class used by all CheckBox elements in the edit form.
            </summary>
            <value>The text box CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.DropDownCssClass">
            <summary>
            Gets or Sets the CSS class used by all DropDown elements in the edit form.
            </summary>
            <value>The text box CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.EditTableItemCaptionCellCssClass">
            <summary>
            Gets or sets the edit table item caption cell CSS class.
            </summary>
            <value>The edit table item caption cell CSS class.</value>
        </member>
        <member name="P:SubSonic.Scaffold.UseEmbeddedStyles">
            <summary>
            Whether or not the Scaffold should emit it's default embedded style sheet at runtime.
            </summary>
            <value><c>true</c> if [use embedded styles]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.Scaffold.ShowScaffoldCaption">
            <summary>
            Gets or sets a value indicating whether [show scaffold caption].
            </summary>
            <value><c>true</c> if [show scaffold caption]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.Scaffold.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:SubSonic.DropDown">
            <summary>
            Summary for the DropDown class
            </summary>
        </member>
        <member name="M:SubSonic.DropDown.OnInit(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:SubSonic.DropDown.PromptText">
            <summary>
            Gets or sets the prompt text.
            </summary>
            <value>The prompt text.</value>
        </member>
        <member name="P:SubSonic.DropDown.ShowPrompt">
            <summary>
            Gets or sets a value indicating whether [show prompt].
            </summary>
            <value><c>true</c> if [show prompt]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.DropDown.PromptValue">
            <summary>
            Gets or sets the prompt value.
            </summary>
            <value>The prompt value.</value>
        </member>
        <member name="P:SubSonic.DropDown.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.DropDown.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.DropDown.TextField">
            <summary>
            Gets or sets the text field.
            </summary>
            <value>The text field.</value>
        </member>
        <member name="P:SubSonic.DropDown.ValueField">
            <summary>
            Gets or sets the value field.
            </summary>
            <value>The value field.</value>
        </member>
        <member name="P:SubSonic.DropDown.OrderField">
            <summary>
            Gets or sets the order field.
            </summary>
            <value>The order field.</value>
        </member>
        <member name="P:SubSonic.DropDown.WhereField">
            <summary>
            Gets or sets the where field.
            </summary>
            <value>The where field.</value>
        </member>
        <member name="P:SubSonic.DropDown.WhereValue">
            <summary>
            Gets or sets the where value.
            </summary>
            <value>The where value.</value>
        </member>
        <member name="T:SubSonic.RepositoryRecord`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SubSonic.RepositoryRecord`1.GetColumnValue``1(System.String)">
            <summary>
            Gets the column value.
            </summary>
            <typeparam name="CT">The type of the T.</typeparam>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.RepositoryRecord`1.GetColumnValue(System.String)">
            <summary>
            Gets the column value.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.ListComparer`1">
            <summary>
            Internal class supporting the sorting of AbstractList objects.
            </summary>
            <typeparam name="ItemType">The ActiveRecord type of the collection members</typeparam>
        </member>
        <member name="M:SubSonic.ListComparer`1.Compare(`0,`0)">
            <summary>
            Compares values of individual items in the collection for list sorting. Sorting behavior is dependent on item data type.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.ListComparer`1.ColumnName">
            <summary>
            Gets or sets the name of the column used to sort the collection.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:SubSonic.ListComparer`1.Ascending">
            <summary>
            Gets or sets a value indicating whether the sort to be performed is ascending.
            </summary>
            <value><c>true</c> if ascending; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.ListComparer`1.DBType">
            <summary>
            Gets or sets the data type of the sort column, determining the sorting logic employed.
            </summary>
            <value>System.Data.DBType</value>
        </member>
        <member name="T:SubSonic.MySqlGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:SubSonic.ANSISqlGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.#ctor(SubSonic.SqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.ANSISqlGenerator"/> class.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.SetInsertQuery(SubSonic.Insert)">
            <summary>
            Sets the insert query.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.QualifyTableName(SubSonic.TableSchema.Table)">
            <summary>
            Qualifies the name of the table.
            </summary>
            <param name="tbl">The TBL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GetQualifiedSelect(SubSonic.TableSchema.Table)">
            <summary>
            Gets the qualified select.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GenerateSelectColumnList">
            <summary>
            Generates the select column list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.FindColumn(System.String)">
            <summary>
            Finds the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GenerateGroupBy">
            <summary>
            Generates the group by.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GenerateCommandLine">
            <summary>
            Generates the command line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GenerateJoins">
            <summary>
            Generates the joins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GenerateFromList">
            <summary>
            Generates from list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GenerateConstraints">
            <summary>
            Generates the constraints.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GenerateOrderBy">
            <summary>
            Generates the order by.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GetSelectColumns">
            <summary>
            Gets the select columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.GetPagingSqlWrapper">
            <summary>
            Gets the paging SQL wrapper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.BuildPagedSelectStatement">
            <summary>
            Builds the paged select statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.BuildSelectStatement">
            <summary>
            Builds the select statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.BuildUpdateStatement">
            <summary>
            Builds the update statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.BuildInsertStatement">
            <summary>
            Builds the insert statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ANSISqlGenerator.BuildDeleteStatement">
            <summary>
            Builds the delete statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.MySqlGenerator.#ctor(SubSonic.SqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.MySqlGenerator"/> class.
            </summary>
            <param name="qry">The qry.</param>
        </member>
        <member name="T:SubSonic.DataProviderCollection">
            <summary>
            Summary for the DataProviderCollection class
            </summary>
        </member>
        <member name="M:SubSonic.DataProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Adds a provider to the collection.
            </summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="provider"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is null.- or -The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is less than 1.</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="P:SubSonic.DataProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SubSonic.DataProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:SubSonic.OracleDataProvider">
            <summary>
            Summary for the OracleDataProvider class
            </summary>
        </member>
        <member name="M:SubSonic.OracleDataProvider.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.CreateConnection(System.String)">
            <summary>
            Creates the connection.
            </summary>
            <param name="newConnectionString">The new connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.AddParams(System.Data.OracleClient.OracleCommand,SubSonic.QueryCommand)">
            <summary>
            Adds the params.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="qry">The qry.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetOracleType(System.Data.DbType)">
            <summary>
            Gets the type of the oracle.
            </summary>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.SetParameter(System.Data.IDataReader,SubSonic.StoredProcedure.Parameter)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="rdr">The RDR.</param>
            <param name="par">The par.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetParameterPrefix">
            <summary>
            Gets the parameter prefix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.AdjustUpdateSql(SubSonic.Query,SubSonic.TableSchema.Table,System.String)">
            <summary>
            Adjusts the update SQL.
            </summary>
            <param name="qry">The qry.</param>
            <param name="table">The table.</param>
            <param name="updateSql">The update SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetReader(SubSonic.QueryCommand)">
            <summary>
            Gets the reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetSingleRecordReader(SubSonic.QueryCommand)">
            <summary>
            Gets the single record reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.ExecuteQuery(SubSonic.QueryCommand)">
            <summary>
            Executes the query.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetTableSchema(System.String,SubSonic.TableType)">
            <summary>
            Gets the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableType">Type of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetSPParams(System.String)">
            <summary>
            Gets the SP params.
            </summary>
            <param name="spName">Name of the sp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetSPList">
            <summary>
            Gets the SP list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetViewNameList">
            <summary>
            Gets the view name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetTableNameList">
            <summary>
            Gets the table name list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetPrimaryKeyTableNames(System.String)">
            <summary>
            Gets the primary key table names.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetPrimaryKeyTables(System.String)">
            <summary>
            Gets the primary key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetForeignKeyTableName(System.String,System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetForeignKeyTableName(System.String)">
            <summary>
            Gets the name of the foreign key table.
            </summary>
            <param name="fkColumnName">Name of the fk column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetDbTypeOracle(System.String,System.Int32,System.Int32)">
            <summary>
            Added to distinguish for ORACLE between float and integer
            To be accurate, we should test dataPrecision to determine what kind of int
            we deal with 32, 64, while not extactly true cause, for instance 77000 is 5 of dataprecision
            and doesn't fit an int16)
            19/03/07 : due to mismatch casting between integer and decimal data type (i.e 
            what is the real type returned by the OracleClient assembly which is decimal and
            returned type from this function, I decided to return always for number type,
            decimal). Works better.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <param name="dataScale">The data scale.</param>
            <param name="dataPrecision">The data precision.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetDbType(System.String)">
            <summary>
            Gets the type of the db.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Executes the transaction.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetForeignKeyTables(System.String)">
            <summary>
            Gets the foreign key tables.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetTableNameByPrimaryKey(System.String,System.String)">
            <summary>
            Gets the table name by primary key.
            </summary>
            <param name="pkName">Name of the pk.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetDatabaseVersion(System.String)">
            <summary>
            Gets the database version.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.AddColumn(System.String,SubSonic.TableSchema.TableColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.AlterColumn(SubSonic.TableSchema.TableColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.RemoveColumn(System.String,System.String)">
            <summary>
            Removes the column.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.CreateTable(System.String,SubSonic.TableSchema.TableColumnCollection)">
            <summary>
            Creates the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.DropTable(System.String)">
            <summary>
            Drops the table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetSelectSql(SubSonic.Query)">
            <summary>
            Gets the select SQL.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetQualifiedSelect(SubSonic.TableSchema.Table)">
            <summary>
            Returns a qualified list of columns ([Table].[Column])
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.GetInsertSql(SubSonic.Query)">
            <summary>
            Loops the TableColums[] array for the object, creating a SQL string
            for use as an INSERT statement
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OracleDataProvider.ScriptData(System.String,System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.CSharpCodeLanguage">
            <summary>
            Summary for the CSharpCodeLanguage class
            </summary>
        </member>
        <member name="M:SubSonic.CSharpCodeLanguage.CreateCodeProvider">
            <summary>
            Creates the code provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CSharpCodeLanguage.GetDefaultValue(System.String,System.Data.DbType,System.Boolean)">
            <summary>
            Gets the default value.
            </summary>
            <param name="colName">Name of the col.</param>
            <param name="dbType">Type of the db.</param>
            <param name="isNullableColumn">if set to <c>true</c> [is nullable column].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CSharpCodeLanguage.GetUsingStatements(System.String[])">
            <summary>
            Gets the using statements.
            </summary>
            <param name="namespaces">The namespaces.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CSharpCodeLanguage.GetVariableType(System.Data.DbType,System.Boolean)">
            <summary>
            Gets the type of the variable.
            </summary>
            <param name="dbType">Type of the db.</param>
            <param name="isNullableColumn">if set to <c>true</c> [is nullable column].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CSharpCodeLanguage.IsKeyword(System.String)">
            <summary>
            Determines whether the specified word is keyword.
            </summary>
            <param name="word">The word.</param>
            <returns>
            	<c>true</c> if the specified word is keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.CSharpCodeLanguage.GetDefaultValue(System.String,System.Data.DbType)">
            <summary>
            Gets the default value.
            </summary>
            <param name="colName">Name of the col.</param>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.CSharpCodeLanguage.GetVariableType(System.Data.DbType)">
            <summary>
            Gets the type of the variable.
            </summary>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.CSharpCodeLanguage.DefaultUsingStatements">
            <summary>
            Gets the default using statements.
            </summary>
            <value>The default using statements.</value>
        </member>
        <member name="P:SubSonic.CSharpCodeLanguage.CodeProvider">
            <summary>
            Gets the code provider.
            </summary>
            <value>The code provider.</value>
        </member>
        <member name="P:SubSonic.CSharpCodeLanguage.FileExtension">
            <summary>
            Gets the file extension.
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:SubSonic.CSharpCodeLanguage.Identifier">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SubSonic.CSharpCodeLanguage.ShortName">
            <summary>
            Gets the short name.
            </summary>
            <value>The short name.</value>
        </member>
        <member name="P:SubSonic.CSharpCodeLanguage.TemplatePrefix">
            <summary>
            Gets the template prefix.
            </summary>
            <value>The template prefix.</value>
        </member>
        <member name="T:SubSonic.TurboCompiler">
            <summary>
            Summary for the TurboCompiler class
            </summary>
        </member>
        <member name="M:SubSonic.TurboCompiler.AddTemplate(SubSonic.TurboTemplate)">
            <summary>
            Adds the template.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:SubSonic.TurboCompiler.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:SubSonic.TurboCompiler.RunAndExecute(System.String,System.String)">
            <summary>
            Runs the and execute.
            </summary>
            <param name="sourceCode">The source code.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:SubSonic.TurboCompiler.RunAndExecute(System.String)">
            <summary>
            Runs the and execute.
            </summary>
            <param name="sourceCode">The source code.</param>
        </member>
        <member name="M:SubSonic.TurboCompiler.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:SubSonic.TurboCompiler.ScrubOutput(System.String,SubSonic.ICodeLanguage)">
            <summary>
            Scrubs the output.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.TurboCompiler.CallEntry(System.Reflection.Assembly)">
            <summary>
            Calls the entry.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:SubSonic.TurboCompiler.LogErrorMessages(System.String)">
            <summary>
            Logs the error messages.
            </summary>
            <param name="customMessage">The custom message.</param>
        </member>
        <member name="M:SubSonic.TurboCompiler.LogErrorMessages(System.String,System.Exception)">
            <summary>
            Logs the error messages.
            </summary>
            <param name="customMessage">The custom message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:SubSonic.TurboCompiler.ClearErrorMessages">
            <summary>
            Clears the error messages.
            </summary>
        </member>
        <member name="P:SubSonic.TurboCompiler.Templates">
            <summary>
            Gets the templates.
            </summary>
            <value>The templates.</value>
        </member>
        <member name="P:SubSonic.TurboCompiler.CodeProvider">
            <summary>
            Gets the code provider.
            </summary>
            <value>The code provider.</value>
        </member>
        <member name="P:SubSonic.TurboCompiler.CodeCompilerParameters">
            <summary>
            Gets the code compiler parameters.
            </summary>
            <value>The code compiler parameters.</value>
        </member>
        <member name="T:SubSonic.QueryParameter">
            <summary>
            This set of classes abstracts out commands and their parameters so that
            the DataProviders can work their magic regardless of the client type. The
            System.Data.Common class was supposed to do this, but sort of fell flat
            when it came to MySQL and other DB Providers that don't implement the Data
            Factory pattern. Abstracts out the assignment of parameters, etc
            </summary>
        </member>
        <member name="P:SubSonic.QueryParameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:SubSonic.QueryParameter.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:SubSonic.QueryParameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:SubSonic.QueryParameter.ParameterValue">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <value>The parameter value.</value>
        </member>
        <member name="P:SubSonic.QueryParameter.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="T:SubSonic.QueryParameterCollection">
            <summary>
            Summary for the QueryParameterCollection class
            </summary>
        </member>
        <member name="M:SubSonic.QueryParameterCollection.Contains(System.String)">
            <summary>
            Checks to see if specified parameter exists in the current collection
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.QueryParameterCollection.GetParameter(System.String)">
            <summary>
            returns the specified QueryParameter, if it exists in this collection
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.QueryParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified parameter name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SubSonic.QueryParameterCollection.Add(System.String,System.Object,System.Data.DbType)">
            <summary>
            Adds the specified parameter name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="dataType">Type of the data.</param>
        </member>
        <member name="M:SubSonic.QueryParameterCollection.Add(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Adds the specified parameter name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="dataType">Type of the data.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:SubSonic.QueryCommandCollection">
            <summary>
            Summary for the QueryCommandCollection class
            </summary>
        </member>
        <member name="T:SubSonic.QueryCommand">
            <summary>
            Summary for the QueryCommand class
            </summary>
        </member>
        <member name="F:SubSonic.QueryCommand.OutputValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.QueryCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.QueryCommand"/> class.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.QueryCommand"/> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.HasOutputParams">
            <summary>
            Determines whether [has output params].
            </summary>
            <returns>
            	<c>true</c> if [has output params]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.QueryCommand.AddParameter(System.String,System.Object,System.Int32,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Adds the parameter. The public AddParameter methods should call this one.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="maxSize">Size of the max.</param>
            <param name="dbType">Type of the db.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddParameter(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="dataType">Type of the data.</param>
            <param name="parameterDirection">The parameter direction.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <param name="dataType">Type of the data.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddParameter(System.String,System.Object)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddOutputParameter(System.String,System.Int32,System.Data.DbType)">
            <summary>
            Adds the output parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="maxSize">Size of the max.</param>
            <param name="dbType">Type of the db.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddOutputParameter(System.String,System.Int32)">
            <summary>
            Adds the output parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="maxSize">Size of the max.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddOutputParameter(System.String)">
            <summary>
            Adds the output parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddOutputParameter(System.String,System.Data.DbType)">
            <summary>
            Adds the output parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="dbType">Type of the db.</param>
        </member>
        <member name="M:SubSonic.QueryCommand.AddReturnParameter">
            <summary>
            Adds a return parameter (RETURN_VALUE) to the command.
            </summary>
        </member>
        <member name="M:SubSonic.QueryCommand.ToIDbCommand">
            <summary>
            Converts the QueryCommand to an IDbCommand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.QueryCommand.ToDbCommand">
            <summary>
            Converts the QueryCommand to a DbCommand.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SubSonic.QueryCommand.CommandTimeout">
            <summary>
            Gets or sets the command timeout (in seconds).
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:SubSonic.QueryCommand.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.QueryCommand.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:SubSonic.QueryCommand.CommandType">
            <summary>
            Gets or sets the type of the command.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:SubSonic.QueryCommand.CommandSql">
            <summary>
            Gets or sets the command SQL.
            </summary>
            <value>The command SQL.</value>
        </member>
        <member name="P:SubSonic.QueryCommand.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:SubSonic.AggregateFunction">
            <summary>
            Enum for General SQL Functions
            </summary>
        </member>
        <member name="T:SubSonic.Comparison">
            <summary>
            SQL Comparison Operators
            </summary>
        </member>
        <member name="T:SubSonic.BetweenAnd">
            <summary>
            Summary for the BetweenAnd class
            </summary>
        </member>
        <member name="P:SubSonic.BetweenAnd.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>The start date.</value>
        </member>
        <member name="P:SubSonic.BetweenAnd.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>The end date.</value>
        </member>
        <member name="P:SubSonic.BetweenAnd.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:SubSonic.BetweenAnd.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.BetweenAnd.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:SubSonic.BetweenAnd.StartParameterName">
            <summary>
            Gets or sets the start name of the parameter.
            </summary>
            <value>The start name of the parameter.</value>
        </member>
        <member name="P:SubSonic.BetweenAnd.EndParameterName">
            <summary>
            Gets or sets the end name of the parameter.
            </summary>
            <value>The end name of the parameter.</value>
        </member>
        <member name="T:SubSonic.Where">
            <summary>
            Creates a WHERE clause for a SQL Statement
            </summary>
        </member>
        <member name="M:SubSonic.Where.ParseExpression(System.String,SubSonic.Where.WhereCondition)">
            <summary>
            Parses the expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Where.GetComparisonOperator(SubSonic.Comparison)">
            <summary>
            Gets the comparison operator.
            </summary>
            <param name="comp">The comp.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Where.GetComparisonIndex(System.String,System.String)">
            <summary>
            Gets the index of the comparison.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="searchString">The search string.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.Where.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:SubSonic.Where.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:SubSonic.Where.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:SubSonic.Where.Comparison">
            <summary>
            Gets or sets the comparison.
            </summary>
            <value>The comparison.</value>
        </member>
        <member name="P:SubSonic.Where.ParameterValue">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <value>The parameter value.</value>
        </member>
        <member name="P:SubSonic.Where.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:SubSonic.Where.DbType">
            <summary>
            Gets or sets the type of the db.
            </summary>
            <value>The type of the db.</value>
        </member>
        <member name="T:SubSonic.OrderBy">
            <summary>
            Creates an ORDER BY statement for ANSI SQL
            </summary>
        </member>
        <member name="M:SubSonic.OrderBy.TrimDirective">
            <summary>
            Trims the directive.
            </summary>
        </member>
        <member name="M:SubSonic.OrderBy.Desc(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Specifies that query will ordered by the passed column in descending order. Allows table alias to explicity set.
            This is the preferred method for specifying order. It is provider neutral and will ensure full qualification of column names.
            </summary>
            <param name="col">The col.</param>
            <param name="tableAlias">The table alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OrderBy.Desc(SubSonic.TableSchema.TableColumn)">
            <summary>
            Specifies that query will ordered by the passed column in descending order.
            This is the preferred method for specifying order. It is provider neutral and will ensure full qualification of column names.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OrderBy.Desc(System.String)">
            <summary>
            Specifies that query will ordered by the passed column in descending order.
            This method is NOT provider neutral! Pass a TableColumn instead to ensure provider-neutral unambiguous column definition.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OrderBy.Asc(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            Specifies that query will ordered by the passed column in ascending order. Allows table alias to explicity set.
            This is the preferred method for specifying order. It is provider neutral and will ensure full qualification of column names.
            </summary>
            <param name="col">The col.</param>
            <param name="tableAlias">The table alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OrderBy.Asc(SubSonic.TableSchema.TableColumn)">
            <summary>
            Specifies that query will ordered by the passed column in ascending order.
            This is the preferred method for specifying order. It is provider neutral and will ensure full qualification of column names.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OrderBy.Asc(System.String)">
            <summary>
            Specifies that query will ordered by the passed column in ascending order.
            This method is NOT provider neutral! Pass a TableColumn instead to ensure provider-neutral unambiguous column definition.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.OrderBy.PassedValue(System.String)">
            <summary>
            Passeds the value.
            </summary>
            <param name="orderByValue">The order by value.</param>
            <returns></returns>
        </member>
        <member name="P:SubSonic.OrderBy.OrderString">
            <summary>
            Gets or sets the order string.
            </summary>
            <value>The order string.</value>
        </member>
        <member name="T:SubSonic.OrderByCollection">
            <summary>
            Summary for the OrderByCollection class
            </summary>
        </member>
        <member name="T:SubSonic.Query">
            <summary>
            Creates a SQL Statement and SQL Commands
            </summary>
        </member>
        <member name="M:SubSonic.Query.GetCount(System.String)">
            <summary>
            Gets the count.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetCount(System.String,SubSonic.Where)">
            <summary>
            Gets the count.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetSum(System.String)">
            <summary>
            Gets the sum.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetSum(System.String,SubSonic.Where)">
            <summary>
            Gets the sum.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetAverage(System.String)">
            <summary>
            Gets the average.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetAverage(System.String,SubSonic.Where)">
            <summary>
            Gets the average.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetMax(System.String)">
            <summary>
            Gets the max.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetMax(System.String,SubSonic.Where)">
            <summary>
            Gets the max.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetMin(System.String)">
            <summary>
            Gets the min.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetMin(System.String,SubSonic.Where)">
            <summary>
            Gets the min.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteAggregate(System.String,System.String,System.Boolean)">
            <summary>
            Executes the aggregate.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="aggregateFunction">The aggregate function.</param>
            <param name="isDistinctQuery">if set to <c>true</c> [is distinct query].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteAggregate(System.String,SubSonic.Where,System.String,System.Boolean)">
            <summary>
            Executes the aggregate.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="where">The where.</param>
            <param name="aggregateFunction">The aggregate function.</param>
            <param name="isDistinctQuery">if set to <c>true</c> [is distinct query].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BuildTableSchema(System.String)">
            <summary>
            Builds the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BuildTableSchema(System.String,System.String)">
            <summary>
            Builds the table schema.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetComparisonOperator(SubSonic.Comparison)">
            <summary>
            Takes the enum value and returns the proper SQL
            </summary>
            <param name="comp">The Comparison enum whose SQL equivalent will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddUpdateSetting(System.String,System.Object)">
            <summary>
            Adds the update setting.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetDbType(System.String)">
            <summary>
            Gets the type of the db.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.DISTINCT">
            <summary>
            DISTINCTs this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.IN(System.String,System.Object[])">
            <summary>
            Creates an IN statement based on the passed-in object array.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listItems">The list items.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.IN(System.String,System.Collections.ArrayList)">
            <summary>
            Creates an IN list based on a passed in ArrayList
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listItems">The list items.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.IN(System.String,System.Web.UI.WebControls.ListItemCollection)">
            <summary>
            Creates an IN statement from a passed-in ListItemCollection. Only the selected list items will be included.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listItems">The list items.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.NOT_IN(System.String,System.Object[])">
            <summary>
            Creates an IN statement based on the passed-in object array.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listItems">The list items.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.NOT_IN(System.String,System.Collections.ArrayList)">
            <summary>
            Creates an IN list based on a passed in ArrayList
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listItems">The list items.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.NOT_IN(System.String,System.Web.UI.WebControls.ListItemCollection)">
            <summary>
            Creates an IN statement from a passed-in ListItemCollection. Only the selected list items will be included.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="listItems">The list items.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AND(System.String)">
            <summary>
            ANDs the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.OR(System.String)">
            <summary>
            ORs the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AND(System.String,System.Object)">
            <summary>
            ANDs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AND(System.String,SubSonic.Comparison,System.Object)">
            <summary>
            ANDs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AND(System.String,System.String,System.Object)">
            <summary>
            ANDs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AND(System.String,System.String,SubSonic.Comparison,System.Object)">
            <summary>
            ANDs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.OR(System.String,System.Object)">
            <summary>
            ORs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.OR(System.String,SubSonic.Comparison,System.Object)">
            <summary>
            ORs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.OR(System.String,System.String,System.Object)">
            <summary>
            ORs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.OR(System.String,System.String,SubSonic.Comparison,System.Object)">
            <summary>
            ORs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String)">
            <summary>
            WHEREs the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String,System.Object)">
            <summary>
            WHEREs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String,System.String,System.Object)">
            <summary>
            WHEREs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String,SubSonic.Comparison,System.Object)">
            <summary>
            WHEREs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String,SubSonic.IConstraint)">
            <summary>
            WHEREs the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String,System.String,SubSonic.Comparison,System.Object)">
            <summary>
            WHEREs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String,System.String,System.String,SubSonic.Comparison,System.Object)">
            <summary>
            WHEREs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.WHERE(System.String,System.String,System.String,SubSonic.Comparison,System.Object,SubSonic.Where.WhereCondition)">
            <summary>
            WHEREs the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ORDER_BY(SubSonic.TableSchema.TableColumn)">
            <summary>
            ORDEs the r_ BY.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ORDER_BY(SubSonic.TableSchema.TableColumn,System.String)">
            <summary>
            ORDEs the r_ BY.
            </summary>
            <param name="col">The col.</param>
            <param name="sortDirection">The sort direction.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ORDER_BY(SubSonic.TableSchema.TableColumn,System.String,System.String)">
            <summary>
            ORDEs the r_ BY.
            </summary>
            <param name="col">The col.</param>
            <param name="sortDirection">The sort direction.</param>
            <param name="tableAlias">The table alias.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ORDER_BY(System.String)">
            <summary>
            ORDEs the r_ BY.
            </summary>
            <param name="orderExpression">The order expression.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ORDER_BY(System.String,System.String)">
            <summary>
            ORDEs the r_ BY.
            </summary>
            <param name="orderExpression">The order expression.</param>
            <param name="sortDirection">The sort direction.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddQueryToCollection(SubSonic.OrderBy)">
            <summary>
            Adds the query to collection.
            </summary>
            <param name="orderBy">The order by.</param>
        </member>
        <member name="M:SubSonic.Query.OR_BETWEEN_AND(System.String,System.String,System.String)">
            <summary>
            Os the r_ BETWEE n_ AND.
            </summary>
            <param name="columName">Name of the colum.</param>
            <param name="dateTimeStart">The date time start.</param>
            <param name="dateTimeEnd">The date time end.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BETWEEN_AND(System.String,System.String,System.String)">
            <summary>
            BETWEEs the n_ AND.
            </summary>
            <param name="columName">Name of the colum.</param>
            <param name="dateTimeStart">The date time start.</param>
            <param name="dateTimeEnd">The date time end.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.OR_BETWEEN_AND(System.String,System.DateTime,System.DateTime)">
            <summary>
            Os the r_ BETWEE n_ AND.
            </summary>
            <param name="columName">Name of the colum.</param>
            <param name="dateStart">The date start.</param>
            <param name="dateEnd">The date end.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BETWEEN_AND(System.String,System.DateTime,System.DateTime)">
            <summary>
            BETWEEs the n_ AND.
            </summary>
            <param name="columName">Name of the colum.</param>
            <param name="dateStart">The date start.</param>
            <param name="dateEnd">The date end.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BETWEEN_AND(System.String,System.String,System.DateTime,System.DateTime,SubSonic.Where.WhereCondition)">
            <summary>
            BETWEEs the n_ AND.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columName">Name of the colum.</param>
            <param name="dateStart">The date start.</param>
            <param name="dateEnd">The date end.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BETWEEN_VALUES(System.String,System.Object,System.Object)">
            <summary>
            BETWEEs the n_ VALUES.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddBetweenValues(System.String,System.Object,System.Object)">
            <summary>
            Adds the between values.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddWhere(SubSonic.Where)">
            <summary>
            Adds the where.
            </summary>
            <param name="where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddWhere(System.String,System.Object)">
            <summary>
            Adds the where.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddWhere(System.String,System.String,System.Object)">
            <summary>
            Adds the where.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddWhere(System.String,SubSonic.Comparison,System.Object)">
            <summary>
            Adds the where.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddWhere(System.String,System.String,SubSonic.Comparison,System.Object)">
            <summary>
            Adds the where.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddWhere(System.String,System.String,System.String,SubSonic.Comparison,System.Object)">
            <summary>
            Adds the where.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddWhere(System.String,System.String,System.String,SubSonic.Comparison,System.Object,SubSonic.Where.WhereCondition)">
            <summary>
            Adds the where.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="columnName">Name of the column.</param>
            <param name="comp">The comp.</param>
            <param name="paramValue">The param value.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddBetweenAnd(System.String,System.DateTime,System.DateTime)">
            <summary>
            Adds the between and.
            </summary>
            <param name="columName">Name of the colum.</param>
            <param name="dateStart">The date start.</param>
            <param name="dateEnd">The date end.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddBetweenAnd(System.String,System.String,System.DateTime,System.DateTime,SubSonic.Where.WhereCondition)">
            <summary>
            Adds the between and.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columName">Name of the colum.</param>
            <param name="dateStart">The date start.</param>
            <param name="dateEnd">The date end.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddBetweenAnd(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Adds the between and.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columName">Name of the colum.</param>
            <param name="dateStart">The date start.</param>
            <param name="dateEnd">The date end.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.AddBetweenAnd(SubSonic.BetweenAnd)">
            <summary>
            Adds the between and.
            </summary>
            <param name="between">The between.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BuildSelectCommand">
            <summary>
            Creates a SELECT command based on the Query object's settings.
            If you need a more complex query you should consider using a Stored Procedure
            </summary>
            <returns>System.Data.Common.SqlCommand</returns>
        </member>
        <member name="M:SubSonic.Query.BuildDeleteCommand">
            <summary>
            Builds a Delete command based on a give WHERE condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BuildUpdateCommand">
            <summary>
            Builds an update query for this table with the passed-in hash values
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.BuildCommand">
            <summary>
            Builds an query for this table based on the QueryType
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetSql">
            <summary>
            Returns the SQL generated for this command
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.Inspect">
            <summary>
            Inspects this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.GetRecordCount">
            <summary>
            Returns the number of records matching the current query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteReader">
            <summary>
            Returns an IDataReader using the passed-in command
            </summary>
            <returns>IDataReader</returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteDataSet">
            <summary>
            Returns a DataSet based on the passed-in command
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteDataSet``1">
            <summary>
            Executes the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteJoinedDataSet">
            <summary>
            Returns a DataSet based on the passed-in command
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteJoinedDataSet``1">
            <summary>
            Executes the joined data set.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.ExecuteScalar">
            <summary>
            Returns a scalar object based on the passed-in command
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.Execute">
            <summary>
            Executes a pass-through query on the DB
            </summary>
        </member>
        <member name="M:SubSonic.Query.GetCommand">
            <summary>
            Gets the command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.CheckLogicalDelete">
            <summary>
            Adjusts the where query if the affected table contains a logical delete column.
            </summary>
        </member>
        <member name="F:SubSonic.Query.betweens">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Query.columns">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Query.inColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Query.inList">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Query.notInColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Query.notInList">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Query.wheres">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Query.SetSelectList(System.String)">
            <summary>
            Sets the select list.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.SetTop(System.String)">
            <summary>
            Sets the top.
            </summary>
            <param name="tops">The tops.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Query.#ctor(System.String)">
            <summary>
            Builds the internal schema structure by querying the database for the given table name as
            part of the query process.
            WARNING: This method incurs more overhead than Query(TableSchema.Table).
            It is HIGHLY recommended that if possible, you pass a Schema to Query() instead.
            </summary>
            <param name="tableName">The name of the table that the database will be queried for.</param>
        </member>
        <member name="M:SubSonic.Query.#ctor(System.String,System.String)">
            <summary>
            Builds the internal schema structure by querying the database for the given table name as
            part of the query process.
            WARNING: This method incurs more overhead than Query(TableSchema.Table).
            It is HIGHLY recommended that if possible, you pass a Schema to Query() instead.
            </summary>
            <param name="tableName">The name of the table that the database will be queried for.</param>
            <param name="providerName">The provider used for this query.</param>
        </member>
        <member name="M:SubSonic.Query.#ctor(SubSonic.TableSchema.Table)">
            <summary>
            Executes a query by deriving parameters from the passed schema.
            This is the fastest and most efficient way to execute a query.
            It is HIGHLY recommended that you use this method instead of Query(string tableName)
            </summary>
            <param name="tbl">The table schema that will be used to derive parameters for the query</param>
        </member>
        <member name="M:SubSonic.Query.#ctor(SubSonic.TableSchema.Table,SubSonic.TableSchema.TableColumn[])">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Query"/> class.
            </summary>
            <param name="primaryTable">The primary table.</param>
            <param name="cols">The cols.</param>
        </member>
        <member name="M:SubSonic.Query.SetLists">
            <summary>
            Sets the lists.
            </summary>
        </member>
        <member name="P:SubSonic.Query.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:SubSonic.Query.UpdateSettings">
            <summary>
            Gets the update settings.
            </summary>
            <value>The update settings.</value>
        </member>
        <member name="P:SubSonic.Query.CommandTimeout">
            <summary>
            Connection timeout in seconds. For you Phil...
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:SubSonic.Query.IsDistinct">
            <summary>
            Gets or sets a value indicating whether this instance is distinct.
            </summary>
            <value>
            	<c>true</c> if this instance is distinct; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SubSonic.Query.PageSize">
            <summary>
            Controls the number of records returned when paging.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:SubSonic.Query.PageIndex">
            <summary>
            Returns a particular page. Index is zero based. -1 (default) returns all results
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:SubSonic.Query.QueryType">
            <summary>
            Gets or sets the type of the query.
            </summary>
            <value>The type of the query.</value>
        </member>
        <member name="P:SubSonic.Query.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:SubSonic.Query.SelectList">
            <summary>
            Gets or sets the select list.
            </summary>
            <value>The select list.</value>
        </member>
        <member name="P:SubSonic.Query.OrderBy">
            <summary>
            Gets or sets the order by.
            </summary>
            <value>The order by.</value>
        </member>
        <member name="P:SubSonic.Query.OrderByCollection">
            <summary>
            Gets or sets the order by collection.
            </summary>
            <value>The order by collection.</value>
        </member>
        <member name="P:SubSonic.Query.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:SubSonic.Query.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:SubSonic.Query.AliasForeignKeys">
            <summary>
            Gets or sets a value indicating whether foreign keys should be aliased when constructing queries.
            </summary>
            <value><c>true</c> if they should be aliased; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SubSonic.Query.LogicalDeleteColumn">
            <summary>
            Gets or sets the logical delete column.
            </summary>
            <value>The logical delete column.</value>
        </member>
        <member name="T:SubSonic.UpdateQuery">
            <summary>
            Summary for the UpdateQuery class
            </summary>
        </member>
        <member name="M:SubSonic.UpdateQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.UpdateQuery"/> class.
            </summary>
            <param name="tableName">The name of the table that the database will be queried for.</param>
        </member>
        <member name="M:SubSonic.UpdateQuery.#ctor(SubSonic.TableSchema.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.UpdateQuery"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="T:SubSonic.DeleteQuery">
            <summary>
            Summary for the DeleteQuery class
            </summary>
        </member>
        <member name="M:SubSonic.DeleteQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.DeleteQuery"/> class.
            </summary>
            <param name="tableName">The name of the table that the database will be queried for.</param>
        </member>
        <member name="M:SubSonic.DeleteQuery.#ctor(SubSonic.TableSchema.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.DeleteQuery"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="T:SubSonic.Sql2005Generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Sql2005Generator.#ctor(SubSonic.SqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Sql2005Generator"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="T:SubSonic.Inflector">
            <summary>
            Summary for the Inflector class
            </summary>
        </member>
        <member name="M:SubSonic.Inflector.#cctor">
            <summary>
            Initializes the <see cref="T:SubSonic.Inflector"/> class.
            </summary>
        </member>
        <member name="M:SubSonic.Inflector.AddIrregularRule(System.String,System.String)">
            <summary>
            Adds the irregular rule.
            </summary>
            <param name="singular">The singular.</param>
            <param name="plural">The plural.</param>
        </member>
        <member name="M:SubSonic.Inflector.AddUnknownCountRule(System.String)">
            <summary>
            Adds the unknown count rule.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="M:SubSonic.Inflector.AddPluralRule(System.String,System.String)">
            <summary>
            Adds the plural rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:SubSonic.Inflector.AddSingularRule(System.String,System.String)">
            <summary>
            Adds the singular rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:SubSonic.Inflector.MakePlural(System.String)">
            <summary>
            Makes the plural.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.MakeSingular(System.String)">
            <summary>
            Makes the singular.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.ApplyRules(System.Collections.Generic.IList{SubSonic.Inflector.InflectorRule},System.String)">
            <summary>
            Applies the rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.ToTitleCase(System.String)">
            <summary>
            Converts the string to title case.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.ToHumanCase(System.String)">
            <summary>
            Converts the string to human case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.ToPascalCase(System.String)">
            <summary>
            Converts the string to pascal case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.ToPascalCase(System.String,System.Boolean)">
            <summary>
            Converts text to pascal case...
            </summary>
            <param name="text">The text.</param>
            <param name="removeUnderscores">if set to <c>true</c> [remove underscores].</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.ToCamelCase(System.String)">
            <summary>
            Converts the string to camel case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.AddUnderscores(System.String)">
            <summary>
            Adds the underscores.
            </summary>
            <param name="pascalCasedWord">The pascal cased word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.MakeInitialCaps(System.String)">
            <summary>
            Makes the initial caps.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.MakeInitialLowerCase(System.String)">
            <summary>
            Makes the initial lower case.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.AddOrdinalSuffix(System.String)">
            <summary>
            Adds the ordinal suffix.
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Inflector.ConvertUnderscoresToDashes(System.String)">
            <summary>
            Converts the underscores to dashes.
            </summary>
            <param name="underscoredWord">The underscored word.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.Inflector.InflectorRule">
            <summary>
            Summary for the InflectorRule class
            </summary>
        </member>
        <member name="F:SubSonic.Inflector.InflectorRule.regex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SubSonic.Inflector.InflectorRule.replacement">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Inflector.InflectorRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Inflector.InflectorRule"/> class.
            </summary>
            <param name="regexPattern">The regex pattern.</param>
            <param name="replacementText">The replacement text.</param>
        </member>
        <member name="M:SubSonic.Inflector.InflectorRule.Apply(System.String)">
            <summary>
            Applies the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.Setting">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Setting.EqualTo(System.Object)">
            <summary>
            Equals to.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Update.#ctor(SubSonic.TableSchema.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Update"/> class.
            </summary>
            <param name="tbl">The TBL.</param>
        </member>
        <member name="M:SubSonic.Update.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Update"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SubSonic.Update.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.Update"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:SubSonic.Update.Set(System.String)">
            <summary>
            Sets the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Update.Set(SubSonic.TableSchema.TableColumn)">
            <summary>
            Sets the specified col.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Update.SetExpression(System.String)">
            <summary>
            Sets the expression.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Update.SetExpression(SubSonic.TableSchema.TableColumn)">
            <summary>
            Sets the expression.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.Migration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.Migration.GetCurrentVersion(System.String)">
            <summary>
            Gets the current version.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.Migration.IncrementVersion(System.String)">
            <summary>
            Increments the version.
            </summary>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:SubSonic.Migration.DecrementVersion(System.String)">
            <summary>
            Decrements the version.
            </summary>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:SubSonic.Migration.Up">
            <summary>
            Ups this instance.
            </summary>
        </member>
        <member name="M:SubSonic.Migration.Down">
            <summary>
            Downs this instance.
            </summary>
        </member>
        <member name="T:SubSonic.ELib3DataProvider">
            <summary>
            Summary for the ELib3DataProvider class
            </summary>
        </member>
        <member name="M:SubSonic.ELib3DataProvider.GetReader(SubSonic.QueryCommand)">
            <summary>
            Gets the reader.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ELib3DataProvider.GetDataSetCommand(Microsoft.Practices.EnterpriseLibrary.Data.Database,SubSonic.QueryCommand)">
            <summary>
            Gets the data set command.
            </summary>
            <param name="db">The db.</param>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ELib3DataProvider.GetDataSet``1(SubSonic.QueryCommand)">
            <summary>
            Gets the data set.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ELib3DataProvider.ExecuteScalar(SubSonic.QueryCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ELib3DataProvider.ExecuteTransaction(SubSonic.QueryCommandCollection)">
            <summary>
            Executes a transaction using the passed-commands
            </summary>
            <param name="commands"></param>
        </member>
        <member name="M:SubSonic.ELib3DataProvider.GetDbCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the db command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.ELib3DataProvider.GetCommand(SubSonic.QueryCommand)">
            <summary>
            Gets the command.
            </summary>
            <param name="qry">The qry.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.ELib2DataProvider">
            <summary>
            This is class is for backwards compatibility only. Please update your references to ELib3DataProvider
            </summary>
        </member>
    </members>
</doc>
