// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPreferences(t *testing.T) {
	t.Parallel()

	query := Preferences(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPreferencesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = preference.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPreferencesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Preferences(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPreferencesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PreferenceSlice{preference}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPreferencesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PreferenceExists(tx, preference.Index)
	if err != nil {
		t.Errorf("Unable to check if Preference exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PreferenceExistsG to return true, but got false.")
	}
}
func testPreferencesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	preferenceFound, err := FindPreference(tx, preference.Index)
	if err != nil {
		t.Error(err)
	}

	if preferenceFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPreferencesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Preferences(tx).Bind(preference); err != nil {
		t.Error(err)
	}
}

func testPreferencesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Preferences(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPreferencesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preferenceOne := &Preference{}
	preferenceTwo := &Preference{}
	if err = randomize.Struct(seed, preferenceOne, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}
	if err = randomize.Struct(seed, preferenceTwo, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preferenceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = preferenceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Preferences(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPreferencesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	preferenceOne := &Preference{}
	preferenceTwo := &Preference{}
	if err = randomize.Struct(seed, preferenceOne, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}
	if err = randomize.Struct(seed, preferenceTwo, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preferenceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = preferenceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func preferenceBeforeInsertHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterInsertHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterSelectHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceBeforeUpdateHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterUpdateHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceBeforeDeleteHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterDeleteHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceBeforeUpsertHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterUpsertHook(e boil.Executor, o *Preference) error {
	*o = Preference{}
	return nil
}

func testPreferencesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Preference{}
	o := &Preference{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, preferenceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Preference object: %s", err)
	}

	AddPreferenceHook(boil.BeforeInsertHook, preferenceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeInsertHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterInsertHook, preferenceAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	preferenceAfterInsertHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterSelectHook, preferenceAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	preferenceAfterSelectHooks = []PreferenceHook{}

	AddPreferenceHook(boil.BeforeUpdateHook, preferenceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeUpdateHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterUpdateHook, preferenceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	preferenceAfterUpdateHooks = []PreferenceHook{}

	AddPreferenceHook(boil.BeforeDeleteHook, preferenceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeDeleteHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterDeleteHook, preferenceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	preferenceAfterDeleteHooks = []PreferenceHook{}

	AddPreferenceHook(boil.BeforeUpsertHook, preferenceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeUpsertHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterUpsertHook, preferenceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	preferenceAfterUpsertHooks = []PreferenceHook{}
}
func testPreferencesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPreferencesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx, preferenceColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPreferencesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = preference.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPreferencesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PreferenceSlice{preference}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPreferencesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Preferences(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	preferenceDBTypes = map[string]string{`Index`: `int`, `NumPerPage`: `int`, `SkinID`: `int`, `UserID`: `int`, `UserLogo`: `int`}
	_                 = bytes.MinRead
)

func testPreferencesUpdate(t *testing.T) {
	t.Parallel()

	if len(preferenceColumns) == len(preferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	if err = preference.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPreferencesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(preferenceColumns) == len(preferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	preference := &Preference{}
	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, preference, preferenceDBTypes, true, preferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(preferenceColumns, preferencePrimaryKeyColumns) {
		fields = preferenceColumns
	} else {
		fields = strmangle.SetComplement(
			preferenceColumns,
			preferencePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(preference))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PreferenceSlice{preference}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPreferencesUpsert(t *testing.T) {
	t.Parallel()

	if len(preferenceColumns) == len(preferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	preference := Preference{}
	if err = randomize.Struct(seed, &preference, preferenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = preference.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Preference: %s", err)
	}

	count, err := Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &preference, preferenceDBTypes, false, preferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	if err = preference.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Preference: %s", err)
	}

	count, err = Preferences(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
