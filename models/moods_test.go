// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testMoods(t *testing.T) {
	t.Parallel()

	query := Moods(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testMoodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = mood.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMoodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Moods(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMoodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MoodSlice{mood}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testMoodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MoodExists(tx, mood.ID)
	if err != nil {
		t.Errorf("Unable to check if Mood exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MoodExistsG to return true, but got false.")
	}
}
func testMoodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	moodFound, err := FindMood(tx, mood.ID)
	if err != nil {
		t.Error(err)
	}

	if moodFound == nil {
		t.Error("want a record, got nil")
	}
}
func testMoodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Moods(tx).Bind(mood); err != nil {
		t.Error(err)
	}
}

func testMoodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Moods(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMoodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	moodOne := &Mood{}
	moodTwo := &Mood{}
	if err = randomize.Struct(seed, moodOne, moodDBTypes, false, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}
	if err = randomize.Struct(seed, moodTwo, moodDBTypes, false, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = moodOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = moodTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Moods(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMoodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	moodOne := &Mood{}
	moodTwo := &Mood{}
	if err = randomize.Struct(seed, moodOne, moodDBTypes, false, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}
	if err = randomize.Struct(seed, moodTwo, moodDBTypes, false, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = moodOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = moodTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func moodBeforeInsertHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodAfterInsertHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodAfterSelectHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodBeforeUpdateHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodAfterUpdateHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodBeforeDeleteHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodAfterDeleteHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodBeforeUpsertHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func moodAfterUpsertHook(e boil.Executor, o *Mood) error {
	*o = Mood{}
	return nil
}

func testMoodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Mood{}
	o := &Mood{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, moodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Mood object: %s", err)
	}

	AddMoodHook(boil.BeforeInsertHook, moodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	moodBeforeInsertHooks = []MoodHook{}

	AddMoodHook(boil.AfterInsertHook, moodAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	moodAfterInsertHooks = []MoodHook{}

	AddMoodHook(boil.AfterSelectHook, moodAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	moodAfterSelectHooks = []MoodHook{}

	AddMoodHook(boil.BeforeUpdateHook, moodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	moodBeforeUpdateHooks = []MoodHook{}

	AddMoodHook(boil.AfterUpdateHook, moodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	moodAfterUpdateHooks = []MoodHook{}

	AddMoodHook(boil.BeforeDeleteHook, moodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	moodBeforeDeleteHooks = []MoodHook{}

	AddMoodHook(boil.AfterDeleteHook, moodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	moodAfterDeleteHooks = []MoodHook{}

	AddMoodHook(boil.BeforeUpsertHook, moodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	moodBeforeUpsertHooks = []MoodHook{}

	AddMoodHook(boil.AfterUpsertHook, moodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	moodAfterUpsertHooks = []MoodHook{}
}
func testMoodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMoodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx, moodColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMoodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = mood.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMoodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MoodSlice{mood}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testMoodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Moods(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	moodDBTypes = map[string]string{`BloggerCount`: `int`, `ID`: `int`, `Mood`: `varchar`}
	_           = bytes.MinRead
)

func testMoodsUpdate(t *testing.T) {
	t.Parallel()

	if len(moodColumns) == len(moodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	if err = mood.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMoodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(moodColumns) == len(moodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	mood := &Mood{}
	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, mood, moodDBTypes, true, moodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(moodColumns, moodPrimaryKeyColumns) {
		fields = moodColumns
	} else {
		fields = strmangle.SetComplement(
			moodColumns,
			moodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(mood))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MoodSlice{mood}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testMoodsUpsert(t *testing.T) {
	t.Parallel()

	if len(moodColumns) == len(moodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	mood := Mood{}
	if err = randomize.Struct(seed, &mood, moodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mood.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Mood: %s", err)
	}

	count, err := Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &mood, moodDBTypes, false, moodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Mood struct: %s", err)
	}

	if err = mood.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Mood: %s", err)
	}

	count, err = Moods(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
