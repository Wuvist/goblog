// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Preference is an object representing the database table.
type Preference struct {
	Index      int      `boil:"index" json:"index" toml:"index" yaml:"index"`
	UserID     int      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	SkinID     int      `boil:"skin_id" json:"skin_id" toml:"skin_id" yaml:"skin_id"`
	UserLogo   null.Int `boil:"user_logo" json:"user_logo,omitempty" toml:"user_logo" yaml:"user_logo,omitempty"`
	NumPerPage int      `boil:"num_per_page" json:"num_per_page" toml:"num_per_page" yaml:"num_per_page"`

	R *preferenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L preferenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PreferenceColumns = struct {
	Index      string
	UserID     string
	SkinID     string
	UserLogo   string
	NumPerPage string
}{
	Index:      "index",
	UserID:     "user_id",
	SkinID:     "skin_id",
	UserLogo:   "user_logo",
	NumPerPage: "num_per_page",
}

// preferenceR is where relationships are stored.
type preferenceR struct {
}

// preferenceL is where Load methods for each relationship are stored.
type preferenceL struct{}

var (
	preferenceColumns               = []string{"index", "user_id", "skin_id", "user_logo", "num_per_page"}
	preferenceColumnsWithoutDefault = []string{"user_id", "user_logo", "num_per_page"}
	preferenceColumnsWithDefault    = []string{"index", "skin_id"}
	preferencePrimaryKeyColumns     = []string{"index"}
)

type (
	// PreferenceSlice is an alias for a slice of pointers to Preference.
	// This should generally be used opposed to []Preference.
	PreferenceSlice []*Preference
	// PreferenceHook is the signature for custom Preference hook methods
	PreferenceHook func(boil.Executor, *Preference) error

	preferenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	preferenceType                 = reflect.TypeOf(&Preference{})
	preferenceMapping              = queries.MakeStructMapping(preferenceType)
	preferencePrimaryKeyMapping, _ = queries.BindMapping(preferenceType, preferenceMapping, preferencePrimaryKeyColumns)
	preferenceInsertCacheMut       sync.RWMutex
	preferenceInsertCache          = make(map[string]insertCache)
	preferenceUpdateCacheMut       sync.RWMutex
	preferenceUpdateCache          = make(map[string]updateCache)
	preferenceUpsertCacheMut       sync.RWMutex
	preferenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var preferenceBeforeInsertHooks []PreferenceHook
var preferenceBeforeUpdateHooks []PreferenceHook
var preferenceBeforeDeleteHooks []PreferenceHook
var preferenceBeforeUpsertHooks []PreferenceHook

var preferenceAfterInsertHooks []PreferenceHook
var preferenceAfterSelectHooks []PreferenceHook
var preferenceAfterUpdateHooks []PreferenceHook
var preferenceAfterDeleteHooks []PreferenceHook
var preferenceAfterUpsertHooks []PreferenceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Preference) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Preference) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Preference) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Preference) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Preference) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Preference) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Preference) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Preference) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Preference) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range preferenceAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPreferenceHook registers your hook function for all future operations.
func AddPreferenceHook(hookPoint boil.HookPoint, preferenceHook PreferenceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		preferenceBeforeInsertHooks = append(preferenceBeforeInsertHooks, preferenceHook)
	case boil.BeforeUpdateHook:
		preferenceBeforeUpdateHooks = append(preferenceBeforeUpdateHooks, preferenceHook)
	case boil.BeforeDeleteHook:
		preferenceBeforeDeleteHooks = append(preferenceBeforeDeleteHooks, preferenceHook)
	case boil.BeforeUpsertHook:
		preferenceBeforeUpsertHooks = append(preferenceBeforeUpsertHooks, preferenceHook)
	case boil.AfterInsertHook:
		preferenceAfterInsertHooks = append(preferenceAfterInsertHooks, preferenceHook)
	case boil.AfterSelectHook:
		preferenceAfterSelectHooks = append(preferenceAfterSelectHooks, preferenceHook)
	case boil.AfterUpdateHook:
		preferenceAfterUpdateHooks = append(preferenceAfterUpdateHooks, preferenceHook)
	case boil.AfterDeleteHook:
		preferenceAfterDeleteHooks = append(preferenceAfterDeleteHooks, preferenceHook)
	case boil.AfterUpsertHook:
		preferenceAfterUpsertHooks = append(preferenceAfterUpsertHooks, preferenceHook)
	}
}

// OneP returns a single preference record from the query, and panics on error.
func (q preferenceQuery) OneP() *Preference {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single preference record from the query.
func (q preferenceQuery) One() (*Preference, error) {
	o := &Preference{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for preference")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Preference records from the query, and panics on error.
func (q preferenceQuery) AllP() PreferenceSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Preference records from the query.
func (q preferenceQuery) All() (PreferenceSlice, error) {
	var o []*Preference

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Preference slice")
	}

	if len(preferenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Preference records in the query, and panics on error.
func (q preferenceQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Preference records in the query.
func (q preferenceQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count preference rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q preferenceQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q preferenceQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if preference exists")
	}

	return count > 0, nil
}

// PreferencesG retrieves all records.
func PreferencesG(mods ...qm.QueryMod) preferenceQuery {
	return Preferences(boil.GetDB(), mods...)
}

// Preferences retrieves all the records using an executor.
func Preferences(exec boil.Executor, mods ...qm.QueryMod) preferenceQuery {
	mods = append(mods, qm.From("`preference`"))
	return preferenceQuery{NewQuery(exec, mods...)}
}

// FindPreferenceG retrieves a single record by ID.
func FindPreferenceG(index int, selectCols ...string) (*Preference, error) {
	return FindPreference(boil.GetDB(), index, selectCols...)
}

// FindPreferenceGP retrieves a single record by ID, and panics on error.
func FindPreferenceGP(index int, selectCols ...string) *Preference {
	retobj, err := FindPreference(boil.GetDB(), index, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPreference retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPreference(exec boil.Executor, index int, selectCols ...string) (*Preference, error) {
	preferenceObj := &Preference{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `preference` where `index`=?", sel,
	)

	q := queries.Raw(exec, query, index)

	err := q.Bind(preferenceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from preference")
	}

	return preferenceObj, nil
}

// FindPreferenceP retrieves a single record by ID with an executor, and panics on error.
func FindPreferenceP(exec boil.Executor, index int, selectCols ...string) *Preference {
	retobj, err := FindPreference(exec, index, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Preference) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Preference) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Preference) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Preference) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no preference provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preferenceColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	preferenceInsertCacheMut.RLock()
	cache, cached := preferenceInsertCache[key]
	preferenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			preferenceColumns,
			preferenceColumnsWithDefault,
			preferenceColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(preferenceType, preferenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(preferenceType, preferenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `preference` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `preference` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `preference` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, preferencePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into preference")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Index = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == preferenceMapping["Index"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Index,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for preference")
	}

CacheNoHooks:
	if !cached {
		preferenceInsertCacheMut.Lock()
		preferenceInsertCache[key] = cache
		preferenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Preference record. See Update for
// whitelist behavior description.
func (o *Preference) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Preference record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Preference) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Preference, and panics on error.
// See Update for whitelist behavior description.
func (o *Preference) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Preference.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Preference) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	preferenceUpdateCacheMut.RLock()
	cache, cached := preferenceUpdateCache[key]
	preferenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			preferenceColumns,
			preferencePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update preference, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `preference` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, preferencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(preferenceType, preferenceMapping, append(wl, preferencePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update preference row")
	}

	if !cached {
		preferenceUpdateCacheMut.Lock()
		preferenceUpdateCache[key] = cache
		preferenceUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q preferenceQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q preferenceQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for preference")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PreferenceSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PreferenceSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PreferenceSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PreferenceSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `preference` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, preferencePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in preference slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Preference) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Preference) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Preference) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Preference) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no preference provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preferenceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	preferenceUpsertCacheMut.RLock()
	cache, cached := preferenceUpsertCache[key]
	preferenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			preferenceColumns,
			preferenceColumnsWithDefault,
			preferenceColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			preferenceColumns,
			preferencePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert preference, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "preference", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `preference` WHERE `index`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(preferenceType, preferenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(preferenceType, preferenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for preference")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Index = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == preferenceMapping["Index"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Index,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for preference")
	}

CacheNoHooks:
	if !cached {
		preferenceUpsertCacheMut.Lock()
		preferenceUpsertCache[key] = cache
		preferenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Preference record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Preference) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Preference record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Preference) DeleteG() error {
	if o == nil {
		return errors.New("models: no Preference provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Preference record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Preference) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Preference record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Preference) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Preference provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), preferencePrimaryKeyMapping)
	sql := "DELETE FROM `preference` WHERE `index`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from preference")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q preferenceQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q preferenceQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no preferenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from preference")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PreferenceSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PreferenceSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Preference slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PreferenceSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PreferenceSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Preference slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(preferenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `preference` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, preferencePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from preference slice")
	}

	if len(preferenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Preference) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Preference) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Preference) ReloadG() error {
	if o == nil {
		return errors.New("models: no Preference provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Preference) Reload(exec boil.Executor) error {
	ret, err := FindPreference(exec, o.Index)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PreferenceSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PreferenceSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PreferenceSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PreferenceSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PreferenceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	preferences := PreferenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `preference`.* FROM `preference` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, preferencePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&preferences)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PreferenceSlice")
	}

	*o = preferences

	return nil
}

// PreferenceExists checks if the Preference row exists.
func PreferenceExists(exec boil.Executor, index int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `preference` where `index`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, index)
	}

	row := exec.QueryRow(sql, index)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if preference exists")
	}

	return exists, nil
}

// PreferenceExistsG checks if the Preference row exists.
func PreferenceExistsG(index int) (bool, error) {
	return PreferenceExists(boil.GetDB(), index)
}

// PreferenceExistsGP checks if the Preference row exists. Panics on error.
func PreferenceExistsGP(index int) bool {
	e, err := PreferenceExists(boil.GetDB(), index)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PreferenceExistsP checks if the Preference row exists. Panics on error.
func PreferenceExistsP(exec boil.Executor, index int) bool {
	e, err := PreferenceExists(exec, index)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
