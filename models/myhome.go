// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Myhome is an object representing the database table.
type Myhome struct {
	Mid     int    `boil:"mid" json:"mid" toml:"mid" yaml:"mid"`
	Blogger int    `boil:"blogger" json:"blogger" toml:"blogger" yaml:"blogger"`
	Pos     string `boil:"pos" json:"pos" toml:"pos" yaml:"pos"`
	Tag     int    `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`

	R *myhomeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L myhomeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MyhomeColumns = struct {
	Mid     string
	Blogger string
	Pos     string
	Tag     string
}{
	Mid:     "mid",
	Blogger: "blogger",
	Pos:     "pos",
	Tag:     "tag",
}

// myhomeR is where relationships are stored.
type myhomeR struct {
}

// myhomeL is where Load methods for each relationship are stored.
type myhomeL struct{}

var (
	myhomeColumns               = []string{"mid", "blogger", "pos", "tag"}
	myhomeColumnsWithoutDefault = []string{"blogger", "tag"}
	myhomeColumnsWithDefault    = []string{"mid", "pos"}
	myhomePrimaryKeyColumns     = []string{"mid"}
)

type (
	// MyhomeSlice is an alias for a slice of pointers to Myhome.
	// This should generally be used opposed to []Myhome.
	MyhomeSlice []*Myhome
	// MyhomeHook is the signature for custom Myhome hook methods
	MyhomeHook func(boil.Executor, *Myhome) error

	myhomeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	myhomeType                 = reflect.TypeOf(&Myhome{})
	myhomeMapping              = queries.MakeStructMapping(myhomeType)
	myhomePrimaryKeyMapping, _ = queries.BindMapping(myhomeType, myhomeMapping, myhomePrimaryKeyColumns)
	myhomeInsertCacheMut       sync.RWMutex
	myhomeInsertCache          = make(map[string]insertCache)
	myhomeUpdateCacheMut       sync.RWMutex
	myhomeUpdateCache          = make(map[string]updateCache)
	myhomeUpsertCacheMut       sync.RWMutex
	myhomeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var myhomeBeforeInsertHooks []MyhomeHook
var myhomeBeforeUpdateHooks []MyhomeHook
var myhomeBeforeDeleteHooks []MyhomeHook
var myhomeBeforeUpsertHooks []MyhomeHook

var myhomeAfterInsertHooks []MyhomeHook
var myhomeAfterSelectHooks []MyhomeHook
var myhomeAfterUpdateHooks []MyhomeHook
var myhomeAfterDeleteHooks []MyhomeHook
var myhomeAfterUpsertHooks []MyhomeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Myhome) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Myhome) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Myhome) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Myhome) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Myhome) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Myhome) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Myhome) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Myhome) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Myhome) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range myhomeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMyhomeHook registers your hook function for all future operations.
func AddMyhomeHook(hookPoint boil.HookPoint, myhomeHook MyhomeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		myhomeBeforeInsertHooks = append(myhomeBeforeInsertHooks, myhomeHook)
	case boil.BeforeUpdateHook:
		myhomeBeforeUpdateHooks = append(myhomeBeforeUpdateHooks, myhomeHook)
	case boil.BeforeDeleteHook:
		myhomeBeforeDeleteHooks = append(myhomeBeforeDeleteHooks, myhomeHook)
	case boil.BeforeUpsertHook:
		myhomeBeforeUpsertHooks = append(myhomeBeforeUpsertHooks, myhomeHook)
	case boil.AfterInsertHook:
		myhomeAfterInsertHooks = append(myhomeAfterInsertHooks, myhomeHook)
	case boil.AfterSelectHook:
		myhomeAfterSelectHooks = append(myhomeAfterSelectHooks, myhomeHook)
	case boil.AfterUpdateHook:
		myhomeAfterUpdateHooks = append(myhomeAfterUpdateHooks, myhomeHook)
	case boil.AfterDeleteHook:
		myhomeAfterDeleteHooks = append(myhomeAfterDeleteHooks, myhomeHook)
	case boil.AfterUpsertHook:
		myhomeAfterUpsertHooks = append(myhomeAfterUpsertHooks, myhomeHook)
	}
}

// OneP returns a single myhome record from the query, and panics on error.
func (q myhomeQuery) OneP() *Myhome {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single myhome record from the query.
func (q myhomeQuery) One() (*Myhome, error) {
	o := &Myhome{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for myhome")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Myhome records from the query, and panics on error.
func (q myhomeQuery) AllP() MyhomeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Myhome records from the query.
func (q myhomeQuery) All() (MyhomeSlice, error) {
	var o []*Myhome

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Myhome slice")
	}

	if len(myhomeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Myhome records in the query, and panics on error.
func (q myhomeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Myhome records in the query.
func (q myhomeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count myhome rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q myhomeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q myhomeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if myhome exists")
	}

	return count > 0, nil
}

// MyhomesG retrieves all records.
func MyhomesG(mods ...qm.QueryMod) myhomeQuery {
	return Myhomes(boil.GetDB(), mods...)
}

// Myhomes retrieves all the records using an executor.
func Myhomes(exec boil.Executor, mods ...qm.QueryMod) myhomeQuery {
	mods = append(mods, qm.From("`myhome`"))
	return myhomeQuery{NewQuery(exec, mods...)}
}

// FindMyhomeG retrieves a single record by ID.
func FindMyhomeG(mid int, selectCols ...string) (*Myhome, error) {
	return FindMyhome(boil.GetDB(), mid, selectCols...)
}

// FindMyhomeGP retrieves a single record by ID, and panics on error.
func FindMyhomeGP(mid int, selectCols ...string) *Myhome {
	retobj, err := FindMyhome(boil.GetDB(), mid, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMyhome retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMyhome(exec boil.Executor, mid int, selectCols ...string) (*Myhome, error) {
	myhomeObj := &Myhome{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `myhome` where `mid`=?", sel,
	)

	q := queries.Raw(exec, query, mid)

	err := q.Bind(myhomeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from myhome")
	}

	return myhomeObj, nil
}

// FindMyhomeP retrieves a single record by ID with an executor, and panics on error.
func FindMyhomeP(exec boil.Executor, mid int, selectCols ...string) *Myhome {
	retobj, err := FindMyhome(exec, mid, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Myhome) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Myhome) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Myhome) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Myhome) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no myhome provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(myhomeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	myhomeInsertCacheMut.RLock()
	cache, cached := myhomeInsertCache[key]
	myhomeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			myhomeColumns,
			myhomeColumnsWithDefault,
			myhomeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(myhomeType, myhomeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(myhomeType, myhomeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `myhome` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `myhome` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `myhome` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, myhomePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into myhome")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Mid = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == myhomeMapping["Mid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Mid,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for myhome")
	}

CacheNoHooks:
	if !cached {
		myhomeInsertCacheMut.Lock()
		myhomeInsertCache[key] = cache
		myhomeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Myhome record. See Update for
// whitelist behavior description.
func (o *Myhome) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Myhome record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Myhome) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Myhome, and panics on error.
// See Update for whitelist behavior description.
func (o *Myhome) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Myhome.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Myhome) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	myhomeUpdateCacheMut.RLock()
	cache, cached := myhomeUpdateCache[key]
	myhomeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			myhomeColumns,
			myhomePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update myhome, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `myhome` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, myhomePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(myhomeType, myhomeMapping, append(wl, myhomePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update myhome row")
	}

	if !cached {
		myhomeUpdateCacheMut.Lock()
		myhomeUpdateCache[key] = cache
		myhomeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q myhomeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q myhomeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for myhome")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MyhomeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MyhomeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MyhomeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MyhomeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), myhomePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `myhome` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, myhomePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in myhome slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Myhome) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Myhome) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Myhome) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Myhome) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no myhome provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(myhomeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	myhomeUpsertCacheMut.RLock()
	cache, cached := myhomeUpsertCache[key]
	myhomeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			myhomeColumns,
			myhomeColumnsWithDefault,
			myhomeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			myhomeColumns,
			myhomePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert myhome, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "myhome", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `myhome` WHERE `mid`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(myhomeType, myhomeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(myhomeType, myhomeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for myhome")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Mid = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == myhomeMapping["Mid"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Mid,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for myhome")
	}

CacheNoHooks:
	if !cached {
		myhomeUpsertCacheMut.Lock()
		myhomeUpsertCache[key] = cache
		myhomeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Myhome record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Myhome) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Myhome record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Myhome) DeleteG() error {
	if o == nil {
		return errors.New("models: no Myhome provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Myhome record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Myhome) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Myhome record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Myhome) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Myhome provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), myhomePrimaryKeyMapping)
	sql := "DELETE FROM `myhome` WHERE `mid`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from myhome")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q myhomeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q myhomeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no myhomeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from myhome")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MyhomeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MyhomeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Myhome slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MyhomeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MyhomeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Myhome slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(myhomeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), myhomePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `myhome` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, myhomePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from myhome slice")
	}

	if len(myhomeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Myhome) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Myhome) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Myhome) ReloadG() error {
	if o == nil {
		return errors.New("models: no Myhome provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Myhome) Reload(exec boil.Executor) error {
	ret, err := FindMyhome(exec, o.Mid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MyhomeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MyhomeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MyhomeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty MyhomeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MyhomeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	myhomes := MyhomeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), myhomePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `myhome`.* FROM `myhome` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, myhomePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&myhomes)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MyhomeSlice")
	}

	*o = myhomes

	return nil
}

// MyhomeExists checks if the Myhome row exists.
func MyhomeExists(exec boil.Executor, mid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `myhome` where `mid`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, mid)
	}

	row := exec.QueryRow(sql, mid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if myhome exists")
	}

	return exists, nil
}

// MyhomeExistsG checks if the Myhome row exists.
func MyhomeExistsG(mid int) (bool, error) {
	return MyhomeExists(boil.GetDB(), mid)
}

// MyhomeExistsGP checks if the Myhome row exists. Panics on error.
func MyhomeExistsGP(mid int) bool {
	e, err := MyhomeExists(boil.GetDB(), mid)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MyhomeExistsP checks if the Myhome row exists. Panics on error.
func MyhomeExistsP(exec boil.Executor, mid int) bool {
	e, err := MyhomeExists(exec, mid)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
