// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSkins(t *testing.T) {
	t.Parallel()

	query := Skins(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSkinsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = skin.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSkinsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Skins(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSkinsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SkinSlice{skin}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSkinsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SkinExists(tx, skin.Index)
	if err != nil {
		t.Errorf("Unable to check if Skin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SkinExistsG to return true, but got false.")
	}
}
func testSkinsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	skinFound, err := FindSkin(tx, skin.Index)
	if err != nil {
		t.Error(err)
	}

	if skinFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSkinsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Skins(tx).Bind(skin); err != nil {
		t.Error(err)
	}
}

func testSkinsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Skins(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSkinsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skinOne := &Skin{}
	skinTwo := &Skin{}
	if err = randomize.Struct(seed, skinOne, skinDBTypes, false, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}
	if err = randomize.Struct(seed, skinTwo, skinDBTypes, false, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skinOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = skinTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Skins(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSkinsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	skinOne := &Skin{}
	skinTwo := &Skin{}
	if err = randomize.Struct(seed, skinOne, skinDBTypes, false, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}
	if err = randomize.Struct(seed, skinTwo, skinDBTypes, false, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skinOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = skinTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func skinBeforeInsertHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinAfterInsertHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinAfterSelectHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinBeforeUpdateHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinAfterUpdateHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinBeforeDeleteHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinAfterDeleteHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinBeforeUpsertHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func skinAfterUpsertHook(e boil.Executor, o *Skin) error {
	*o = Skin{}
	return nil
}

func testSkinsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Skin{}
	o := &Skin{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, skinDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Skin object: %s", err)
	}

	AddSkinHook(boil.BeforeInsertHook, skinBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	skinBeforeInsertHooks = []SkinHook{}

	AddSkinHook(boil.AfterInsertHook, skinAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	skinAfterInsertHooks = []SkinHook{}

	AddSkinHook(boil.AfterSelectHook, skinAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	skinAfterSelectHooks = []SkinHook{}

	AddSkinHook(boil.BeforeUpdateHook, skinBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	skinBeforeUpdateHooks = []SkinHook{}

	AddSkinHook(boil.AfterUpdateHook, skinAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	skinAfterUpdateHooks = []SkinHook{}

	AddSkinHook(boil.BeforeDeleteHook, skinBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	skinBeforeDeleteHooks = []SkinHook{}

	AddSkinHook(boil.AfterDeleteHook, skinAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	skinAfterDeleteHooks = []SkinHook{}

	AddSkinHook(boil.BeforeUpsertHook, skinBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	skinBeforeUpsertHooks = []SkinHook{}

	AddSkinHook(boil.AfterUpsertHook, skinAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	skinAfterUpsertHooks = []SkinHook{}
}
func testSkinsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSkinsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx, skinColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSkinsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = skin.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSkinsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SkinSlice{skin}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSkinsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Skins(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	skinDBTypes = map[string]string{`Designer`: `char`, `Index`: `int`, `Intro`: `varchar`, `Name`: `char`, `Popularity`: `int`}
	_           = bytes.MinRead
)

func testSkinsUpdate(t *testing.T) {
	t.Parallel()

	if len(skinColumns) == len(skinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	if err = skin.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSkinsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(skinColumns) == len(skinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	skin := &Skin{}
	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, skin, skinDBTypes, true, skinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(skinColumns, skinPrimaryKeyColumns) {
		fields = skinColumns
	} else {
		fields = strmangle.SetComplement(
			skinColumns,
			skinPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(skin))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SkinSlice{skin}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSkinsUpsert(t *testing.T) {
	t.Parallel()

	if len(skinColumns) == len(skinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	skin := Skin{}
	if err = randomize.Struct(seed, &skin, skinDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = skin.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Skin: %s", err)
	}

	count, err := Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &skin, skinDBTypes, false, skinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Skin struct: %s", err)
	}

	if err = skin.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Skin: %s", err)
	}

	count, err = Skins(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
