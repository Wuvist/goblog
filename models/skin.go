// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Skin is an object representing the database table.
type Skin struct {
	Index      int         `boil:"index" json:"index" toml:"index" yaml:"index"`
	Name       string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Designer   null.String `boil:"designer" json:"designer,omitempty" toml:"designer" yaml:"designer,omitempty"`
	Popularity int         `boil:"popularity" json:"popularity" toml:"popularity" yaml:"popularity"`
	Intro      null.String `boil:"intro" json:"intro,omitempty" toml:"intro" yaml:"intro,omitempty"`

	R *skinR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L skinL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SkinColumns = struct {
	Index      string
	Name       string
	Designer   string
	Popularity string
	Intro      string
}{
	Index:      "index",
	Name:       "name",
	Designer:   "designer",
	Popularity: "popularity",
	Intro:      "intro",
}

// skinR is where relationships are stored.
type skinR struct {
}

// skinL is where Load methods for each relationship are stored.
type skinL struct{}

var (
	skinColumns               = []string{"index", "name", "designer", "popularity", "intro"}
	skinColumnsWithoutDefault = []string{"index", "name", "designer", "intro"}
	skinColumnsWithDefault    = []string{"popularity"}
	skinPrimaryKeyColumns     = []string{"index"}
)

type (
	// SkinSlice is an alias for a slice of pointers to Skin.
	// This should generally be used opposed to []Skin.
	SkinSlice []*Skin
	// SkinHook is the signature for custom Skin hook methods
	SkinHook func(boil.Executor, *Skin) error

	skinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	skinType                 = reflect.TypeOf(&Skin{})
	skinMapping              = queries.MakeStructMapping(skinType)
	skinPrimaryKeyMapping, _ = queries.BindMapping(skinType, skinMapping, skinPrimaryKeyColumns)
	skinInsertCacheMut       sync.RWMutex
	skinInsertCache          = make(map[string]insertCache)
	skinUpdateCacheMut       sync.RWMutex
	skinUpdateCache          = make(map[string]updateCache)
	skinUpsertCacheMut       sync.RWMutex
	skinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var skinBeforeInsertHooks []SkinHook
var skinBeforeUpdateHooks []SkinHook
var skinBeforeDeleteHooks []SkinHook
var skinBeforeUpsertHooks []SkinHook

var skinAfterInsertHooks []SkinHook
var skinAfterSelectHooks []SkinHook
var skinAfterUpdateHooks []SkinHook
var skinAfterDeleteHooks []SkinHook
var skinAfterUpsertHooks []SkinHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Skin) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range skinBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Skin) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range skinBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Skin) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range skinBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Skin) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range skinBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Skin) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range skinAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Skin) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range skinAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Skin) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range skinAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Skin) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range skinAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Skin) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range skinAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSkinHook registers your hook function for all future operations.
func AddSkinHook(hookPoint boil.HookPoint, skinHook SkinHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		skinBeforeInsertHooks = append(skinBeforeInsertHooks, skinHook)
	case boil.BeforeUpdateHook:
		skinBeforeUpdateHooks = append(skinBeforeUpdateHooks, skinHook)
	case boil.BeforeDeleteHook:
		skinBeforeDeleteHooks = append(skinBeforeDeleteHooks, skinHook)
	case boil.BeforeUpsertHook:
		skinBeforeUpsertHooks = append(skinBeforeUpsertHooks, skinHook)
	case boil.AfterInsertHook:
		skinAfterInsertHooks = append(skinAfterInsertHooks, skinHook)
	case boil.AfterSelectHook:
		skinAfterSelectHooks = append(skinAfterSelectHooks, skinHook)
	case boil.AfterUpdateHook:
		skinAfterUpdateHooks = append(skinAfterUpdateHooks, skinHook)
	case boil.AfterDeleteHook:
		skinAfterDeleteHooks = append(skinAfterDeleteHooks, skinHook)
	case boil.AfterUpsertHook:
		skinAfterUpsertHooks = append(skinAfterUpsertHooks, skinHook)
	}
}

// OneP returns a single skin record from the query, and panics on error.
func (q skinQuery) OneP() *Skin {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single skin record from the query.
func (q skinQuery) One() (*Skin, error) {
	o := &Skin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for skin")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Skin records from the query, and panics on error.
func (q skinQuery) AllP() SkinSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Skin records from the query.
func (q skinQuery) All() (SkinSlice, error) {
	var o []*Skin

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Skin slice")
	}

	if len(skinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Skin records in the query, and panics on error.
func (q skinQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Skin records in the query.
func (q skinQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count skin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q skinQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q skinQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if skin exists")
	}

	return count > 0, nil
}

// SkinsG retrieves all records.
func SkinsG(mods ...qm.QueryMod) skinQuery {
	return Skins(boil.GetDB(), mods...)
}

// Skins retrieves all the records using an executor.
func Skins(exec boil.Executor, mods ...qm.QueryMod) skinQuery {
	mods = append(mods, qm.From("`skin`"))
	return skinQuery{NewQuery(exec, mods...)}
}

// FindSkinG retrieves a single record by ID.
func FindSkinG(index int, selectCols ...string) (*Skin, error) {
	return FindSkin(boil.GetDB(), index, selectCols...)
}

// FindSkinGP retrieves a single record by ID, and panics on error.
func FindSkinGP(index int, selectCols ...string) *Skin {
	retobj, err := FindSkin(boil.GetDB(), index, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSkin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSkin(exec boil.Executor, index int, selectCols ...string) (*Skin, error) {
	skinObj := &Skin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `skin` where `index`=?", sel,
	)

	q := queries.Raw(exec, query, index)

	err := q.Bind(skinObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from skin")
	}

	return skinObj, nil
}

// FindSkinP retrieves a single record by ID with an executor, and panics on error.
func FindSkinP(exec boil.Executor, index int, selectCols ...string) *Skin {
	retobj, err := FindSkin(exec, index, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Skin) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Skin) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Skin) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Skin) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no skin provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(skinColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	skinInsertCacheMut.RLock()
	cache, cached := skinInsertCache[key]
	skinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			skinColumns,
			skinColumnsWithDefault,
			skinColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(skinType, skinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(skinType, skinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `skin` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `skin` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `skin` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, skinPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into skin")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Index,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for skin")
	}

CacheNoHooks:
	if !cached {
		skinInsertCacheMut.Lock()
		skinInsertCache[key] = cache
		skinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Skin record. See Update for
// whitelist behavior description.
func (o *Skin) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Skin record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Skin) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Skin, and panics on error.
// See Update for whitelist behavior description.
func (o *Skin) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Skin.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Skin) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	skinUpdateCacheMut.RLock()
	cache, cached := skinUpdateCache[key]
	skinUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			skinColumns,
			skinPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update skin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `skin` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, skinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(skinType, skinMapping, append(wl, skinPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update skin row")
	}

	if !cached {
		skinUpdateCacheMut.Lock()
		skinUpdateCache[key] = cache
		skinUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q skinQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q skinQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for skin")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SkinSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SkinSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SkinSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SkinSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), skinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `skin` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, skinPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in skin slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Skin) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Skin) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Skin) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Skin) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no skin provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(skinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	skinUpsertCacheMut.RLock()
	cache, cached := skinUpsertCache[key]
	skinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			skinColumns,
			skinColumnsWithDefault,
			skinColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			skinColumns,
			skinPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert skin, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "skin", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `skin` WHERE `index`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(skinType, skinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(skinType, skinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for skin")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Index,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for skin")
	}

CacheNoHooks:
	if !cached {
		skinUpsertCacheMut.Lock()
		skinUpsertCache[key] = cache
		skinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Skin record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Skin) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Skin record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Skin) DeleteG() error {
	if o == nil {
		return errors.New("models: no Skin provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Skin record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Skin) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Skin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Skin) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Skin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), skinPrimaryKeyMapping)
	sql := "DELETE FROM `skin` WHERE `index`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from skin")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q skinQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q skinQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no skinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from skin")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SkinSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SkinSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Skin slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SkinSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SkinSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Skin slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(skinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), skinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `skin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, skinPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from skin slice")
	}

	if len(skinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Skin) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Skin) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Skin) ReloadG() error {
	if o == nil {
		return errors.New("models: no Skin provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Skin) Reload(exec boil.Executor) error {
	ret, err := FindSkin(exec, o.Index)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SkinSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SkinSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SkinSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SkinSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SkinSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	skins := SkinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), skinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `skin`.* FROM `skin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, skinPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&skins)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SkinSlice")
	}

	*o = skins

	return nil
}

// SkinExists checks if the Skin row exists.
func SkinExists(exec boil.Executor, index int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `skin` where `index`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, index)
	}

	row := exec.QueryRow(sql, index)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if skin exists")
	}

	return exists, nil
}

// SkinExistsG checks if the Skin row exists.
func SkinExistsG(index int) (bool, error) {
	return SkinExists(boil.GetDB(), index)
}

// SkinExistsGP checks if the Skin row exists. Panics on error.
func SkinExistsGP(index int) bool {
	e, err := SkinExists(boil.GetDB(), index)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SkinExistsP checks if the Skin row exists. Panics on error.
func SkinExistsP(exec boil.Executor, index int) bool {
	e, err := SkinExists(exec, index)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
