// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBloggerMoods(t *testing.T) {
	t.Parallel()

	query := BloggerMoods(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBloggerMoodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = bloggerMood.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBloggerMoodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = BloggerMoods(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBloggerMoodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BloggerMoodSlice{bloggerMood}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBloggerMoodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BloggerMoodExists(tx, bloggerMood.ID)
	if err != nil {
		t.Errorf("Unable to check if BloggerMood exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BloggerMoodExistsG to return true, but got false.")
	}
}
func testBloggerMoodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	bloggerMoodFound, err := FindBloggerMood(tx, bloggerMood.ID)
	if err != nil {
		t.Error(err)
	}

	if bloggerMoodFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBloggerMoodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = BloggerMoods(tx).Bind(bloggerMood); err != nil {
		t.Error(err)
	}
}

func testBloggerMoodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := BloggerMoods(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBloggerMoodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMoodOne := &BloggerMood{}
	bloggerMoodTwo := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMoodOne, bloggerMoodDBTypes, false, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}
	if err = randomize.Struct(seed, bloggerMoodTwo, bloggerMoodDBTypes, false, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMoodOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bloggerMoodTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := BloggerMoods(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBloggerMoodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bloggerMoodOne := &BloggerMood{}
	bloggerMoodTwo := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMoodOne, bloggerMoodDBTypes, false, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}
	if err = randomize.Struct(seed, bloggerMoodTwo, bloggerMoodDBTypes, false, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMoodOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bloggerMoodTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func bloggerMoodBeforeInsertHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodAfterInsertHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodAfterSelectHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodBeforeUpdateHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodAfterUpdateHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodBeforeDeleteHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodAfterDeleteHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodBeforeUpsertHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func bloggerMoodAfterUpsertHook(e boil.Executor, o *BloggerMood) error {
	*o = BloggerMood{}
	return nil
}

func testBloggerMoodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &BloggerMood{}
	o := &BloggerMood{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bloggerMoodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BloggerMood object: %s", err)
	}

	AddBloggerMoodHook(boil.BeforeInsertHook, bloggerMoodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bloggerMoodBeforeInsertHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.AfterInsertHook, bloggerMoodAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bloggerMoodAfterInsertHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.AfterSelectHook, bloggerMoodAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bloggerMoodAfterSelectHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.BeforeUpdateHook, bloggerMoodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bloggerMoodBeforeUpdateHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.AfterUpdateHook, bloggerMoodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bloggerMoodAfterUpdateHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.BeforeDeleteHook, bloggerMoodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bloggerMoodBeforeDeleteHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.AfterDeleteHook, bloggerMoodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bloggerMoodAfterDeleteHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.BeforeUpsertHook, bloggerMoodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bloggerMoodBeforeUpsertHooks = []BloggerMoodHook{}

	AddBloggerMoodHook(boil.AfterUpsertHook, bloggerMoodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bloggerMoodAfterUpsertHooks = []BloggerMoodHook{}
}
func testBloggerMoodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBloggerMoodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx, bloggerMoodColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBloggerMoodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = bloggerMood.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBloggerMoodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BloggerMoodSlice{bloggerMood}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBloggerMoodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := BloggerMoods(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bloggerMoodDBTypes = map[string]string{`BloggerID`: `int`, `CreateDT`: `timestamp`, `ID`: `int`, `MSG`: `varchar`, `MoodID`: `int`}
	_                  = bytes.MinRead
)

func testBloggerMoodsUpdate(t *testing.T) {
	t.Parallel()

	if len(bloggerMoodColumns) == len(bloggerMoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	if err = bloggerMood.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBloggerMoodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bloggerMoodColumns) == len(bloggerMoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	bloggerMood := &BloggerMood{}
	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, bloggerMood, bloggerMoodDBTypes, true, bloggerMoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bloggerMoodColumns, bloggerMoodPrimaryKeyColumns) {
		fields = bloggerMoodColumns
	} else {
		fields = strmangle.SetComplement(
			bloggerMoodColumns,
			bloggerMoodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(bloggerMood))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BloggerMoodSlice{bloggerMood}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBloggerMoodsUpsert(t *testing.T) {
	t.Parallel()

	if len(bloggerMoodColumns) == len(bloggerMoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	bloggerMood := BloggerMood{}
	if err = randomize.Struct(seed, &bloggerMood, bloggerMoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerMood.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert BloggerMood: %s", err)
	}

	count, err := BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &bloggerMood, bloggerMoodDBTypes, false, bloggerMoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BloggerMood struct: %s", err)
	}

	if err = bloggerMood.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert BloggerMood: %s", err)
	}

	count, err = BloggerMoods(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
