// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Picture is an object representing the database table.
type Picture struct {
	ID         int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	User       int    `boil:"user" json:"user" toml:"user" yaml:"user"`
	PictureURL string `boil:"picture_url" json:"picture_url" toml:"picture_url" yaml:"picture_url"`
	Type       string `boil:"type" json:"type" toml:"type" yaml:"type"`
	Width      int    `boil:"width" json:"width" toml:"width" yaml:"width"`
	Height     int    `boil:"height" json:"height" toml:"height" yaml:"height"`

	R *pictureR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pictureL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PictureColumns = struct {
	ID         string
	User       string
	PictureURL string
	Type       string
	Width      string
	Height     string
}{
	ID:         "id",
	User:       "user",
	PictureURL: "picture_url",
	Type:       "type",
	Width:      "width",
	Height:     "height",
}

// pictureR is where relationships are stored.
type pictureR struct {
}

// pictureL is where Load methods for each relationship are stored.
type pictureL struct{}

var (
	pictureColumns               = []string{"id", "user", "picture_url", "type", "width", "height"}
	pictureColumnsWithoutDefault = []string{"id", "user", "picture_url", "type", "width", "height"}
	pictureColumnsWithDefault    = []string{}
	picturePrimaryKeyColumns     = []string{"id"}
)

type (
	// PictureSlice is an alias for a slice of pointers to Picture.
	// This should generally be used opposed to []Picture.
	PictureSlice []*Picture
	// PictureHook is the signature for custom Picture hook methods
	PictureHook func(boil.Executor, *Picture) error

	pictureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pictureType                 = reflect.TypeOf(&Picture{})
	pictureMapping              = queries.MakeStructMapping(pictureType)
	picturePrimaryKeyMapping, _ = queries.BindMapping(pictureType, pictureMapping, picturePrimaryKeyColumns)
	pictureInsertCacheMut       sync.RWMutex
	pictureInsertCache          = make(map[string]insertCache)
	pictureUpdateCacheMut       sync.RWMutex
	pictureUpdateCache          = make(map[string]updateCache)
	pictureUpsertCacheMut       sync.RWMutex
	pictureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var pictureBeforeInsertHooks []PictureHook
var pictureBeforeUpdateHooks []PictureHook
var pictureBeforeDeleteHooks []PictureHook
var pictureBeforeUpsertHooks []PictureHook

var pictureAfterInsertHooks []PictureHook
var pictureAfterSelectHooks []PictureHook
var pictureAfterUpdateHooks []PictureHook
var pictureAfterDeleteHooks []PictureHook
var pictureAfterUpsertHooks []PictureHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Picture) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Picture) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Picture) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Picture) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Picture) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Picture) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Picture) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Picture) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Picture) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pictureAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPictureHook registers your hook function for all future operations.
func AddPictureHook(hookPoint boil.HookPoint, pictureHook PictureHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pictureBeforeInsertHooks = append(pictureBeforeInsertHooks, pictureHook)
	case boil.BeforeUpdateHook:
		pictureBeforeUpdateHooks = append(pictureBeforeUpdateHooks, pictureHook)
	case boil.BeforeDeleteHook:
		pictureBeforeDeleteHooks = append(pictureBeforeDeleteHooks, pictureHook)
	case boil.BeforeUpsertHook:
		pictureBeforeUpsertHooks = append(pictureBeforeUpsertHooks, pictureHook)
	case boil.AfterInsertHook:
		pictureAfterInsertHooks = append(pictureAfterInsertHooks, pictureHook)
	case boil.AfterSelectHook:
		pictureAfterSelectHooks = append(pictureAfterSelectHooks, pictureHook)
	case boil.AfterUpdateHook:
		pictureAfterUpdateHooks = append(pictureAfterUpdateHooks, pictureHook)
	case boil.AfterDeleteHook:
		pictureAfterDeleteHooks = append(pictureAfterDeleteHooks, pictureHook)
	case boil.AfterUpsertHook:
		pictureAfterUpsertHooks = append(pictureAfterUpsertHooks, pictureHook)
	}
}

// OneP returns a single picture record from the query, and panics on error.
func (q pictureQuery) OneP() *Picture {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single picture record from the query.
func (q pictureQuery) One() (*Picture, error) {
	o := &Picture{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pictures")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Picture records from the query, and panics on error.
func (q pictureQuery) AllP() PictureSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Picture records from the query.
func (q pictureQuery) All() (PictureSlice, error) {
	var o []*Picture

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Picture slice")
	}

	if len(pictureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Picture records in the query, and panics on error.
func (q pictureQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Picture records in the query.
func (q pictureQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pictures rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q pictureQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q pictureQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pictures exists")
	}

	return count > 0, nil
}

// PicturesG retrieves all records.
func PicturesG(mods ...qm.QueryMod) pictureQuery {
	return Pictures(boil.GetDB(), mods...)
}

// Pictures retrieves all the records using an executor.
func Pictures(exec boil.Executor, mods ...qm.QueryMod) pictureQuery {
	mods = append(mods, qm.From("`pictures`"))
	return pictureQuery{NewQuery(exec, mods...)}
}

// FindPictureG retrieves a single record by ID.
func FindPictureG(id int, selectCols ...string) (*Picture, error) {
	return FindPicture(boil.GetDB(), id, selectCols...)
}

// FindPictureGP retrieves a single record by ID, and panics on error.
func FindPictureGP(id int, selectCols ...string) *Picture {
	retobj, err := FindPicture(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPicture retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPicture(exec boil.Executor, id int, selectCols ...string) (*Picture, error) {
	pictureObj := &Picture{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `pictures` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(pictureObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pictures")
	}

	return pictureObj, nil
}

// FindPictureP retrieves a single record by ID with an executor, and panics on error.
func FindPictureP(exec boil.Executor, id int, selectCols ...string) *Picture {
	retobj, err := FindPicture(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Picture) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Picture) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Picture) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Picture) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no pictures provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pictureColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	pictureInsertCacheMut.RLock()
	cache, cached := pictureInsertCache[key]
	pictureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			pictureColumns,
			pictureColumnsWithDefault,
			pictureColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(pictureType, pictureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pictureType, pictureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `pictures` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `pictures` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `pictures` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, picturePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pictures")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for pictures")
	}

CacheNoHooks:
	if !cached {
		pictureInsertCacheMut.Lock()
		pictureInsertCache[key] = cache
		pictureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Picture record. See Update for
// whitelist behavior description.
func (o *Picture) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Picture record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Picture) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Picture, and panics on error.
// See Update for whitelist behavior description.
func (o *Picture) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Picture.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Picture) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	pictureUpdateCacheMut.RLock()
	cache, cached := pictureUpdateCache[key]
	pictureUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			pictureColumns,
			picturePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update pictures, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `pictures` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, picturePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pictureType, pictureMapping, append(wl, picturePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update pictures row")
	}

	if !cached {
		pictureUpdateCacheMut.Lock()
		pictureUpdateCache[key] = cache
		pictureUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q pictureQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q pictureQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for pictures")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PictureSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PictureSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PictureSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PictureSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), picturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `pictures` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, picturePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in picture slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Picture) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Picture) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Picture) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Picture) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no pictures provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pictureColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pictureUpsertCacheMut.RLock()
	cache, cached := pictureUpsertCache[key]
	pictureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			pictureColumns,
			pictureColumnsWithDefault,
			pictureColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			pictureColumns,
			picturePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert pictures, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "pictures", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `pictures` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(pictureType, pictureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pictureType, pictureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for pictures")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for pictures")
	}

CacheNoHooks:
	if !cached {
		pictureUpsertCacheMut.Lock()
		pictureUpsertCache[key] = cache
		pictureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Picture record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Picture) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Picture record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Picture) DeleteG() error {
	if o == nil {
		return errors.New("models: no Picture provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Picture record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Picture) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Picture record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Picture) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Picture provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), picturePrimaryKeyMapping)
	sql := "DELETE FROM `pictures` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from pictures")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q pictureQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q pictureQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no pictureQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from pictures")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PictureSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PictureSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Picture slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PictureSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PictureSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Picture slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(pictureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), picturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `pictures` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, picturePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from picture slice")
	}

	if len(pictureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Picture) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Picture) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Picture) ReloadG() error {
	if o == nil {
		return errors.New("models: no Picture provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Picture) Reload(exec boil.Executor) error {
	ret, err := FindPicture(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PictureSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PictureSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PictureSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PictureSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PictureSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	pictures := PictureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), picturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `pictures`.* FROM `pictures` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, picturePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&pictures)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PictureSlice")
	}

	*o = pictures

	return nil
}

// PictureExists checks if the Picture row exists.
func PictureExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `pictures` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pictures exists")
	}

	return exists, nil
}

// PictureExistsG checks if the Picture row exists.
func PictureExistsG(id int) (bool, error) {
	return PictureExists(boil.GetDB(), id)
}

// PictureExistsGP checks if the Picture row exists. Panics on error.
func PictureExistsGP(id int) bool {
	e, err := PictureExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PictureExistsP checks if the Picture row exists. Panics on error.
func PictureExistsP(exec boil.Executor, id int) bool {
	e, err := PictureExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
