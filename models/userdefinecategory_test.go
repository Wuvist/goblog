// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUserdefinecategories(t *testing.T) {
	t.Parallel()

	query := Userdefinecategories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUserdefinecategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userdefinecategory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserdefinecategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Userdefinecategories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserdefinecategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserdefinecategorySlice{userdefinecategory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUserdefinecategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UserdefinecategoryExists(tx, userdefinecategory.Index)
	if err != nil {
		t.Errorf("Unable to check if Userdefinecategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserdefinecategoryExistsG to return true, but got false.")
	}
}
func testUserdefinecategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	userdefinecategoryFound, err := FindUserdefinecategory(tx, userdefinecategory.Index)
	if err != nil {
		t.Error(err)
	}

	if userdefinecategoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUserdefinecategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Userdefinecategories(tx).Bind(userdefinecategory); err != nil {
		t.Error(err)
	}
}

func testUserdefinecategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Userdefinecategories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserdefinecategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategoryOne := &Userdefinecategory{}
	userdefinecategoryTwo := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategoryOne, userdefinecategoryDBTypes, false, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}
	if err = randomize.Struct(seed, userdefinecategoryTwo, userdefinecategoryDBTypes, false, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userdefinecategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Userdefinecategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserdefinecategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userdefinecategoryOne := &Userdefinecategory{}
	userdefinecategoryTwo := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategoryOne, userdefinecategoryDBTypes, false, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}
	if err = randomize.Struct(seed, userdefinecategoryTwo, userdefinecategoryDBTypes, false, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userdefinecategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func userdefinecategoryBeforeInsertHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryAfterInsertHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryAfterSelectHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryBeforeUpdateHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryAfterUpdateHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryBeforeDeleteHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryAfterDeleteHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryBeforeUpsertHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func userdefinecategoryAfterUpsertHook(e boil.Executor, o *Userdefinecategory) error {
	*o = Userdefinecategory{}
	return nil
}

func testUserdefinecategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Userdefinecategory{}
	o := &Userdefinecategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userdefinecategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory object: %s", err)
	}

	AddUserdefinecategoryHook(boil.BeforeInsertHook, userdefinecategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryBeforeInsertHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.AfterInsertHook, userdefinecategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryAfterInsertHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.AfterSelectHook, userdefinecategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryAfterSelectHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.BeforeUpdateHook, userdefinecategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryBeforeUpdateHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.AfterUpdateHook, userdefinecategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryAfterUpdateHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.BeforeDeleteHook, userdefinecategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryBeforeDeleteHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.AfterDeleteHook, userdefinecategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryAfterDeleteHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.BeforeUpsertHook, userdefinecategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryBeforeUpsertHooks = []UserdefinecategoryHook{}

	AddUserdefinecategoryHook(boil.AfterUpsertHook, userdefinecategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userdefinecategoryAfterUpsertHooks = []UserdefinecategoryHook{}
}
func testUserdefinecategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserdefinecategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx, userdefinecategoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserdefinecategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userdefinecategory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserdefinecategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserdefinecategorySlice{userdefinecategory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUserdefinecategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Userdefinecategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userdefinecategoryDBTypes = map[string]string{`Blogger`: `int`, `Cate`: `varchar`, `Files`: `int`, `Index`: `int`}
	_                         = bytes.MinRead
)

func testUserdefinecategoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(userdefinecategoryColumns) == len(userdefinecategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	if err = userdefinecategory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUserdefinecategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userdefinecategoryColumns) == len(userdefinecategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userdefinecategory := &Userdefinecategory{}
	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userdefinecategory, userdefinecategoryDBTypes, true, userdefinecategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userdefinecategoryColumns, userdefinecategoryPrimaryKeyColumns) {
		fields = userdefinecategoryColumns
	} else {
		fields = strmangle.SetComplement(
			userdefinecategoryColumns,
			userdefinecategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(userdefinecategory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UserdefinecategorySlice{userdefinecategory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUserdefinecategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(userdefinecategoryColumns) == len(userdefinecategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	userdefinecategory := Userdefinecategory{}
	if err = randomize.Struct(seed, &userdefinecategory, userdefinecategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userdefinecategory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Userdefinecategory: %s", err)
	}

	count, err := Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &userdefinecategory, userdefinecategoryDBTypes, false, userdefinecategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userdefinecategory struct: %s", err)
	}

	if err = userdefinecategory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Userdefinecategory: %s", err)
	}

	count, err = Userdefinecategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
