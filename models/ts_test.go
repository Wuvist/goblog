// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTS(t *testing.T) {
	t.Parallel()

	query := TS(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = t.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TS(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TSlice{t}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TExists(tx, t.Blogger)
	if err != nil {
		t.Errorf("Unable to check if T exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TExistsG to return true, but got false.")
	}
}
func testTSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	tFound, err := FindT(tx, t.Blogger)
	if err != nil {
		t.Error(err)
	}

	if tFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TS(tx).Bind(t); err != nil {
		t.Error(err)
	}
}

func testTSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := TS(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tOne := &T{}
	tTwo := &T{}
	if err = randomize.Struct(seed, tOne, tDBTypes, false, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}
	if err = randomize.Struct(seed, tTwo, tDBTypes, false, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TS(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tOne := &T{}
	tTwo := &T{}
	if err = randomize.Struct(seed, tOne, tDBTypes, false, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}
	if err = randomize.Struct(seed, tTwo, tDBTypes, false, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func tBeforeInsertHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tAfterInsertHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tAfterSelectHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tBeforeUpdateHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tAfterUpdateHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tBeforeDeleteHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tAfterDeleteHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tBeforeUpsertHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func tAfterUpsertHook(e boil.Executor, o *T) error {
	*o = T{}
	return nil
}

func testTSHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &T{}
	o := &T{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tDBTypes, false); err != nil {
		t.Errorf("Unable to randomize T object: %s", err)
	}

	AddTHook(boil.BeforeInsertHook, tBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tBeforeInsertHooks = []THook{}

	AddTHook(boil.AfterInsertHook, tAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tAfterInsertHooks = []THook{}

	AddTHook(boil.AfterSelectHook, tAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tAfterSelectHooks = []THook{}

	AddTHook(boil.BeforeUpdateHook, tBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tBeforeUpdateHooks = []THook{}

	AddTHook(boil.AfterUpdateHook, tAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tAfterUpdateHooks = []THook{}

	AddTHook(boil.BeforeDeleteHook, tBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tBeforeDeleteHooks = []THook{}

	AddTHook(boil.AfterDeleteHook, tAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tAfterDeleteHooks = []THook{}

	AddTHook(boil.BeforeUpsertHook, tBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tBeforeUpsertHooks = []THook{}

	AddTHook(boil.AfterUpsertHook, tAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tAfterUpsertHooks = []THook{}
}
func testTSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx, tColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = t.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TSlice{t}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TS(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tDBTypes = map[string]string{`Addtime`: `timestamp`, `Blogger`: `int`, `Cate`: `int`, `Content`: `longtext`, `Title`: `varchar`}
	_        = bytes.MinRead
)

func testTSUpdate(t *testing.T) {
	t.Parallel()

	if len(tColumns) == len(tPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	if err = t.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tColumns) == len(tPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	t := &T{}
	if err = randomize.Struct(seed, t, tDBTypes, true, tColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, t, tDBTypes, true, tPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tColumns, tPrimaryKeyColumns) {
		fields = tColumns
	} else {
		fields = strmangle.SetComplement(
			tColumns,
			tPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(t))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TSlice{t}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTSUpsert(t *testing.T) {
	t.Parallel()

	if len(tColumns) == len(tPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	t := T{}
	if err = randomize.Struct(seed, &t, tDBTypes, true); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = t.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert T: %s", err)
	}

	count, err := TS(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &t, tDBTypes, false, tPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize T struct: %s", err)
	}

	if err = t.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert T: %s", err)
	}

	count, err = TS(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
