// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBlogcategories(t *testing.T) {
	t.Parallel()

	query := Blogcategories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBlogcategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = blogcategory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlogcategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Blogcategories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlogcategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BlogcategorySlice{blogcategory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBlogcategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BlogcategoryExists(tx, blogcategory.ID)
	if err != nil {
		t.Errorf("Unable to check if Blogcategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BlogcategoryExistsG to return true, but got false.")
	}
}
func testBlogcategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	blogcategoryFound, err := FindBlogcategory(tx, blogcategory.ID)
	if err != nil {
		t.Error(err)
	}

	if blogcategoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBlogcategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Blogcategories(tx).Bind(blogcategory); err != nil {
		t.Error(err)
	}
}

func testBlogcategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Blogcategories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBlogcategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategoryOne := &Blogcategory{}
	blogcategoryTwo := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategoryOne, blogcategoryDBTypes, false, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}
	if err = randomize.Struct(seed, blogcategoryTwo, blogcategoryDBTypes, false, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = blogcategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Blogcategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBlogcategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	blogcategoryOne := &Blogcategory{}
	blogcategoryTwo := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategoryOne, blogcategoryDBTypes, false, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}
	if err = randomize.Struct(seed, blogcategoryTwo, blogcategoryDBTypes, false, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = blogcategoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func blogcategoryBeforeInsertHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryAfterInsertHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryAfterSelectHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryBeforeUpdateHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryAfterUpdateHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryBeforeDeleteHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryAfterDeleteHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryBeforeUpsertHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func blogcategoryAfterUpsertHook(e boil.Executor, o *Blogcategory) error {
	*o = Blogcategory{}
	return nil
}

func testBlogcategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Blogcategory{}
	o := &Blogcategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, blogcategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Blogcategory object: %s", err)
	}

	AddBlogcategoryHook(boil.BeforeInsertHook, blogcategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	blogcategoryBeforeInsertHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.AfterInsertHook, blogcategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	blogcategoryAfterInsertHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.AfterSelectHook, blogcategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	blogcategoryAfterSelectHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.BeforeUpdateHook, blogcategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	blogcategoryBeforeUpdateHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.AfterUpdateHook, blogcategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	blogcategoryAfterUpdateHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.BeforeDeleteHook, blogcategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	blogcategoryBeforeDeleteHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.AfterDeleteHook, blogcategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	blogcategoryAfterDeleteHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.BeforeUpsertHook, blogcategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	blogcategoryBeforeUpsertHooks = []BlogcategoryHook{}

	AddBlogcategoryHook(boil.AfterUpsertHook, blogcategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	blogcategoryAfterUpsertHooks = []BlogcategoryHook{}
}
func testBlogcategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlogcategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx, blogcategoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlogcategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = blogcategory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBlogcategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BlogcategorySlice{blogcategory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBlogcategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Blogcategories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	blogcategoryDBTypes = map[string]string{`Cate`: `varchar`, `ID`: `int`}
	_                   = bytes.MinRead
)

func testBlogcategoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(blogcategoryColumns) == len(blogcategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	if err = blogcategory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBlogcategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(blogcategoryColumns) == len(blogcategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	blogcategory := &Blogcategory{}
	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, blogcategory, blogcategoryDBTypes, true, blogcategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(blogcategoryColumns, blogcategoryPrimaryKeyColumns) {
		fields = blogcategoryColumns
	} else {
		fields = strmangle.SetComplement(
			blogcategoryColumns,
			blogcategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(blogcategory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BlogcategorySlice{blogcategory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBlogcategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(blogcategoryColumns) == len(blogcategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	blogcategory := Blogcategory{}
	if err = randomize.Struct(seed, &blogcategory, blogcategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogcategory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Blogcategory: %s", err)
	}

	count, err := Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &blogcategory, blogcategoryDBTypes, false, blogcategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Blogcategory struct: %s", err)
	}

	if err = blogcategory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Blogcategory: %s", err)
	}

	count, err = Blogcategories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
