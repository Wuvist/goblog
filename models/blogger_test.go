// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBloggers(t *testing.T) {
	t.Parallel()

	query := Bloggers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBloggersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = blogger.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBloggersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Bloggers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBloggersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BloggerSlice{blogger}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBloggersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BloggerExists(tx, blogger.Index)
	if err != nil {
		t.Errorf("Unable to check if Blogger exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BloggerExistsG to return true, but got false.")
	}
}
func testBloggersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	bloggerFound, err := FindBlogger(tx, blogger.Index)
	if err != nil {
		t.Error(err)
	}

	if bloggerFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBloggersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Bloggers(tx).Bind(blogger); err != nil {
		t.Error(err)
	}
}

func testBloggersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Bloggers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBloggersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerOne := &Blogger{}
	bloggerTwo := &Blogger{}
	if err = randomize.Struct(seed, bloggerOne, bloggerDBTypes, false, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}
	if err = randomize.Struct(seed, bloggerTwo, bloggerDBTypes, false, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bloggerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Bloggers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBloggersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bloggerOne := &Blogger{}
	bloggerTwo := &Blogger{}
	if err = randomize.Struct(seed, bloggerOne, bloggerDBTypes, false, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}
	if err = randomize.Struct(seed, bloggerTwo, bloggerDBTypes, false, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bloggerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func bloggerBeforeInsertHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerAfterInsertHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerAfterSelectHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerBeforeUpdateHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerAfterUpdateHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerBeforeDeleteHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerAfterDeleteHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerBeforeUpsertHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func bloggerAfterUpsertHook(e boil.Executor, o *Blogger) error {
	*o = Blogger{}
	return nil
}

func testBloggersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Blogger{}
	o := &Blogger{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bloggerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Blogger object: %s", err)
	}

	AddBloggerHook(boil.BeforeInsertHook, bloggerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bloggerBeforeInsertHooks = []BloggerHook{}

	AddBloggerHook(boil.AfterInsertHook, bloggerAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bloggerAfterInsertHooks = []BloggerHook{}

	AddBloggerHook(boil.AfterSelectHook, bloggerAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bloggerAfterSelectHooks = []BloggerHook{}

	AddBloggerHook(boil.BeforeUpdateHook, bloggerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bloggerBeforeUpdateHooks = []BloggerHook{}

	AddBloggerHook(boil.AfterUpdateHook, bloggerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bloggerAfterUpdateHooks = []BloggerHook{}

	AddBloggerHook(boil.BeforeDeleteHook, bloggerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bloggerBeforeDeleteHooks = []BloggerHook{}

	AddBloggerHook(boil.AfterDeleteHook, bloggerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bloggerAfterDeleteHooks = []BloggerHook{}

	AddBloggerHook(boil.BeforeUpsertHook, bloggerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bloggerBeforeUpsertHooks = []BloggerHook{}

	AddBloggerHook(boil.AfterUpsertHook, bloggerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bloggerAfterUpsertHooks = []BloggerHook{}
}
func testBloggersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBloggersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx, bloggerColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBloggersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = blogger.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBloggersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BloggerSlice{blogger}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBloggersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Bloggers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bloggerDBTypes = map[string]string{`Activate`: `tinyint`, `Blogname`: `varchar`, `Blogs`: `int`, `Blogskin`: `int`, `DOB`: `datetime`, `Email`: `varchar`, `ID`: `varchar`, `IP`: `char`, `Index`: `int`, `Intro`: `varchar`, `Lang`: `varchar`, `LastLog`: `timestamp`, `LastPost`: `datetime`, `Nick`: `varchar`, `Reveal`: `tinyint`, `TS`: `tinyint`, `Userpic`: `int`, `Visitor`: `int`, `Widget`: `varchar`}
	_              = bytes.MinRead
)

func testBloggersUpdate(t *testing.T) {
	t.Parallel()

	if len(bloggerColumns) == len(bloggerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	if err = blogger.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBloggersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bloggerColumns) == len(bloggerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	blogger := &Blogger{}
	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, blogger, bloggerDBTypes, true, bloggerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bloggerColumns, bloggerPrimaryKeyColumns) {
		fields = bloggerColumns
	} else {
		fields = strmangle.SetComplement(
			bloggerColumns,
			bloggerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(blogger))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BloggerSlice{blogger}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBloggersUpsert(t *testing.T) {
	t.Parallel()

	if len(bloggerColumns) == len(bloggerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	blogger := Blogger{}
	if err = randomize.Struct(seed, &blogger, bloggerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = blogger.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Blogger: %s", err)
	}

	count, err := Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &blogger, bloggerDBTypes, false, bloggerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Blogger struct: %s", err)
	}

	if err = blogger.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Blogger: %s", err)
	}

	count, err = Bloggers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
