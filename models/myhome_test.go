// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testMyhomes(t *testing.T) {
	t.Parallel()

	query := Myhomes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testMyhomesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = myhome.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMyhomesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Myhomes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMyhomesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MyhomeSlice{myhome}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testMyhomesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MyhomeExists(tx, myhome.Mid)
	if err != nil {
		t.Errorf("Unable to check if Myhome exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MyhomeExistsG to return true, but got false.")
	}
}
func testMyhomesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	myhomeFound, err := FindMyhome(tx, myhome.Mid)
	if err != nil {
		t.Error(err)
	}

	if myhomeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testMyhomesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Myhomes(tx).Bind(myhome); err != nil {
		t.Error(err)
	}
}

func testMyhomesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Myhomes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMyhomesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhomeOne := &Myhome{}
	myhomeTwo := &Myhome{}
	if err = randomize.Struct(seed, myhomeOne, myhomeDBTypes, false, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}
	if err = randomize.Struct(seed, myhomeTwo, myhomeDBTypes, false, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhomeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = myhomeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Myhomes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMyhomesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	myhomeOne := &Myhome{}
	myhomeTwo := &Myhome{}
	if err = randomize.Struct(seed, myhomeOne, myhomeDBTypes, false, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}
	if err = randomize.Struct(seed, myhomeTwo, myhomeDBTypes, false, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhomeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = myhomeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func myhomeBeforeInsertHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeAfterInsertHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeAfterSelectHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeBeforeUpdateHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeAfterUpdateHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeBeforeDeleteHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeAfterDeleteHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeBeforeUpsertHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func myhomeAfterUpsertHook(e boil.Executor, o *Myhome) error {
	*o = Myhome{}
	return nil
}

func testMyhomesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Myhome{}
	o := &Myhome{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, myhomeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Myhome object: %s", err)
	}

	AddMyhomeHook(boil.BeforeInsertHook, myhomeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	myhomeBeforeInsertHooks = []MyhomeHook{}

	AddMyhomeHook(boil.AfterInsertHook, myhomeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	myhomeAfterInsertHooks = []MyhomeHook{}

	AddMyhomeHook(boil.AfterSelectHook, myhomeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	myhomeAfterSelectHooks = []MyhomeHook{}

	AddMyhomeHook(boil.BeforeUpdateHook, myhomeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	myhomeBeforeUpdateHooks = []MyhomeHook{}

	AddMyhomeHook(boil.AfterUpdateHook, myhomeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	myhomeAfterUpdateHooks = []MyhomeHook{}

	AddMyhomeHook(boil.BeforeDeleteHook, myhomeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	myhomeBeforeDeleteHooks = []MyhomeHook{}

	AddMyhomeHook(boil.AfterDeleteHook, myhomeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	myhomeAfterDeleteHooks = []MyhomeHook{}

	AddMyhomeHook(boil.BeforeUpsertHook, myhomeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	myhomeBeforeUpsertHooks = []MyhomeHook{}

	AddMyhomeHook(boil.AfterUpsertHook, myhomeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	myhomeAfterUpsertHooks = []MyhomeHook{}
}
func testMyhomesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMyhomesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx, myhomeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMyhomesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = myhome.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMyhomesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MyhomeSlice{myhome}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testMyhomesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Myhomes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	myhomeDBTypes = map[string]string{`Blogger`: `int`, `Mid`: `int`, `Pos`: `varchar`, `Tag`: `int`}
	_             = bytes.MinRead
)

func testMyhomesUpdate(t *testing.T) {
	t.Parallel()

	if len(myhomeColumns) == len(myhomePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	if err = myhome.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMyhomesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(myhomeColumns) == len(myhomePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	myhome := &Myhome{}
	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, myhome, myhomeDBTypes, true, myhomePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(myhomeColumns, myhomePrimaryKeyColumns) {
		fields = myhomeColumns
	} else {
		fields = strmangle.SetComplement(
			myhomeColumns,
			myhomePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(myhome))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MyhomeSlice{myhome}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testMyhomesUpsert(t *testing.T) {
	t.Parallel()

	if len(myhomeColumns) == len(myhomePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	myhome := Myhome{}
	if err = randomize.Struct(seed, &myhome, myhomeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = myhome.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Myhome: %s", err)
	}

	count, err := Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &myhome, myhomeDBTypes, false, myhomePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Myhome struct: %s", err)
	}

	if err = myhome.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Myhome: %s", err)
	}

	count, err = Myhomes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
