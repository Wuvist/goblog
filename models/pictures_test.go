// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPictures(t *testing.T) {
	t.Parallel()

	query := Pictures(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPicturesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = picture.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPicturesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pictures(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPicturesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PictureSlice{picture}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPicturesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PictureExists(tx, picture.ID)
	if err != nil {
		t.Errorf("Unable to check if Picture exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PictureExistsG to return true, but got false.")
	}
}
func testPicturesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	pictureFound, err := FindPicture(tx, picture.ID)
	if err != nil {
		t.Error(err)
	}

	if pictureFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPicturesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pictures(tx).Bind(picture); err != nil {
		t.Error(err)
	}
}

func testPicturesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Pictures(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPicturesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pictureOne := &Picture{}
	pictureTwo := &Picture{}
	if err = randomize.Struct(seed, pictureOne, pictureDBTypes, false, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}
	if err = randomize.Struct(seed, pictureTwo, pictureDBTypes, false, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pictureOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = pictureTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pictures(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPicturesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pictureOne := &Picture{}
	pictureTwo := &Picture{}
	if err = randomize.Struct(seed, pictureOne, pictureDBTypes, false, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}
	if err = randomize.Struct(seed, pictureTwo, pictureDBTypes, false, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pictureOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = pictureTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func pictureBeforeInsertHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureAfterInsertHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureAfterSelectHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureBeforeUpdateHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureAfterUpdateHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureBeforeDeleteHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureAfterDeleteHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureBeforeUpsertHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func pictureAfterUpsertHook(e boil.Executor, o *Picture) error {
	*o = Picture{}
	return nil
}

func testPicturesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Picture{}
	o := &Picture{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pictureDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Picture object: %s", err)
	}

	AddPictureHook(boil.BeforeInsertHook, pictureBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pictureBeforeInsertHooks = []PictureHook{}

	AddPictureHook(boil.AfterInsertHook, pictureAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pictureAfterInsertHooks = []PictureHook{}

	AddPictureHook(boil.AfterSelectHook, pictureAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pictureAfterSelectHooks = []PictureHook{}

	AddPictureHook(boil.BeforeUpdateHook, pictureBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pictureBeforeUpdateHooks = []PictureHook{}

	AddPictureHook(boil.AfterUpdateHook, pictureAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pictureAfterUpdateHooks = []PictureHook{}

	AddPictureHook(boil.BeforeDeleteHook, pictureBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pictureBeforeDeleteHooks = []PictureHook{}

	AddPictureHook(boil.AfterDeleteHook, pictureAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pictureAfterDeleteHooks = []PictureHook{}

	AddPictureHook(boil.BeforeUpsertHook, pictureBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pictureBeforeUpsertHooks = []PictureHook{}

	AddPictureHook(boil.AfterUpsertHook, pictureAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pictureAfterUpsertHooks = []PictureHook{}
}
func testPicturesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPicturesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx, pictureColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPicturesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = picture.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPicturesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PictureSlice{picture}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPicturesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pictures(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pictureDBTypes = map[string]string{`Height`: `int`, `ID`: `int`, `PictureURL`: `longtext`, `Type`: `char`, `User`: `int`, `Width`: `int`}
	_              = bytes.MinRead
)

func testPicturesUpdate(t *testing.T) {
	t.Parallel()

	if len(pictureColumns) == len(picturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	if err = picture.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPicturesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pictureColumns) == len(picturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	picture := &Picture{}
	if err = randomize.Struct(seed, picture, pictureDBTypes, true, pictureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, picture, pictureDBTypes, true, picturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pictureColumns, picturePrimaryKeyColumns) {
		fields = pictureColumns
	} else {
		fields = strmangle.SetComplement(
			pictureColumns,
			picturePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(picture))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PictureSlice{picture}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPicturesUpsert(t *testing.T) {
	t.Parallel()

	if len(pictureColumns) == len(picturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	picture := Picture{}
	if err = randomize.Struct(seed, &picture, pictureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picture.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Picture: %s", err)
	}

	count, err := Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &picture, pictureDBTypes, false, picturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Picture struct: %s", err)
	}

	if err = picture.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Picture: %s", err)
	}

	count, err = Pictures(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
