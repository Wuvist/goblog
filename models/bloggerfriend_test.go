// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBloggerfriends(t *testing.T) {
	t.Parallel()

	query := Bloggerfriends(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBloggerfriendsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = bloggerfriend.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBloggerfriendsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Bloggerfriends(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBloggerfriendsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BloggerfriendSlice{bloggerfriend}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBloggerfriendsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BloggerfriendExists(tx, bloggerfriend.Blogger, bloggerfriend.Friend)
	if err != nil {
		t.Errorf("Unable to check if Bloggerfriend exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BloggerfriendExistsG to return true, but got false.")
	}
}
func testBloggerfriendsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	bloggerfriendFound, err := FindBloggerfriend(tx, bloggerfriend.Blogger, bloggerfriend.Friend)
	if err != nil {
		t.Error(err)
	}

	if bloggerfriendFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBloggerfriendsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Bloggerfriends(tx).Bind(bloggerfriend); err != nil {
		t.Error(err)
	}
}

func testBloggerfriendsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Bloggerfriends(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBloggerfriendsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriendOne := &Bloggerfriend{}
	bloggerfriendTwo := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriendOne, bloggerfriendDBTypes, false, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}
	if err = randomize.Struct(seed, bloggerfriendTwo, bloggerfriendDBTypes, false, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriendOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bloggerfriendTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Bloggerfriends(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBloggerfriendsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bloggerfriendOne := &Bloggerfriend{}
	bloggerfriendTwo := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriendOne, bloggerfriendDBTypes, false, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}
	if err = randomize.Struct(seed, bloggerfriendTwo, bloggerfriendDBTypes, false, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriendOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = bloggerfriendTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func bloggerfriendBeforeInsertHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendAfterInsertHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendAfterSelectHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendBeforeUpdateHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendAfterUpdateHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendBeforeDeleteHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendAfterDeleteHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendBeforeUpsertHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func bloggerfriendAfterUpsertHook(e boil.Executor, o *Bloggerfriend) error {
	*o = Bloggerfriend{}
	return nil
}

func testBloggerfriendsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Bloggerfriend{}
	o := &Bloggerfriend{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bloggerfriendDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend object: %s", err)
	}

	AddBloggerfriendHook(boil.BeforeInsertHook, bloggerfriendBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bloggerfriendBeforeInsertHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.AfterInsertHook, bloggerfriendAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bloggerfriendAfterInsertHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.AfterSelectHook, bloggerfriendAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bloggerfriendAfterSelectHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.BeforeUpdateHook, bloggerfriendBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bloggerfriendBeforeUpdateHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.AfterUpdateHook, bloggerfriendAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bloggerfriendAfterUpdateHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.BeforeDeleteHook, bloggerfriendBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bloggerfriendBeforeDeleteHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.AfterDeleteHook, bloggerfriendAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bloggerfriendAfterDeleteHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.BeforeUpsertHook, bloggerfriendBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bloggerfriendBeforeUpsertHooks = []BloggerfriendHook{}

	AddBloggerfriendHook(boil.AfterUpsertHook, bloggerfriendAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bloggerfriendAfterUpsertHooks = []BloggerfriendHook{}
}
func testBloggerfriendsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBloggerfriendsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx, bloggerfriendColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBloggerfriendsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = bloggerfriend.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBloggerfriendsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BloggerfriendSlice{bloggerfriend}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBloggerfriendsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Bloggerfriends(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bloggerfriendDBTypes = map[string]string{`Blogger`: `int`, `Friend`: `int`, `Reveal`: `tinyint`}
	_                    = bytes.MinRead
)

func testBloggerfriendsUpdate(t *testing.T) {
	t.Parallel()

	if len(bloggerfriendColumns) == len(bloggerfriendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	if err = bloggerfriend.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBloggerfriendsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bloggerfriendColumns) == len(bloggerfriendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	bloggerfriend := &Bloggerfriend{}
	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, bloggerfriend, bloggerfriendDBTypes, true, bloggerfriendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bloggerfriendColumns, bloggerfriendPrimaryKeyColumns) {
		fields = bloggerfriendColumns
	} else {
		fields = strmangle.SetComplement(
			bloggerfriendColumns,
			bloggerfriendPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(bloggerfriend))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BloggerfriendSlice{bloggerfriend}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBloggerfriendsUpsert(t *testing.T) {
	t.Parallel()

	if len(bloggerfriendColumns) == len(bloggerfriendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	bloggerfriend := Bloggerfriend{}
	if err = randomize.Struct(seed, &bloggerfriend, bloggerfriendDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = bloggerfriend.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Bloggerfriend: %s", err)
	}

	count, err := Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &bloggerfriend, bloggerfriendDBTypes, false, bloggerfriendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bloggerfriend struct: %s", err)
	}

	if err = bloggerfriend.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Bloggerfriend: %s", err)
	}

	count, err = Bloggerfriends(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
