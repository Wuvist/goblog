// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testAnnouncements(t *testing.T) {
	t.Parallel()

	query := Announcements(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAnnouncementsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = announcement.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnnouncementsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Announcements(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnnouncementsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AnnouncementSlice{announcement}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAnnouncementsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AnnouncementExists(tx, announcement.ID)
	if err != nil {
		t.Errorf("Unable to check if Announcement exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnnouncementExistsG to return true, but got false.")
	}
}
func testAnnouncementsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	announcementFound, err := FindAnnouncement(tx, announcement.ID)
	if err != nil {
		t.Error(err)
	}

	if announcementFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAnnouncementsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Announcements(tx).Bind(announcement); err != nil {
		t.Error(err)
	}
}

func testAnnouncementsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Announcements(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnnouncementsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcementOne := &Announcement{}
	announcementTwo := &Announcement{}
	if err = randomize.Struct(seed, announcementOne, announcementDBTypes, false, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}
	if err = randomize.Struct(seed, announcementTwo, announcementDBTypes, false, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcementOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = announcementTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Announcements(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnnouncementsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	announcementOne := &Announcement{}
	announcementTwo := &Announcement{}
	if err = randomize.Struct(seed, announcementOne, announcementDBTypes, false, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}
	if err = randomize.Struct(seed, announcementTwo, announcementDBTypes, false, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcementOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = announcementTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func announcementBeforeInsertHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementAfterInsertHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementAfterSelectHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementBeforeUpdateHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementAfterUpdateHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementBeforeDeleteHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementAfterDeleteHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementBeforeUpsertHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func announcementAfterUpsertHook(e boil.Executor, o *Announcement) error {
	*o = Announcement{}
	return nil
}

func testAnnouncementsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Announcement{}
	o := &Announcement{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, announcementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Announcement object: %s", err)
	}

	AddAnnouncementHook(boil.BeforeInsertHook, announcementBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	announcementBeforeInsertHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.AfterInsertHook, announcementAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	announcementAfterInsertHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.AfterSelectHook, announcementAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	announcementAfterSelectHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.BeforeUpdateHook, announcementBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	announcementBeforeUpdateHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.AfterUpdateHook, announcementAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	announcementAfterUpdateHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.BeforeDeleteHook, announcementBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	announcementBeforeDeleteHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.AfterDeleteHook, announcementAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	announcementAfterDeleteHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.BeforeUpsertHook, announcementBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	announcementBeforeUpsertHooks = []AnnouncementHook{}

	AddAnnouncementHook(boil.AfterUpsertHook, announcementAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	announcementAfterUpsertHooks = []AnnouncementHook{}
}
func testAnnouncementsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnnouncementsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx, announcementColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnnouncementsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = announcement.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAnnouncementsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AnnouncementSlice{announcement}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAnnouncementsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Announcements(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	announcementDBTypes = map[string]string{`Addtime`: `timestamp`, `Content`: `longtext`, `ID`: `int`, `Subject`: `varchar`}
	_                   = bytes.MinRead
)

func testAnnouncementsUpdate(t *testing.T) {
	t.Parallel()

	if len(announcementColumns) == len(announcementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	if err = announcement.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAnnouncementsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(announcementColumns) == len(announcementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	announcement := &Announcement{}
	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, announcement, announcementDBTypes, true, announcementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(announcementColumns, announcementPrimaryKeyColumns) {
		fields = announcementColumns
	} else {
		fields = strmangle.SetComplement(
			announcementColumns,
			announcementPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(announcement))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AnnouncementSlice{announcement}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAnnouncementsUpsert(t *testing.T) {
	t.Parallel()

	if len(announcementColumns) == len(announcementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	announcement := Announcement{}
	if err = randomize.Struct(seed, &announcement, announcementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = announcement.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Announcement: %s", err)
	}

	count, err := Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &announcement, announcementDBTypes, false, announcementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Announcement struct: %s", err)
	}

	if err = announcement.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Announcement: %s", err)
	}

	count, err = Announcements(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
