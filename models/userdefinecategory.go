// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Userdefinecategory is an object representing the database table.
type Userdefinecategory struct {
	Index   null.Int64 `boil:"index" json:"index,omitempty" toml:"index" yaml:"index,omitempty"`
	Blogger int64      `boil:"blogger" json:"blogger" toml:"blogger" yaml:"blogger"`
	Cate    string     `boil:"cate" json:"cate" toml:"cate" yaml:"cate"`
	Files   int64      `boil:"files" json:"files" toml:"files" yaml:"files"`

	R *userdefinecategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userdefinecategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserdefinecategoryColumns = struct {
	Index   string
	Blogger string
	Cate    string
	Files   string
}{
	Index:   "index",
	Blogger: "blogger",
	Cate:    "cate",
	Files:   "files",
}

var UserdefinecategoryTableColumns = struct {
	Index   string
	Blogger string
	Cate    string
	Files   string
}{
	Index:   "userdefinecategory.index",
	Blogger: "userdefinecategory.blogger",
	Cate:    "userdefinecategory.cate",
	Files:   "userdefinecategory.files",
}

// Generated where

var UserdefinecategoryWhere = struct {
	Index   whereHelpernull_Int64
	Blogger whereHelperint64
	Cate    whereHelperstring
	Files   whereHelperint64
}{
	Index:   whereHelpernull_Int64{field: "\"userdefinecategory\".\"index\""},
	Blogger: whereHelperint64{field: "\"userdefinecategory\".\"blogger\""},
	Cate:    whereHelperstring{field: "\"userdefinecategory\".\"cate\""},
	Files:   whereHelperint64{field: "\"userdefinecategory\".\"files\""},
}

// UserdefinecategoryRels is where relationship names are stored.
var UserdefinecategoryRels = struct {
}{}

// userdefinecategoryR is where relationships are stored.
type userdefinecategoryR struct {
}

// NewStruct creates a new relationship struct
func (*userdefinecategoryR) NewStruct() *userdefinecategoryR {
	return &userdefinecategoryR{}
}

// userdefinecategoryL is where Load methods for each relationship are stored.
type userdefinecategoryL struct{}

var (
	userdefinecategoryAllColumns            = []string{"index", "blogger", "cate", "files"}
	userdefinecategoryColumnsWithoutDefault = []string{"blogger", "cate"}
	userdefinecategoryColumnsWithDefault    = []string{"index", "files"}
	userdefinecategoryPrimaryKeyColumns     = []string{"index"}
	userdefinecategoryGeneratedColumns      = []string{"index"}
)

type (
	// UserdefinecategorySlice is an alias for a slice of pointers to Userdefinecategory.
	// This should almost always be used instead of []Userdefinecategory.
	UserdefinecategorySlice []*Userdefinecategory
	// UserdefinecategoryHook is the signature for custom Userdefinecategory hook methods
	UserdefinecategoryHook func(context.Context, boil.ContextExecutor, *Userdefinecategory) error

	userdefinecategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userdefinecategoryType                 = reflect.TypeOf(&Userdefinecategory{})
	userdefinecategoryMapping              = queries.MakeStructMapping(userdefinecategoryType)
	userdefinecategoryPrimaryKeyMapping, _ = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, userdefinecategoryPrimaryKeyColumns)
	userdefinecategoryInsertCacheMut       sync.RWMutex
	userdefinecategoryInsertCache          = make(map[string]insertCache)
	userdefinecategoryUpdateCacheMut       sync.RWMutex
	userdefinecategoryUpdateCache          = make(map[string]updateCache)
	userdefinecategoryUpsertCacheMut       sync.RWMutex
	userdefinecategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userdefinecategoryAfterSelectMu sync.Mutex
var userdefinecategoryAfterSelectHooks []UserdefinecategoryHook

var userdefinecategoryBeforeInsertMu sync.Mutex
var userdefinecategoryBeforeInsertHooks []UserdefinecategoryHook
var userdefinecategoryAfterInsertMu sync.Mutex
var userdefinecategoryAfterInsertHooks []UserdefinecategoryHook

var userdefinecategoryBeforeUpdateMu sync.Mutex
var userdefinecategoryBeforeUpdateHooks []UserdefinecategoryHook
var userdefinecategoryAfterUpdateMu sync.Mutex
var userdefinecategoryAfterUpdateHooks []UserdefinecategoryHook

var userdefinecategoryBeforeDeleteMu sync.Mutex
var userdefinecategoryBeforeDeleteHooks []UserdefinecategoryHook
var userdefinecategoryAfterDeleteMu sync.Mutex
var userdefinecategoryAfterDeleteHooks []UserdefinecategoryHook

var userdefinecategoryBeforeUpsertMu sync.Mutex
var userdefinecategoryBeforeUpsertHooks []UserdefinecategoryHook
var userdefinecategoryAfterUpsertMu sync.Mutex
var userdefinecategoryAfterUpsertHooks []UserdefinecategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Userdefinecategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Userdefinecategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Userdefinecategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Userdefinecategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Userdefinecategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Userdefinecategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Userdefinecategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Userdefinecategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Userdefinecategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userdefinecategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserdefinecategoryHook registers your hook function for all future operations.
func AddUserdefinecategoryHook(hookPoint boil.HookPoint, userdefinecategoryHook UserdefinecategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userdefinecategoryAfterSelectMu.Lock()
		userdefinecategoryAfterSelectHooks = append(userdefinecategoryAfterSelectHooks, userdefinecategoryHook)
		userdefinecategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userdefinecategoryBeforeInsertMu.Lock()
		userdefinecategoryBeforeInsertHooks = append(userdefinecategoryBeforeInsertHooks, userdefinecategoryHook)
		userdefinecategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userdefinecategoryAfterInsertMu.Lock()
		userdefinecategoryAfterInsertHooks = append(userdefinecategoryAfterInsertHooks, userdefinecategoryHook)
		userdefinecategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userdefinecategoryBeforeUpdateMu.Lock()
		userdefinecategoryBeforeUpdateHooks = append(userdefinecategoryBeforeUpdateHooks, userdefinecategoryHook)
		userdefinecategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userdefinecategoryAfterUpdateMu.Lock()
		userdefinecategoryAfterUpdateHooks = append(userdefinecategoryAfterUpdateHooks, userdefinecategoryHook)
		userdefinecategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userdefinecategoryBeforeDeleteMu.Lock()
		userdefinecategoryBeforeDeleteHooks = append(userdefinecategoryBeforeDeleteHooks, userdefinecategoryHook)
		userdefinecategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userdefinecategoryAfterDeleteMu.Lock()
		userdefinecategoryAfterDeleteHooks = append(userdefinecategoryAfterDeleteHooks, userdefinecategoryHook)
		userdefinecategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userdefinecategoryBeforeUpsertMu.Lock()
		userdefinecategoryBeforeUpsertHooks = append(userdefinecategoryBeforeUpsertHooks, userdefinecategoryHook)
		userdefinecategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userdefinecategoryAfterUpsertMu.Lock()
		userdefinecategoryAfterUpsertHooks = append(userdefinecategoryAfterUpsertHooks, userdefinecategoryHook)
		userdefinecategoryAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userdefinecategory record from the query using the global executor.
func (q userdefinecategoryQuery) OneG(ctx context.Context) (*Userdefinecategory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userdefinecategory record from the query.
func (q userdefinecategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Userdefinecategory, error) {
	o := &Userdefinecategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for userdefinecategory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Userdefinecategory records from the query using the global executor.
func (q userdefinecategoryQuery) AllG(ctx context.Context) (UserdefinecategorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Userdefinecategory records from the query.
func (q userdefinecategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserdefinecategorySlice, error) {
	var o []*Userdefinecategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Userdefinecategory slice")
	}

	if len(userdefinecategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Userdefinecategory records in the query using the global executor
func (q userdefinecategoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Userdefinecategory records in the query.
func (q userdefinecategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count userdefinecategory rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userdefinecategoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userdefinecategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if userdefinecategory exists")
	}

	return count > 0, nil
}

// Userdefinecategories retrieves all the records using an executor.
func Userdefinecategories(mods ...qm.QueryMod) userdefinecategoryQuery {
	mods = append(mods, qm.From("\"userdefinecategory\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"userdefinecategory\".*"})
	}

	return userdefinecategoryQuery{q}
}

// FindUserdefinecategoryG retrieves a single record by ID.
func FindUserdefinecategoryG(ctx context.Context, index null.Int64, selectCols ...string) (*Userdefinecategory, error) {
	return FindUserdefinecategory(ctx, boil.GetContextDB(), index, selectCols...)
}

// FindUserdefinecategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserdefinecategory(ctx context.Context, exec boil.ContextExecutor, index null.Int64, selectCols ...string) (*Userdefinecategory, error) {
	userdefinecategoryObj := &Userdefinecategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"userdefinecategory\" where \"index\"=?", sel,
	)

	q := queries.Raw(query, index)

	err := q.Bind(ctx, exec, userdefinecategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from userdefinecategory")
	}

	if err = userdefinecategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userdefinecategoryObj, err
	}

	return userdefinecategoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Userdefinecategory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Userdefinecategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no userdefinecategory provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userdefinecategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userdefinecategoryInsertCacheMut.RLock()
	cache, cached := userdefinecategoryInsertCache[key]
	userdefinecategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userdefinecategoryAllColumns,
			userdefinecategoryColumnsWithDefault,
			userdefinecategoryColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, userdefinecategoryGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"userdefinecategory\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"userdefinecategory\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into userdefinecategory")
	}

	if !cached {
		userdefinecategoryInsertCacheMut.Lock()
		userdefinecategoryInsertCache[key] = cache
		userdefinecategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Userdefinecategory record using the global executor.
// See Update for more documentation.
func (o *Userdefinecategory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Userdefinecategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Userdefinecategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userdefinecategoryUpdateCacheMut.RLock()
	cache, cached := userdefinecategoryUpdateCache[key]
	userdefinecategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userdefinecategoryAllColumns,
			userdefinecategoryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, userdefinecategoryGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update userdefinecategory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"userdefinecategory\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, userdefinecategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, append(wl, userdefinecategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update userdefinecategory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for userdefinecategory")
	}

	if !cached {
		userdefinecategoryUpdateCacheMut.Lock()
		userdefinecategoryUpdateCache[key] = cache
		userdefinecategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userdefinecategoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userdefinecategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for userdefinecategory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for userdefinecategory")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserdefinecategorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserdefinecategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userdefinecategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"userdefinecategory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userdefinecategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userdefinecategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userdefinecategory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Userdefinecategory) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Userdefinecategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no userdefinecategory provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userdefinecategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userdefinecategoryUpsertCacheMut.RLock()
	cache, cached := userdefinecategoryUpsertCache[key]
	userdefinecategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userdefinecategoryAllColumns,
			userdefinecategoryColumnsWithDefault,
			userdefinecategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userdefinecategoryAllColumns,
			userdefinecategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert userdefinecategory, could not build update column list")
		}

		ret := strmangle.SetComplement(userdefinecategoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userdefinecategoryPrimaryKeyColumns))
			copy(conflict, userdefinecategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"userdefinecategory\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert userdefinecategory")
	}

	if !cached {
		userdefinecategoryUpsertCacheMut.Lock()
		userdefinecategoryUpsertCache[key] = cache
		userdefinecategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Userdefinecategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Userdefinecategory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Userdefinecategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Userdefinecategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Userdefinecategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userdefinecategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"userdefinecategory\" WHERE \"index\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from userdefinecategory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for userdefinecategory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userdefinecategoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q userdefinecategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userdefinecategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userdefinecategory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for userdefinecategory")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserdefinecategorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserdefinecategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userdefinecategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userdefinecategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"userdefinecategory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userdefinecategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userdefinecategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for userdefinecategory")
	}

	if len(userdefinecategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Userdefinecategory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Userdefinecategory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Userdefinecategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserdefinecategory(ctx, exec, o.Index)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserdefinecategorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserdefinecategorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserdefinecategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserdefinecategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userdefinecategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"userdefinecategory\".* FROM \"userdefinecategory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userdefinecategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserdefinecategorySlice")
	}

	*o = slice

	return nil
}

// UserdefinecategoryExistsG checks if the Userdefinecategory row exists.
func UserdefinecategoryExistsG(ctx context.Context, index null.Int64) (bool, error) {
	return UserdefinecategoryExists(ctx, boil.GetContextDB(), index)
}

// UserdefinecategoryExists checks if the Userdefinecategory row exists.
func UserdefinecategoryExists(ctx context.Context, exec boil.ContextExecutor, index null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"userdefinecategory\" where \"index\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, index)
	}
	row := exec.QueryRowContext(ctx, sql, index)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if userdefinecategory exists")
	}

	return exists, nil
}

// Exists checks if the Userdefinecategory row exists.
func (o *Userdefinecategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserdefinecategoryExists(ctx, exec, o.Index)
}
