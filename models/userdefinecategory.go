// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Userdefinecategory is an object representing the database table.
type Userdefinecategory struct {
	Index   int    `boil:"index" json:"index" toml:"index" yaml:"index"`
	Blogger int    `boil:"blogger" json:"blogger" toml:"blogger" yaml:"blogger"`
	Cate    string `boil:"cate" json:"cate" toml:"cate" yaml:"cate"`
	Files   int    `boil:"files" json:"files" toml:"files" yaml:"files"`

	R *userdefinecategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userdefinecategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserdefinecategoryColumns = struct {
	Index   string
	Blogger string
	Cate    string
	Files   string
}{
	Index:   "index",
	Blogger: "blogger",
	Cate:    "cate",
	Files:   "files",
}

// userdefinecategoryR is where relationships are stored.
type userdefinecategoryR struct {
}

// userdefinecategoryL is where Load methods for each relationship are stored.
type userdefinecategoryL struct{}

var (
	userdefinecategoryColumns               = []string{"index", "blogger", "cate", "files"}
	userdefinecategoryColumnsWithoutDefault = []string{"blogger", "cate"}
	userdefinecategoryColumnsWithDefault    = []string{"index", "files"}
	userdefinecategoryPrimaryKeyColumns     = []string{"index"}
)

type (
	// UserdefinecategorySlice is an alias for a slice of pointers to Userdefinecategory.
	// This should generally be used opposed to []Userdefinecategory.
	UserdefinecategorySlice []*Userdefinecategory
	// UserdefinecategoryHook is the signature for custom Userdefinecategory hook methods
	UserdefinecategoryHook func(boil.Executor, *Userdefinecategory) error

	userdefinecategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userdefinecategoryType                 = reflect.TypeOf(&Userdefinecategory{})
	userdefinecategoryMapping              = queries.MakeStructMapping(userdefinecategoryType)
	userdefinecategoryPrimaryKeyMapping, _ = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, userdefinecategoryPrimaryKeyColumns)
	userdefinecategoryInsertCacheMut       sync.RWMutex
	userdefinecategoryInsertCache          = make(map[string]insertCache)
	userdefinecategoryUpdateCacheMut       sync.RWMutex
	userdefinecategoryUpdateCache          = make(map[string]updateCache)
	userdefinecategoryUpsertCacheMut       sync.RWMutex
	userdefinecategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userdefinecategoryBeforeInsertHooks []UserdefinecategoryHook
var userdefinecategoryBeforeUpdateHooks []UserdefinecategoryHook
var userdefinecategoryBeforeDeleteHooks []UserdefinecategoryHook
var userdefinecategoryBeforeUpsertHooks []UserdefinecategoryHook

var userdefinecategoryAfterInsertHooks []UserdefinecategoryHook
var userdefinecategoryAfterSelectHooks []UserdefinecategoryHook
var userdefinecategoryAfterUpdateHooks []UserdefinecategoryHook
var userdefinecategoryAfterDeleteHooks []UserdefinecategoryHook
var userdefinecategoryAfterUpsertHooks []UserdefinecategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Userdefinecategory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Userdefinecategory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Userdefinecategory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Userdefinecategory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Userdefinecategory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Userdefinecategory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Userdefinecategory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Userdefinecategory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Userdefinecategory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userdefinecategoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserdefinecategoryHook registers your hook function for all future operations.
func AddUserdefinecategoryHook(hookPoint boil.HookPoint, userdefinecategoryHook UserdefinecategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userdefinecategoryBeforeInsertHooks = append(userdefinecategoryBeforeInsertHooks, userdefinecategoryHook)
	case boil.BeforeUpdateHook:
		userdefinecategoryBeforeUpdateHooks = append(userdefinecategoryBeforeUpdateHooks, userdefinecategoryHook)
	case boil.BeforeDeleteHook:
		userdefinecategoryBeforeDeleteHooks = append(userdefinecategoryBeforeDeleteHooks, userdefinecategoryHook)
	case boil.BeforeUpsertHook:
		userdefinecategoryBeforeUpsertHooks = append(userdefinecategoryBeforeUpsertHooks, userdefinecategoryHook)
	case boil.AfterInsertHook:
		userdefinecategoryAfterInsertHooks = append(userdefinecategoryAfterInsertHooks, userdefinecategoryHook)
	case boil.AfterSelectHook:
		userdefinecategoryAfterSelectHooks = append(userdefinecategoryAfterSelectHooks, userdefinecategoryHook)
	case boil.AfterUpdateHook:
		userdefinecategoryAfterUpdateHooks = append(userdefinecategoryAfterUpdateHooks, userdefinecategoryHook)
	case boil.AfterDeleteHook:
		userdefinecategoryAfterDeleteHooks = append(userdefinecategoryAfterDeleteHooks, userdefinecategoryHook)
	case boil.AfterUpsertHook:
		userdefinecategoryAfterUpsertHooks = append(userdefinecategoryAfterUpsertHooks, userdefinecategoryHook)
	}
}

// OneP returns a single userdefinecategory record from the query, and panics on error.
func (q userdefinecategoryQuery) OneP() *Userdefinecategory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userdefinecategory record from the query.
func (q userdefinecategoryQuery) One() (*Userdefinecategory, error) {
	o := &Userdefinecategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for userdefinecategory")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Userdefinecategory records from the query, and panics on error.
func (q userdefinecategoryQuery) AllP() UserdefinecategorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Userdefinecategory records from the query.
func (q userdefinecategoryQuery) All() (UserdefinecategorySlice, error) {
	var o []*Userdefinecategory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Userdefinecategory slice")
	}

	if len(userdefinecategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Userdefinecategory records in the query, and panics on error.
func (q userdefinecategoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Userdefinecategory records in the query.
func (q userdefinecategoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count userdefinecategory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userdefinecategoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userdefinecategoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if userdefinecategory exists")
	}

	return count > 0, nil
}

// UserdefinecategoriesG retrieves all records.
func UserdefinecategoriesG(mods ...qm.QueryMod) userdefinecategoryQuery {
	return Userdefinecategories(boil.GetDB(), mods...)
}

// Userdefinecategories retrieves all the records using an executor.
func Userdefinecategories(exec boil.Executor, mods ...qm.QueryMod) userdefinecategoryQuery {
	mods = append(mods, qm.From("`userdefinecategory`"))
	return userdefinecategoryQuery{NewQuery(exec, mods...)}
}

// FindUserdefinecategoryG retrieves a single record by ID.
func FindUserdefinecategoryG(index int, selectCols ...string) (*Userdefinecategory, error) {
	return FindUserdefinecategory(boil.GetDB(), index, selectCols...)
}

// FindUserdefinecategoryGP retrieves a single record by ID, and panics on error.
func FindUserdefinecategoryGP(index int, selectCols ...string) *Userdefinecategory {
	retobj, err := FindUserdefinecategory(boil.GetDB(), index, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserdefinecategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserdefinecategory(exec boil.Executor, index int, selectCols ...string) (*Userdefinecategory, error) {
	userdefinecategoryObj := &Userdefinecategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `userdefinecategory` where `index`=?", sel,
	)

	q := queries.Raw(exec, query, index)

	err := q.Bind(userdefinecategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from userdefinecategory")
	}

	return userdefinecategoryObj, nil
}

// FindUserdefinecategoryP retrieves a single record by ID with an executor, and panics on error.
func FindUserdefinecategoryP(exec boil.Executor, index int, selectCols ...string) *Userdefinecategory {
	retobj, err := FindUserdefinecategory(exec, index, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Userdefinecategory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Userdefinecategory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Userdefinecategory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Userdefinecategory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no userdefinecategory provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userdefinecategoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userdefinecategoryInsertCacheMut.RLock()
	cache, cached := userdefinecategoryInsertCache[key]
	userdefinecategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userdefinecategoryColumns,
			userdefinecategoryColumnsWithDefault,
			userdefinecategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `userdefinecategory` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `userdefinecategory` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `userdefinecategory` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userdefinecategoryPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into userdefinecategory")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Index = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userdefinecategoryMapping["Index"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Index,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for userdefinecategory")
	}

CacheNoHooks:
	if !cached {
		userdefinecategoryInsertCacheMut.Lock()
		userdefinecategoryInsertCache[key] = cache
		userdefinecategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Userdefinecategory record. See Update for
// whitelist behavior description.
func (o *Userdefinecategory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Userdefinecategory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Userdefinecategory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Userdefinecategory, and panics on error.
// See Update for whitelist behavior description.
func (o *Userdefinecategory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Userdefinecategory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Userdefinecategory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userdefinecategoryUpdateCacheMut.RLock()
	cache, cached := userdefinecategoryUpdateCache[key]
	userdefinecategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userdefinecategoryColumns,
			userdefinecategoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update userdefinecategory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `userdefinecategory` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userdefinecategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, append(wl, userdefinecategoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update userdefinecategory row")
	}

	if !cached {
		userdefinecategoryUpdateCacheMut.Lock()
		userdefinecategoryUpdateCache[key] = cache
		userdefinecategoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userdefinecategoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userdefinecategoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for userdefinecategory")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserdefinecategorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserdefinecategorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserdefinecategorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserdefinecategorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userdefinecategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `userdefinecategory` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userdefinecategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userdefinecategory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Userdefinecategory) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Userdefinecategory) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Userdefinecategory) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Userdefinecategory) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no userdefinecategory provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userdefinecategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userdefinecategoryUpsertCacheMut.RLock()
	cache, cached := userdefinecategoryUpsertCache[key]
	userdefinecategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userdefinecategoryColumns,
			userdefinecategoryColumnsWithDefault,
			userdefinecategoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userdefinecategoryColumns,
			userdefinecategoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert userdefinecategory, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "userdefinecategory", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `userdefinecategory` WHERE `index`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userdefinecategoryType, userdefinecategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for userdefinecategory")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Index = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userdefinecategoryMapping["Index"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Index,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for userdefinecategory")
	}

CacheNoHooks:
	if !cached {
		userdefinecategoryUpsertCacheMut.Lock()
		userdefinecategoryUpsertCache[key] = cache
		userdefinecategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Userdefinecategory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Userdefinecategory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Userdefinecategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Userdefinecategory) DeleteG() error {
	if o == nil {
		return errors.New("models: no Userdefinecategory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Userdefinecategory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Userdefinecategory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Userdefinecategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Userdefinecategory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Userdefinecategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userdefinecategoryPrimaryKeyMapping)
	sql := "DELETE FROM `userdefinecategory` WHERE `index`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from userdefinecategory")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userdefinecategoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userdefinecategoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userdefinecategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userdefinecategory")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserdefinecategorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserdefinecategorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Userdefinecategory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserdefinecategorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserdefinecategorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Userdefinecategory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userdefinecategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userdefinecategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `userdefinecategory` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userdefinecategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userdefinecategory slice")
	}

	if len(userdefinecategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Userdefinecategory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Userdefinecategory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Userdefinecategory) ReloadG() error {
	if o == nil {
		return errors.New("models: no Userdefinecategory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Userdefinecategory) Reload(exec boil.Executor) error {
	ret, err := FindUserdefinecategory(exec, o.Index)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserdefinecategorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserdefinecategorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserdefinecategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserdefinecategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserdefinecategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userdefinecategories := UserdefinecategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userdefinecategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `userdefinecategory`.* FROM `userdefinecategory` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userdefinecategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userdefinecategories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserdefinecategorySlice")
	}

	*o = userdefinecategories

	return nil
}

// UserdefinecategoryExists checks if the Userdefinecategory row exists.
func UserdefinecategoryExists(exec boil.Executor, index int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `userdefinecategory` where `index`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, index)
	}

	row := exec.QueryRow(sql, index)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if userdefinecategory exists")
	}

	return exists, nil
}

// UserdefinecategoryExistsG checks if the Userdefinecategory row exists.
func UserdefinecategoryExistsG(index int) (bool, error) {
	return UserdefinecategoryExists(boil.GetDB(), index)
}

// UserdefinecategoryExistsGP checks if the Userdefinecategory row exists. Panics on error.
func UserdefinecategoryExistsGP(index int) bool {
	e, err := UserdefinecategoryExists(boil.GetDB(), index)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserdefinecategoryExistsP checks if the Userdefinecategory row exists. Panics on error.
func UserdefinecategoryExistsP(exec boil.Executor, index int) bool {
	e, err := UserdefinecategoryExists(exec, index)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
