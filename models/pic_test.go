// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPics(t *testing.T) {
	t.Parallel()

	query := Pics(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPicsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = pic.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPicsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pics(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPicsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PicSlice{pic}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPicsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PicExists(tx, pic.ID)
	if err != nil {
		t.Errorf("Unable to check if Pic exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PicExistsG to return true, but got false.")
	}
}
func testPicsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	picFound, err := FindPic(tx, pic.ID)
	if err != nil {
		t.Error(err)
	}

	if picFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPicsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pics(tx).Bind(pic); err != nil {
		t.Error(err)
	}
}

func testPicsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Pics(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPicsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	picOne := &Pic{}
	picTwo := &Pic{}
	if err = randomize.Struct(seed, picOne, picDBTypes, false, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}
	if err = randomize.Struct(seed, picTwo, picDBTypes, false, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = picTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pics(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPicsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	picOne := &Pic{}
	picTwo := &Pic{}
	if err = randomize.Struct(seed, picOne, picDBTypes, false, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}
	if err = randomize.Struct(seed, picTwo, picDBTypes, false, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = picOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = picTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func picBeforeInsertHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picAfterInsertHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picAfterSelectHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picBeforeUpdateHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picAfterUpdateHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picBeforeDeleteHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picAfterDeleteHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picBeforeUpsertHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func picAfterUpsertHook(e boil.Executor, o *Pic) error {
	*o = Pic{}
	return nil
}

func testPicsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Pic{}
	o := &Pic{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, picDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Pic object: %s", err)
	}

	AddPicHook(boil.BeforeInsertHook, picBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	picBeforeInsertHooks = []PicHook{}

	AddPicHook(boil.AfterInsertHook, picAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	picAfterInsertHooks = []PicHook{}

	AddPicHook(boil.AfterSelectHook, picAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	picAfterSelectHooks = []PicHook{}

	AddPicHook(boil.BeforeUpdateHook, picBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	picBeforeUpdateHooks = []PicHook{}

	AddPicHook(boil.AfterUpdateHook, picAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	picAfterUpdateHooks = []PicHook{}

	AddPicHook(boil.BeforeDeleteHook, picBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	picBeforeDeleteHooks = []PicHook{}

	AddPicHook(boil.AfterDeleteHook, picAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	picAfterDeleteHooks = []PicHook{}

	AddPicHook(boil.BeforeUpsertHook, picBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	picBeforeUpsertHooks = []PicHook{}

	AddPicHook(boil.AfterUpsertHook, picAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	picAfterUpsertHooks = []PicHook{}
}
func testPicsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPicsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx, picColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPicsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = pic.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPicsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PicSlice{pic}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPicsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pics(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	picDBTypes = map[string]string{`Comment`: `int`, `Des`: `varchar`, `FileSize`: `int`, `Height`: `int`, `Hits`: `int`, `ID`: `int`, `Icon`: `tinyint`, `Path`: `varchar`, `PubDT`: `timestamp`, `Rates`: `double`, `Status`: `int`, `UID`: `int`, `Voters`: `int`, `Width`: `int`}
	_          = bytes.MinRead
)

func testPicsUpdate(t *testing.T) {
	t.Parallel()

	if len(picColumns) == len(picPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	if err = pic.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPicsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(picColumns) == len(picPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	pic := &Pic{}
	if err = randomize.Struct(seed, pic, picDBTypes, true, picColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, pic, picDBTypes, true, picPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(picColumns, picPrimaryKeyColumns) {
		fields = picColumns
	} else {
		fields = strmangle.SetComplement(
			picColumns,
			picPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(pic))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PicSlice{pic}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPicsUpsert(t *testing.T) {
	t.Parallel()

	if len(picColumns) == len(picPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	pic := Pic{}
	if err = randomize.Struct(seed, &pic, picDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pic.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Pic: %s", err)
	}

	count, err := Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &pic, picDBTypes, false, picPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pic struct: %s", err)
	}

	if err = pic.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Pic: %s", err)
	}

	count, err = Pics(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
