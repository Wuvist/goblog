// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testJokes(t *testing.T) {
	t.Parallel()

	query := Jokes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testJokesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = joke.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJokesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Jokes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJokesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JokeSlice{joke}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testJokesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := JokeExists(tx, joke.ID)
	if err != nil {
		t.Errorf("Unable to check if Joke exists: %s", err)
	}
	if !e {
		t.Errorf("Expected JokeExistsG to return true, but got false.")
	}
}
func testJokesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	jokeFound, err := FindJoke(tx, joke.ID)
	if err != nil {
		t.Error(err)
	}

	if jokeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testJokesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Jokes(tx).Bind(joke); err != nil {
		t.Error(err)
	}
}

func testJokesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Jokes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testJokesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jokeOne := &Joke{}
	jokeTwo := &Joke{}
	if err = randomize.Struct(seed, jokeOne, jokeDBTypes, false, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}
	if err = randomize.Struct(seed, jokeTwo, jokeDBTypes, false, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jokeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jokeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Jokes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testJokesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	jokeOne := &Joke{}
	jokeTwo := &Joke{}
	if err = randomize.Struct(seed, jokeOne, jokeDBTypes, false, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}
	if err = randomize.Struct(seed, jokeTwo, jokeDBTypes, false, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jokeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jokeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func jokeBeforeInsertHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeAfterInsertHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeAfterSelectHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeBeforeUpdateHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeAfterUpdateHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeBeforeDeleteHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeAfterDeleteHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeBeforeUpsertHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func jokeAfterUpsertHook(e boil.Executor, o *Joke) error {
	*o = Joke{}
	return nil
}

func testJokesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Joke{}
	o := &Joke{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, jokeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Joke object: %s", err)
	}

	AddJokeHook(boil.BeforeInsertHook, jokeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	jokeBeforeInsertHooks = []JokeHook{}

	AddJokeHook(boil.AfterInsertHook, jokeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	jokeAfterInsertHooks = []JokeHook{}

	AddJokeHook(boil.AfterSelectHook, jokeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	jokeAfterSelectHooks = []JokeHook{}

	AddJokeHook(boil.BeforeUpdateHook, jokeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	jokeBeforeUpdateHooks = []JokeHook{}

	AddJokeHook(boil.AfterUpdateHook, jokeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	jokeAfterUpdateHooks = []JokeHook{}

	AddJokeHook(boil.BeforeDeleteHook, jokeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	jokeBeforeDeleteHooks = []JokeHook{}

	AddJokeHook(boil.AfterDeleteHook, jokeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	jokeAfterDeleteHooks = []JokeHook{}

	AddJokeHook(boil.BeforeUpsertHook, jokeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	jokeBeforeUpsertHooks = []JokeHook{}

	AddJokeHook(boil.AfterUpsertHook, jokeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	jokeAfterUpsertHooks = []JokeHook{}
}
func testJokesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJokesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx, jokeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJokesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = joke.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testJokesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JokeSlice{joke}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testJokesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Jokes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	jokeDBTypes = map[string]string{`ID`: `int`, `MSG`: `varchar`}
	_           = bytes.MinRead
)

func testJokesUpdate(t *testing.T) {
	t.Parallel()

	if len(jokeColumns) == len(jokePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	if err = joke.Update(tx); err != nil {
		t.Error(err)
	}
}

func testJokesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(jokeColumns) == len(jokePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	joke := &Joke{}
	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, joke, jokeDBTypes, true, jokePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(jokeColumns, jokePrimaryKeyColumns) {
		fields = jokeColumns
	} else {
		fields = strmangle.SetComplement(
			jokeColumns,
			jokePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(joke))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := JokeSlice{joke}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testJokesUpsert(t *testing.T) {
	t.Parallel()

	if len(jokeColumns) == len(jokePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	joke := Joke{}
	if err = randomize.Struct(seed, &joke, jokeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = joke.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Joke: %s", err)
	}

	count, err := Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &joke, jokeDBTypes, false, jokePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Joke struct: %s", err)
	}

	if err = joke.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Joke: %s", err)
	}

	count, err = Jokes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
