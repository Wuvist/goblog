// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testDtproperties(t *testing.T) {
	t.Parallel()

	query := Dtproperties(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testDtpropertiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = dtproperty.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDtpropertiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Dtproperties(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDtpropertiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DtpropertySlice{dtproperty}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testDtpropertiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := DtpropertyExists(tx, dtproperty.ID, dtproperty.Property)
	if err != nil {
		t.Errorf("Unable to check if Dtproperty exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DtpropertyExistsG to return true, but got false.")
	}
}
func testDtpropertiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	dtpropertyFound, err := FindDtproperty(tx, dtproperty.ID, dtproperty.Property)
	if err != nil {
		t.Error(err)
	}

	if dtpropertyFound == nil {
		t.Error("want a record, got nil")
	}
}
func testDtpropertiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Dtproperties(tx).Bind(dtproperty); err != nil {
		t.Error(err)
	}
}

func testDtpropertiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Dtproperties(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDtpropertiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtpropertyOne := &Dtproperty{}
	dtpropertyTwo := &Dtproperty{}
	if err = randomize.Struct(seed, dtpropertyOne, dtpropertyDBTypes, false, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}
	if err = randomize.Struct(seed, dtpropertyTwo, dtpropertyDBTypes, false, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtpropertyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = dtpropertyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Dtproperties(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDtpropertiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtpropertyOne := &Dtproperty{}
	dtpropertyTwo := &Dtproperty{}
	if err = randomize.Struct(seed, dtpropertyOne, dtpropertyDBTypes, false, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}
	if err = randomize.Struct(seed, dtpropertyTwo, dtpropertyDBTypes, false, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtpropertyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = dtpropertyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func dtpropertyBeforeInsertHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyAfterInsertHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyAfterSelectHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyBeforeUpdateHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyAfterUpdateHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyBeforeDeleteHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyAfterDeleteHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyBeforeUpsertHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func dtpropertyAfterUpsertHook(e boil.Executor, o *Dtproperty) error {
	*o = Dtproperty{}
	return nil
}

func testDtpropertiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Dtproperty{}
	o := &Dtproperty{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtpropertyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dtproperty object: %s", err)
	}

	AddDtpropertyHook(boil.BeforeInsertHook, dtpropertyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtpropertyBeforeInsertHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.AfterInsertHook, dtpropertyAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtpropertyAfterInsertHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.AfterSelectHook, dtpropertyAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtpropertyAfterSelectHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.BeforeUpdateHook, dtpropertyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtpropertyBeforeUpdateHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.AfterUpdateHook, dtpropertyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtpropertyAfterUpdateHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.BeforeDeleteHook, dtpropertyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtpropertyBeforeDeleteHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.AfterDeleteHook, dtpropertyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtpropertyAfterDeleteHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.BeforeUpsertHook, dtpropertyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtpropertyBeforeUpsertHooks = []DtpropertyHook{}

	AddDtpropertyHook(boil.AfterUpsertHook, dtpropertyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtpropertyAfterUpsertHooks = []DtpropertyHook{}
}
func testDtpropertiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDtpropertiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx, dtpropertyColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDtpropertiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = dtproperty.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDtpropertiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DtpropertySlice{dtproperty}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testDtpropertiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Dtproperties(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtpropertyDBTypes = map[string]string{`ID`: `int`, `Lvalue`: `longblob`, `Objectid`: `int`, `Property`: `varchar`, `Uvalue`: `varchar`, `Value`: `varchar`, `Version`: `int`}
	_                 = bytes.MinRead
)

func testDtpropertiesUpdate(t *testing.T) {
	t.Parallel()

	if len(dtpropertyColumns) == len(dtpropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	if err = dtproperty.Update(tx); err != nil {
		t.Error(err)
	}
}

func testDtpropertiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtpropertyColumns) == len(dtpropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	dtproperty := &Dtproperty{}
	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, dtproperty, dtpropertyDBTypes, true, dtpropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtpropertyColumns, dtpropertyPrimaryKeyColumns) {
		fields = dtpropertyColumns
	} else {
		fields = strmangle.SetComplement(
			dtpropertyColumns,
			dtpropertyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(dtproperty))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := DtpropertySlice{dtproperty}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testDtpropertiesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtpropertyColumns) == len(dtpropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	dtproperty := Dtproperty{}
	if err = randomize.Struct(seed, &dtproperty, dtpropertyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = dtproperty.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Dtproperty: %s", err)
	}

	count, err := Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &dtproperty, dtpropertyDBTypes, false, dtpropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dtproperty struct: %s", err)
	}

	if err = dtproperty.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Dtproperty: %s", err)
	}

	count, err = Dtproperties(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
